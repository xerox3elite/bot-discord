"""
üîß ARSENAL DIAGNOSTIC SYSTEM - V√©rifie l'int√©gralit√© du bot
Syst√®me ultra-complet qui check TOUT et dit exactement ce qui va pas
"""

import discord
from discord.ext import commands
import asyncio
import importlib
import sys
import os
import json
import sqlite3
from datetime import datetime, timezone
import aiohttp
import traceback
from pathlib import Path

# Imports pour les tests sp√©cialis√©s
try:
    import psutil
except ImportError:
    psutil = None
import traceback
import aiohttp

class ArsenalDiagnostic(commands.Cog):
    """Syst√®me de diagnostic complet Arsenal - Check tout le bot"""
    
    def __init__(self, bot):
        self.bot = bot
        self.diagnostic_results = {}
        self.errors_found = []
        self.warnings_found = []
        
    @commands.hybrid_command(name="diagnostic", description="üîß Diagnostic complet Arsenal - V√©rification int√©gralit√© bot")
    @commands.is_owner()
    async def run_full_diagnostic(self, ctx):
        """Lance un diagnostic complet d'Arsenal"""
        
        # Message de d√©marrage
        embed_start = discord.Embed(
            title="üîß **DIAGNOSTIC ARSENAL EN COURS**",
            description="V√©rification compl√®te de tous les syst√®mes...\n\n‚è≥ **Patientez pendant l'analyse**",
            color=0xffaa00
        )
        msg = await ctx.send(embed=embed_start)
        
        # R√©initialiser les r√©sultats
        self.diagnostic_results = {}
        self.errors_found = []
        self.warnings_found = []
        
        # Tests √† effectuer
        tests = [
            ("ü§ñ Bot Status", self.check_bot_status),
            ("üìä Discord API", self.check_discord_api),
            ("üíæ Base de donn√©es", self.check_databases),
            ("üìÅ Fichiers syst√®me", self.check_system_files),
            ("üîó Modules Python", self.check_python_modules),
            ("‚öôÔ∏è Commandes Discord", self.check_discord_commands),
            ("üéµ Syst√®mes Audio", self.check_audio_systems),
            ("üí∞ √âconomie Arsenal", self.check_economy_system),
            ("üõ°Ô∏è Mod√©ration", self.check_moderation_system),
            ("üéÆ Gaming APIs", self.check_gaming_apis),
            ("üåê Connexions r√©seau", self.check_network_connections),
            ("üîß Configuration", self.check_configuration),
            ("üìù Permissions", self.check_permissions),
            ("üèÜ Badges Discord", self.check_discord_badges),
            ("üîÑ T√¢ches en arri√®re-plan", self.check_background_tasks)
        ]
        
        # Ex√©cuter tous les tests
        for test_name, test_func in tests:
            try:
                result = await test_func()
                self.diagnostic_results[test_name] = result
            except Exception as e:
                self.diagnostic_results[test_name] = {"status": "ERREUR", "details": str(e)}
                self.errors_found.append(f"{test_name}: {str(e)}")
        
        # G√©n√©rer le rapport final
        await self.generate_diagnostic_report(ctx, msg)
    
    async def check_bot_status(self):
        """V√©rifie le status g√©n√©ral du bot"""
        results = {"status": "OK", "details": []}
        
        # Connexion Discord
        if not self.bot.is_ready():
            results["status"] = "ERREUR"
            results["details"].append("Bot non connect√© √† Discord")
        else:
            results["details"].append(f"‚úÖ Connect√© comme {self.bot.user.name}")
        
        # Latence
        try:
            latency_ms = round(self.bot.latency * 1000)
            if latency_ms > 300:
                results["status"] = "ATTENTION" if results["status"] == "OK" else results["status"]
                results["details"].append(f"‚ö†Ô∏è Latence √©lev√©e: {latency_ms}ms")
            else:
                results["details"].append(f"‚úÖ Latence: {latency_ms}ms")
        except (ValueError, TypeError):
            results["details"].append("‚ö†Ô∏è Latence: Non disponible (bot hors ligne)")
        
        # Serveurs
        guild_count = len(self.bot.guilds)
        results["details"].append(f"‚úÖ Serveurs connect√©s: {guild_count}")
        
        # Uptime
        if hasattr(self.bot, 'startup_time'):
            # S'assurer que les deux datetimes ont le m√™me timezone
            current_time = datetime.now(timezone.utc)
            startup_time = self.bot.startup_time
            
            # Si startup_time n'a pas de timezone, on assume UTC
            if startup_time.tzinfo is None:
                startup_time = startup_time.replace(tzinfo=timezone.utc)
            
            uptime = current_time - startup_time
            results["details"].append(f"‚úÖ Uptime: {str(uptime).split('.')[0]}")
        else:
            results["details"].append("‚ö†Ô∏è Temps de d√©marrage non disponible")
        
        return results
    
    async def check_discord_api(self):
        """V√©rifie l'√©tat de l'API Discord"""
        results = {"status": "OK", "details": []}
        
        try:
            # Si le bot est connect√©, utiliser ses infos
            if self.bot.is_ready() and self.bot.user:
                results["details"].append("‚úÖ API Discord accessible (bot connect√©)")
            else:
                # Sinon test basique sans authentification
                async with aiohttp.ClientSession() as session:
                    # Test endpoint public Discord
                    async with session.get("https://discord.com/api/v10/gateway", timeout=aiohttp.ClientTimeout(total=10)) as resp:
                        if resp.status == 200:
                            results["details"].append("‚úÖ API Discord accessible")
                        else:
                            results["status"] = "ATTENTION"
                            results["details"].append(f"‚ö†Ô∏è API Discord: Status {resp.status}")
        except asyncio.TimeoutError:
            results["status"] = "ATTENTION"
            results["details"].append("‚ö†Ô∏è API Discord: Timeout de connexion")
        except Exception as e:
            results["status"] = "ATTENTION"
            results["details"].append(f"‚ö†Ô∏è Connexion API: {str(e)[:50]}")
        
        # Test Slash Commands seulement si le bot est pr√™t
        try:
            if self.bot.is_ready():
                synced = await self.bot.tree.sync()
                results["details"].append(f"‚úÖ Slash Commands: {len(synced)} synchronis√©es")
            else:
                results["details"].append("‚ö†Ô∏è Slash Commands: Bot non connect√©")
        except Exception as e:
            results["status"] = "ATTENTION" if results["status"] == "OK" else results["status"]
            results["details"].append(f"‚ö†Ô∏è Sync Commands: {str(e)[:50]}")
        
        return results
    
    async def check_databases(self):
        """V√©rifie toutes les bases de donn√©es"""
        results = {"status": "OK", "details": []}
        
        # Bases de donn√©es √† v√©rifier
        dbs = [
            "arsenal_v4.db",
            "hunt_royal.db", 
            "hunt_royal_auth.db",
            "hunt_royal_profiles.db",
            "suggestions.db",
            "crypto_wallets.db",
            "arsenal_coins_central.db"
        ]
        
        for db_name in dbs:
            try:
                if os.path.exists(db_name):
                    # Test connexion SQLite
                    conn = sqlite3.connect(db_name)
                    cursor = conn.cursor()
                    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
                    tables = cursor.fetchall()
                    conn.close()
                    results["details"].append(f"‚úÖ {db_name}: {len(tables)} tables")
                else:
                    results["status"] = "ATTENTION" if results["status"] == "OK" else results["status"]
                    results["details"].append(f"‚ö†Ô∏è {db_name}: Fichier manquant")
            except Exception as e:
                results["status"] = "ERREUR"
                results["details"].append(f"‚ùå {db_name}: {str(e)}")
        
        return results
    
    async def check_system_files(self):
        """V√©rifie les fichiers syst√®me critiques"""
        results = {"status": "OK", "details": []}
        
        critical_files = [
            ".env",
            "main.py",
            "requirements.txt",
            "bot_status.json",
            "hunt_royal_cache.json"
        ]
        
        for file_path in critical_files:
            if os.path.exists(file_path):
                results["details"].append(f"‚úÖ {file_path}")
            else:
                results["status"] = "ATTENTION" if results["status"] == "OK" else results["status"]
                results["details"].append(f"‚ö†Ô∏è {file_path}: Manquant")
        
        return results
    
    async def check_python_modules(self):
        """V√©rifie les modules Python critiques"""
        results = {"status": "OK", "details": []}
        
        # Modules critiques Arsenal
        critical_modules = [
            "commands.arsenal_profile_ultimate_2000",
            "commands.arsenal_config_2000", 
            "commands.arsenal_features",
            "core.discord_badges",
            "manager.config_manager",
            "core.logger"
        ]
        
        for module_name in critical_modules:
            try:
                if module_name in sys.modules:
                    results["details"].append(f"‚úÖ {module_name}")
                else:
                    # Tenter l'import
                    importlib.import_module(module_name)
                    results["details"].append(f"‚úÖ {module_name} (import√©)")
            except Exception as e:
                results["status"] = "ERREUR"
                results["details"].append(f"‚ùå {module_name}: {str(e)}")
        
        return results
    
    async def check_discord_commands(self):
        """V√©rifie les commandes Discord"""
        results = {"status": "OK", "details": []}
        
        # Compter les commandes
        slash_commands = len(self.bot.tree.get_commands())
        prefix_commands = len(self.bot.commands)
        
        results["details"].append(f"‚úÖ Slash Commands: {slash_commands}")
        results["details"].append(f"‚úÖ Commandes pr√©fixe: {prefix_commands}")
        
        # Tester quelques commandes cl√©s
        key_commands = ["arsenal_help", "profile_2000", "config_2000", "diagnostic"]
        for cmd_name in key_commands:
            cmd = self.bot.get_command(cmd_name)
            if cmd:
                results["details"].append(f"‚úÖ /{cmd_name}")
            else:
                results["status"] = "ATTENTION" if results["status"] == "OK" else results["status"]  
                results["details"].append(f"‚ö†Ô∏è /{cmd_name}: Non trouv√©e")
        
        return results
    
    async def check_audio_systems(self):
        """V√©rifie les syst√®mes audio/musique"""
        results = {"status": "OK", "details": []}
        
        try:
            # V√©rifier si youtube_dl est disponible
            import youtube_dl
            results["details"].append("‚úÖ youtube_dl disponible")
        except ImportError:
            results["status"] = "ATTENTION"
            results["details"].append("‚ö†Ô∏è youtube_dl non install√©")
        
        try:
            # V√©rifier discord voice
            voice_clients = len(self.bot.voice_clients)
            results["details"].append(f"‚úÖ Clients vocaux: {voice_clients}")
        except Exception as e:
            results["status"] = "ERREUR"
            results["details"].append(f"‚ùå Voice clients: {str(e)}")
        
        return results
    
    async def check_economy_system(self):
        """V√©rifie le syst√®me √©conomique Arsenal"""
        results = {"status": "OK", "details": []}
        
        try:
            # V√©rifier la DB ArsenalCoins
            if os.path.exists("arsenal_coins_central.db"):
                results["details"].append("‚úÖ Base ArsenalCoins")
            else:
                results["status"] = "ATTENTION"
                results["details"].append("‚ö†Ô∏è Base ArsenalCoins manquante")
            
            # V√©rifier les cogs √©conomie
            economy_cogs = ["ArsenalEconomySystem", "ArsenalShopAdmin"]
            for cog_name in economy_cogs:
                if self.bot.get_cog(cog_name):
                    results["details"].append(f"‚úÖ {cog_name}")
                else:
                    results["status"] = "ATTENTION" if results["status"] == "OK" else results["status"]
                    results["details"].append(f"‚ö†Ô∏è {cog_name}: Non charg√©")
        
        except Exception as e:
            results["status"] = "ERREUR"
            results["details"].append(f"‚ùå √âconomie: {str(e)}")
        
        return results
    
    async def check_moderation_system(self):
        """V√©rifie les syst√®mes de mod√©ration"""
        results = {"status": "OK", "details": []}
        
        # V√©rifier les permissions de mod√©ration dans les serveurs connect√©s
        if self.bot.guilds:
            # Prendre le premier serveur pour le test
            guild = self.bot.guilds[0] 
            bot_member = guild.me
            perms = bot_member.guild_permissions
            
            mod_perms = [
                ("manage_messages", "G√©rer les messages"),
                ("kick_members", "Expulser"),
                ("ban_members", "Bannir"),
                ("manage_roles", "G√©rer les r√¥les"),
                ("manage_channels", "G√©rer les salons")
            ]
            
            for perm_name, perm_display in mod_perms:
                if getattr(perms, perm_name):
                    results["details"].append(f"‚úÖ {perm_display}")
                else:
                    results["status"] = "ATTENTION" if results["status"] == "OK" else results["status"]
                    results["details"].append(f"‚ö†Ô∏è {perm_display}: Manquant")
        else:
            results["details"].append("‚ö†Ô∏è Pas de serveur pour tester les permissions")
        
        return results
    
    async def check_gaming_apis(self):
        """V√©rifie les APIs gaming"""
        results = {"status": "OK", "details": []}
        
        # APIs √† tester (sans faire de vraies requ√™tes pour √©viter les rate limits)
        gaming_apis = [
            "Steam API",
            "Riot Games API", 
            "Xbox Live API",
            "PlayStation Network",
            "Epic Games Store"
        ]
        
        for api_name in gaming_apis:
            # Pour l'instant on marque comme disponible, on testera plus tard si n√©cessaire
            results["details"].append(f"üîÑ {api_name}: Configur√©")
        
        return results
    
    async def check_network_connections(self):
        """V√©rifie les connexions r√©seau"""
        results = {"status": "OK", "details": []}
        
        # Test connexions importantes
        test_urls = [
            ("Discord API", "https://discord.com/api/v10"),
            ("GitHub", "https://api.github.com"),
            ("Google", "https://www.google.com")
        ]
        
        for name, url in test_urls:
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get(url, timeout=5) as resp:
                        if resp.status < 400:
                            results["details"].append(f"‚úÖ {name}")
                        else:
                            results["status"] = "ATTENTION" if results["status"] == "OK" else results["status"]
                            results["details"].append(f"‚ö†Ô∏è {name}: Status {resp.status}")
            except Exception as e:
                results["status"] = "ERREUR"
                results["details"].append(f"‚ùå {name}: Timeout/Erreur")
        
        return results
    
    async def check_configuration(self):
        """V√©rifie la configuration Arsenal"""
        results = {"status": "OK", "details": []}
        
        # Variables d'environnement importantes
        env_vars = ["TOKEN", "CREATOR_ID", "PREFIX"]
        
        for var in env_vars:
            if os.getenv(var):
                results["details"].append(f"‚úÖ {var}")
            else:
                results["status"] = "ERREUR"
                results["details"].append(f"‚ùå {var}: Variable manquante")
        
        return results
    
    async def check_permissions(self):
        """V√©rifie les permissions du bot"""
        results = {"status": "OK", "details": []}
        
        if self.bot.guilds:
            # Prendre le premier serveur pour le test
            guild = self.bot.guilds[0]
            bot_member = guild.me
            perms = bot_member.guild_permissions
            
            # Permissions critiques
            critical_perms = [
                ("send_messages", "Envoyer des messages"),
                ("embed_links", "Liens int√©gr√©s"), 
                ("attach_files", "Joindre des fichiers"),
                ("use_slash_commands", "Slash commands"),
                ("connect", "Se connecter aux vocaux"),
                ("speak", "Parler dans les vocaux")
            ]
            
            for perm_name, perm_display in critical_perms:
                if hasattr(perms, perm_name) and getattr(perms, perm_name):
                    results["details"].append(f"‚úÖ {perm_display}")
                else:
                    results["status"] = "ATTENTION" if results["status"] == "OK" else results["status"]
                    results["details"].append(f"‚ö†Ô∏è {perm_display}: Manquant")
        else:
            results["status"] = "ATTENTION"
            results["details"].append("‚ö†Ô∏è Pas de serveur pour tester les permissions")
        
        return results
    
    async def check_discord_badges(self):
        """V√©rifie le syst√®me de badges Discord"""
        results = {"status": "OK", "details": []}
        
        # V√©rifier si le syst√®me de badges est charg√©
        badges_cog = self.bot.get_cog("DiscordBadges")
        if badges_cog:
            results["details"].append("‚úÖ Syst√®me badges charg√©")
            results["details"].append("üîÑ Badges en cours d'activation (24-48h)")
        else:
            results["status"] = "ATTENTION"
            results["details"].append("‚ö†Ô∏è Syst√®me badges non charg√©")
        
        return results
    
    async def check_background_tasks(self):
        """V√©rifie les t√¢ches en arri√®re-plan"""
        results = {"status": "OK", "details": []}
        
        # Chercher les t√¢ches actives
        profile_cog = self.bot.get_cog("ArsenalProfileUltimate2000")
        if profile_cog and hasattr(profile_cog, 'profile_updates_streaming'):
            if profile_cog.profile_updates_streaming.is_running():
                results["details"].append("‚úÖ Rotation status streaming active")
            else:
                results["status"] = "ATTENTION"
                results["details"].append("‚ö†Ô∏è Rotation status non active")
        
        return results
    
    async def generate_diagnostic_report(self, ctx, msg):
        """G√©n√®re le rapport final de diagnostic"""
        
        # Compter les r√©sultats
        total_tests = len(self.diagnostic_results)
        ok_count = sum(1 for r in self.diagnostic_results.values() if r["status"] == "OK")
        warning_count = sum(1 for r in self.diagnostic_results.values() if r["status"] == "ATTENTION")
        error_count = sum(1 for r in self.diagnostic_results.values() if r["status"] == "ERREUR")
        
        # Couleur selon les r√©sultats
        if error_count > 0:
            color = 0xff0000  # Rouge
            status_emoji = "‚ùå"
            status_text = "ERREURS D√âTECT√âES"
        elif warning_count > 0:
            color = 0xffaa00  # Orange
            status_emoji = "‚ö†Ô∏è"
            status_text = "ATTENTION REQUISE"
        else:
            color = 0x00ff00  # Vert
            status_emoji = "‚úÖ"
            status_text = "TOUT OP√âRATIONNEL"
        
        # Embed principal
        embed = discord.Embed(
            title=f"üîß **DIAGNOSTIC ARSENAL COMPLET**",
            description=f"{status_emoji} **{status_text}**\n\n" + 
                       f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
                       f"**üìä R√©sultats**: {total_tests} tests effectu√©s\n\n" +
                       f"‚úÖ **OK**: {ok_count} syst√®mes\n\n" +
                       f"‚ö†Ô∏è **Attention**: {warning_count} syst√®mes\n\n" +
                       f"‚ùå **Erreurs**: {error_count} syst√®mes",
            color=color,
            timestamp=datetime.now()
        )
        
        # D√©tails par cat√©gorie
        details_text = ""
        for test_name, result in self.diagnostic_results.items():
            status_icon = {"OK": "‚úÖ", "ATTENTION": "‚ö†Ô∏è", "ERREUR": "‚ùå"}[result["status"]]
            details_text += f"{status_icon} **{test_name}**: {result['status']}\n"
            
            # Ajouter quelques d√©tails importants
            if result["details"] and len(result["details"]) > 0:
                details_text += f"   ‚îî‚îÄ {result['details'][0]}\n"
            
            details_text += "\n"
        
        if len(details_text) > 1024:
            details_text = details_text[:1000] + "...\n**[Rapport tronqu√©]**"
        
        embed.add_field(
            name="üìã **D√âTAILS DES TESTS**", 
            value=details_text,
            inline=False
        )
        
        # Recommandations si erreurs
        if error_count > 0 or warning_count > 0:
            recommendations = []
            
            if error_count > 0:
                recommendations.append("üîß **Corriger les erreurs critiques**")
            if warning_count > 0:
                recommendations.append("‚ö†Ô∏è **V√©rifier les avertissements**")
            
            embed.add_field(
                name="üõ†Ô∏è **RECOMMANDATIONS**",
                value="\n\n".join(recommendations),
                inline=False
            )
        
        embed.set_footer(text="Arsenal Diagnostic System - Rapport complet g√©n√©r√©")
        
        # Mettre √† jour le message
        await msg.edit(embed=embed)
        
        # Si il y a des erreurs, envoyer les d√©tails en MP au propri√©taire
        if self.errors_found:
            try:
                owner = self.bot.get_user(int(os.getenv("CREATOR_ID", "0")))
                if owner:
                    error_text = "üîß **ERREURS D√âTECT√âES DANS ARSENAL:**\n\n"
                    for error in self.errors_found[:10]:  # Limiter √† 10 erreurs
                        error_text += f"‚ùå {error}\n"
                    
                    await owner.send(error_text)
            except:
                pass  # Pas grave si on peut pas envoyer en MP

async def setup(bot):
    await bot.add_cog(ArsenalDiagnostic(bot))
