#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ Arsenal V4 - Syst√®me de R√®glement DraftBot Style Ultra Complet
Toutes les fonctionnalit√©s DraftBot avec interface simplifi√©e
D√©velopp√© par XeRoX - Arsenal Bot V4.5.2
"""

import discord
from discord.ext import commands, tasks
from discord import app_commands
import aiosqlite
import json
import asyncio
from datetime import datetime, timedelta
import os
from typing import Optional, Dict, List
import logging

class ReglementDraftBot(commands.Cog):
    """Syst√®me de r√®glement complet style DraftBot avec interface simple"""
    
    def __init__(self, bot):
        self.bot = bot
        self.db_path = "data/reglement_draftbot.db"
        
        # Configuration ultra compl√®te
        self.default_config = {
            "enabled": False,
            "rules_channel": None,
            "welcome_channel": None,
            "log_channel": None,
            "member_role": None,
            "visitor_role": None,
            
            # Fonctionnalit√©s avanc√©es
            "auto_kick": True,
            "kick_delay": 300,  # 5 minutes
            "dm_on_join": True,
            "dm_on_refuse": True,
            "temp_channels": True,
            "verification_level": "medium",  # low, medium, high, extreme
            
            # Sanctions automatiques
            "warn_system": True,
            "auto_timeout": True,
            "timeout_duration": 3600,  # 1 heure
            "escalation_system": True,
            
            # Statistiques et logs
            "stats_tracking": True,
            "detailed_logs": True,
            "mod_notifications": True,
            
            # Personnalisation
            "custom_embed_color": 0xff0000,
            "custom_footer": "Arsenal ‚Ä¢ R√®glement DraftBot Style",
            "custom_thumbnail": None,
            
            # R√®gles templates
            "rules_templates": {
                "basic": [
                    {"title": "Respect", "desc": "Respectez tous les membres", "emoji": "ü§ù"},
                    {"title": "Spam", "desc": "Pas de spam/flood", "emoji": "üö´"},
                    {"title": "NSFW", "desc": "Contenu NSFW interdit", "emoji": "üîû"}
                ],
                "gaming": [
                    {"title": "Fair Play", "desc": "Jouez √©quitablement", "emoji": "üéÆ"},
                    {"title": "Toxicit√©", "desc": "Pas de comportement toxique", "emoji": "‚ò†Ô∏è"},
                    {"title": "Triche", "desc": "Interdiction de tricher", "emoji": "‚ö†Ô∏è"}
                ],
                "community": [
                    {"title": "Bienveillance", "desc": "Soyez bienveillants", "emoji": "üíñ"},
                    {"title": "Constructif", "desc": "Discussions constructives uniquement", "emoji": "üèóÔ∏è"},
                    {"title": "Patience", "desc": "Soyez patients avec les nouveaux", "emoji": "‚è∞"}
                ]
            },
            
            "rules": []
        }
        
        # Cr√©er la base de donn√©es
        asyncio.create_task(self.setup_database())
        
        # D√©marrer les t√¢ches de surveillance
        if not hasattr(self, '_tasks_started'):
            self.verification_checker.start()
            self.stats_updater.start()
            self._tasks_started = True
    
    async def setup_database(self):
        """Initialise la base de donn√©es compl√®te"""
        try:
            os.makedirs("data", exist_ok=True)
            
            async with aiosqlite.connect(self.db_path) as db:
                # Table configuration serveur
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS server_config (
                        guild_id INTEGER PRIMARY KEY,
                        config TEXT NOT NULL,
                        updated_at TEXT NOT NULL
                    )
                """)
                
                # Table acceptations utilisateurs
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS user_accepts (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        guild_id INTEGER NOT NULL,
                        user_id INTEGER NOT NULL,
                        username TEXT NOT NULL,
                        accepted_at TEXT NOT NULL,
                        ip_hash TEXT,
                        verification_code TEXT,
                        UNIQUE(guild_id, user_id)
                    )
                """)
                
                # Table sanctions
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS sanctions (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        guild_id INTEGER NOT NULL,
                        user_id INTEGER NOT NULL,
                        sanction_type TEXT NOT NULL,
                        reason TEXT NOT NULL,
                        moderator_id INTEGER NOT NULL,
                        created_at TEXT NOT NULL,
                        expires_at TEXT,
                        active BOOLEAN DEFAULT 1
                    )
                """)
                
                # Table statistiques
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS stats (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        guild_id INTEGER NOT NULL,
                        stat_type TEXT NOT NULL,
                        stat_value INTEGER DEFAULT 0,
                        date TEXT NOT NULL
                    )
                """)
                
                # Table logs d√©taill√©s
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS detailed_logs (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        guild_id INTEGER NOT NULL,
                        user_id INTEGER NOT NULL,
                        action TEXT NOT NULL,
                        details TEXT,
                        timestamp TEXT NOT NULL
                    )
                """)
                
                await db.commit()
                
        except Exception as e:
            logging.error(f"‚ùå Erreur setup database r√®glement DraftBot: {e}")
    
    # ==================== T√ÇCHES AUTOMATIQUES ====================
    
    @tasks.loop(minutes=5)
    async def verification_checker(self):
        """V√©rifie les utilisateurs non v√©rifi√©s"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # R√©cup√©rer les configs actives
                async with db.execute("SELECT guild_id, config FROM server_config") as cursor:
                    async for row in cursor:
                        guild_id, config_str = row
                        config = json.loads(config_str)
                        
                        if not config.get("enabled") or not config.get("auto_kick"):
                            continue
                        
                        guild = self.bot.get_guild(guild_id)
                        if not guild:
                            continue
                        
                        # V√©rifier les membres non v√©rifi√©s depuis plus de kick_delay
                        cutoff_time = datetime.now() - timedelta(seconds=config.get("kick_delay", 300))
                        
                        for member in guild.members:
                            if member.bot:
                                continue
                            
                            # V√©rifier si accept√©
                            is_accepted = await self.is_user_accepted(guild_id, member.id)
                            if is_accepted:
                                continue
                            
                            # V√©rifier si rejoint r√©cemment
                            if member.joined_at and member.joined_at > cutoff_time:
                                continue
                            
                            # Auto-kick
                            try:
                                await member.kick(reason="Non acceptation du r√®glement (auto-kick)")
                                await self.log_action(guild_id, member.id, "auto_kick", "Non acceptation du r√®glement")
                            except:
                                pass
        except Exception as e:
            logging.error(f"‚ùå Erreur verification_checker: {e}")
    
    @tasks.loop(hours=1)
    async def stats_updater(self):
        """Met √† jour les statistiques"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                for guild in self.bot.guilds:
                    # Compter les acceptations du jour
                    today = datetime.now().strftime("%Y-%m-%d")
                    
                    async with db.execute("""
                        SELECT COUNT(*) FROM user_accepts 
                        WHERE guild_id = ? AND DATE(accepted_at) = ?
                    """, (guild.id, today)) as cursor:
                        count = (await cursor.fetchone())[0]
                    
                    # Sauvegarder la stat
                    await db.execute("""
                        INSERT OR REPLACE INTO stats (guild_id, stat_type, stat_value, date)
                        VALUES (?, ?, ?, ?)
                    """, (guild.id, "daily_accepts", count, today))
                
                await db.commit()
        except Exception as e:
            logging.error(f"‚ùå Erreur stats_updater: {e}")
    
    # ==================== M√âTHODES UTILITAIRES ====================
    
    async def get_config(self, guild_id: int) -> Dict:
        """R√©cup√®re la configuration du serveur"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                async with db.execute("SELECT config FROM server_config WHERE guild_id = ?", (guild_id,)) as cursor:
                    row = await cursor.fetchone()
                    if row:
                        return json.loads(row[0])
            return self.default_config.copy()
        except Exception as e:
            logging.error(f"‚ùå Erreur get_config: {e}")
            return self.default_config.copy()
    
    async def save_config(self, guild_id: int, config: Dict):
        """Sauvegarde la configuration du serveur"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute("""
                    INSERT OR REPLACE INTO server_config (guild_id, config, updated_at)
                    VALUES (?, ?, ?)
                """, (guild_id, json.dumps(config), datetime.now().isoformat()))
                await db.commit()
        except Exception as e:
            logging.error(f"‚ùå Erreur save_config: {e}")
    
    async def is_user_accepted(self, guild_id: int, user_id: int) -> bool:
        """V√©rifie si l'utilisateur a accept√© le r√®glement"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                async with db.execute("SELECT id FROM user_accepts WHERE guild_id = ? AND user_id = ?", (guild_id, user_id)) as cursor:
                    row = await cursor.fetchone()
                    return row is not None
        except:
            return False
    
    async def record_acceptance(self, guild_id: int, user_id: int, username: str):
        """Enregistre l'acceptation du r√®glement"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute("""
                    INSERT OR IGNORE INTO user_accepts (guild_id, user_id, username, accepted_at)
                    VALUES (?, ?, ?, ?)
                """, (guild_id, user_id, username, datetime.now().isoformat()))
                await db.commit()
                return True
        except Exception as e:
            logging.error(f"‚ùå Erreur record_acceptance: {e}")
            return False
    
    async def log_action(self, guild_id: int, user_id: int, action: str, details: str = ""):
        """Enregistre une action dans les logs d√©taill√©s"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute("""
                    INSERT INTO detailed_logs (guild_id, user_id, action, details, timestamp)
                    VALUES (?, ?, ?, ?, ?)
                """, (guild_id, user_id, action, details, datetime.now().isoformat()))
                await db.commit()
        except Exception as e:
            logging.error(f"‚ùå Erreur log_action: {e}")
    
    # ==================== COMMANDES D'ADMINISTRATION ====================
    
    @app_commands.command(name="reglement_setup", description="üîß Configuration compl√®te du r√®glement (style DraftBot)")
    @app_commands.describe(
        template="Template de r√®gles √† utiliser",
        rules_channel="Salon pour afficher le r√®glement",
        welcome_channel="Salon de bienvenue",
        log_channel="Salon des logs",
        member_role="R√¥le √† donner apr√®s acceptation",
        verification_level="Niveau de v√©rification (low/medium/high/extreme)"
    )
    @app_commands.choices(template=[
        app_commands.Choice(name="üéÆ Gaming - R√®gles pour serveur gaming", value="gaming"),
        app_commands.Choice(name="üë• Community - R√®gles pour communaut√©", value="community"),
        app_commands.Choice(name="üìù Basic - R√®gles de base", value="basic"),
        app_commands.Choice(name="üõ†Ô∏è Custom - Configuration manuelle", value="custom")
    ])
    @app_commands.choices(verification_level=[
        app_commands.Choice(name="üü¢ Low - V√©rification basique", value="low"),
        app_commands.Choice(name="üü° Medium - V√©rification standard", value="medium"),
        app_commands.Choice(name="üü† High - V√©rification stricte", value="high"),
        app_commands.Choice(name="üî¥ Extreme - V√©rification maximale", value="extreme")
    ])
    @app_commands.default_permissions(administrator=True)
    async def reglement_setup(self, interaction: discord.Interaction,
                             template: str,
                             rules_channel: discord.TextChannel,
                             welcome_channel: Optional[discord.TextChannel] = None,
                             log_channel: Optional[discord.TextChannel] = None,
                             member_role: Optional[discord.Role] = None,
                             verification_level: str = "medium"):
        """Configuration compl√®te en une commande !"""
        
        await interaction.response.defer()
        
        config = await self.get_config(interaction.guild.id)
        config.update({
            "enabled": True,
            "rules_channel": rules_channel.id,
            "welcome_channel": welcome_channel.id if welcome_channel else None,
            "log_channel": log_channel.id if log_channel else None,
            "member_role": member_role.id if member_role else None,
            "verification_level": verification_level,
            "auto_kick": True,
            "kick_delay": {"low": 600, "medium": 300, "high": 120, "extreme": 60}[verification_level]
        })
        
        # Appliquer le template si pas custom
        if template != "custom" and template in config["rules_templates"]:
            config["rules"] = config["rules_templates"][template].copy()
        
        await self.save_config(interaction.guild.id, config)
        
        # Dictionnaires pour l'affichage
        verification_levels = {
            'low': 'üü¢ Faible',
            'medium': 'üü° Standard', 
            'high': 'üü† Strict',
            'extreme': 'üî¥ Maximum'
        }
        
        templates = {
            'gaming': 'üéÆ Gaming',
            'community': 'üë• Community',
            'basic': 'üìù Basic',
            'custom': 'üõ†Ô∏è Custom'
        }
        
        # Cr√©er l'embed de confirmation
        embed = discord.Embed(
            title="‚úÖ **R√àGLEMENT CONFIGUR√â AVEC SUCC√àS !**",
            description=f"**Configuration DraftBot Style activ√©e !**\n\n"
                       f"üìã **Salon r√®glement:** {rules_channel.mention}\n"
                       f"ÔøΩ **Salon bienvenue:** {welcome_channel.mention if welcome_channel else 'Non configur√©'}\n"
                       f"üìù **Salon logs:** {log_channel.mention if log_channel else 'Non configur√©'}\n"
                       f"üë• **R√¥le membre:** {member_role.mention if member_role else 'Non configur√©'}\n"
                       f"üîí **Niveau v√©rification:** {verification_levels[verification_level]}\n"
                       f"‚è∞ **D√©lai avant expulsion:** {config['kick_delay']}s\n"
                       f"üìä **Template:** {templates[template]}",
            color=discord.Color.green(),
            timestamp=datetime.now()
        )
        
        embed.add_field(
            name="üöÄ **FONCTIONNALIT√âS ACTIV√âES**",
            value="‚Ä¢ ‚úÖ **Auto-kick** des non-v√©rifi√©s\n"
                  "‚Ä¢ üìä **Statistiques** d√©taill√©es\n"
                  "‚Ä¢ üìù **Logs** complets\n"
                  "‚Ä¢ ‚ö†Ô∏è **Syst√®me de sanctions**\n"
                  "‚Ä¢ üîî **Notifications** mod√©rateurs\n"
                  "‚Ä¢ üíå **Messages priv√©s** automatiques",
            inline=True
        )
        
        embed.add_field(
            name="üìù **PROCHAINES √âTAPES**",
            value=f"‚Ä¢ `/reglement_show` - Afficher le r√®glement\n"
                  f"‚Ä¢ `/reglement_edit` - Modifier les r√®gles\n"
                  f"‚Ä¢ `/reglement_stats` - Voir les statistiques\n"
                  f"‚Ä¢ `/reglement_logs` - Consulter les logs",
            inline=True
        )
        
        embed.set_footer(text="Arsenal ‚Ä¢ DraftBot Style", icon_url=self.bot.user.avatar.url)
        
        await interaction.followup.send(embed=embed)
    
    @app_commands.command(name="reglement_show", description="üìã Afficher le r√®glement avec interface compl√®te")
    @app_commands.default_permissions(administrator=True)
    async def reglement_show(self, interaction: discord.Interaction):
        """Affiche le r√®glement complet avec toutes les fonctionnalit√©s"""
        
        config = await self.get_config(interaction.guild.id)
        if not config.get("enabled"):
            await interaction.response.send_message("‚ùå Configurez d'abord avec `/reglement_setup` !", ephemeral=True)
            return
        
        if not config.get("rules"):
            await interaction.response.send_message("‚ùå Aucune r√®gle configur√©e ! Utilisez un template dans `/reglement_setup`", ephemeral=True)
            return
        
        # Construire l'embed ultra complet
        verification_levels = {
            'low': 'üü¢ Standard',
            'medium': 'üü° Renforc√©', 
            'high': 'üü† Strict',
            'extreme': 'üî¥ Maximum'
        }
        
        embed = discord.Embed(
            title="üìú **R√àGLEMENT OFFICIEL DU SERVEUR**",
            description=f"**{interaction.guild.name}**\n\n"
                       f"**‚ö†Ô∏è ACCEPTATION OBLIGATOIRE POUR ACC√âDER AU SERVEUR ‚ö†Ô∏è**\n\n"
                       f"üîí **Niveau de s√©curit√©:** {verification_levels[config.get('verification_level', 'medium')]}\n"
                       f"‚è∞ **Temps limite:** {config.get('kick_delay', 300)} secondes\n"
                       f"üìä **{len(config['rules'])} r√®gles** √† respecter absolument",
            color=config.get("custom_embed_color", 0xff0000),
            timestamp=datetime.now()
        )
        
        # Ajouter les r√®gles avec emojis
        rules_text = ""
        for i, rule in enumerate(config["rules"][:10], 1):  # Max 10 r√®gles
            emoji = rule.get("emoji", "üìù")
            title = rule.get("title", f"R√®gle {i}")
            desc = rule.get("desc", "Description non d√©finie")
            rules_text += f"{emoji} **{i}. {title}**\n{desc}\n\n"
        
        embed.add_field(
            name="üìã **R√àGLES √Ä RESPECTER ABSOLUMENT**",
            value=rules_text,
            inline=False
        )
        
        # Informations sur les sanctions
        embed.add_field(
            name="‚öñÔ∏è **SYST√àME DE SANCTIONS AUTOMATIQUE**",
            value="üü° **1√®re infraction:** Avertissement + Log\n"
                  "üü† **2√®me infraction:** Timeout 1h + Notification mods\n"
                  "üî¥ **3√®me infraction:** Timeout 24h + Examen\n"
                  "‚ö´ **Infractions graves:** Expulsion imm√©diate",
            inline=True
        )
        
        # Aide et support
        embed.add_field(
            name="üÜò **BESOIN D'AIDE OU QUESTIONS ?**",
            value="‚Ä¢ üìû Contactez un **@Mod√©rateur** ou **@Admin**\n"
                  "‚Ä¢ üé´ Ouvrez un **ticket** de support\n"
                  "‚Ä¢ üìß Utilisez les salons d'**aide d√©di√©s**\n"
                  "‚Ä¢ ‚è∞ **Patience** et **respect** requis !",
            inline=True
        )
        
        # Statistiques du serveur
        embed.add_field(
            name="üìä **STATISTIQUES DU SERVEUR**",
            value=f"üë• **Membres:** {len(interaction.guild.members)}\n"
                  f"ü§ñ **Bots:** {len([m for m in interaction.guild.members if m.bot])}\n"
                  f"üìÖ **Cr√©√© le:** {interaction.guild.created_at.strftime('%d/%m/%Y')}\n"
                  f"üîê **Niveau v√©rif:** {interaction.guild.verification_level.name.title()}",
            inline=True
        )
        
        embed.set_thumbnail(url=interaction.guild.icon.url if interaction.guild.icon else None)
        embed.set_footer(
            text=config.get("custom_footer", f"Arsenal ‚Ä¢ DraftBot Style ‚Ä¢ {datetime.now().strftime('%d/%m/%Y √† %H:%M')}"),
            icon_url=self.bot.user.avatar.url
        )
        
        # Envoyer dans le salon configur√©
        rules_channel = self.bot.get_channel(config["rules_channel"])
        if not rules_channel:
            await interaction.response.send_message("‚ùå Salon de r√®glement introuvable !", ephemeral=True)
            return
        
        # Cr√©er la vue avec tous les boutons
        view = ReglementDraftBotView()
        
        try:
            await rules_channel.send(embed=embed, view=view)
            
            # Message de confirmation
            confirm_embed = discord.Embed(
                title="‚úÖ **R√àGLEMENT PUBLI√â !**",
                description=f"**R√®glement affich√© dans {rules_channel.mention}**\n\n"
                           f"üéØ **Fonctionnalit√©s actives:**\n"
                           f"‚Ä¢ Auto-kick apr√®s {config.get('kick_delay', 300)}s\n"
                           f"‚Ä¢ Logs d√©taill√©s des actions\n"
                           f"‚Ä¢ Statistiques en temps r√©el\n"
                           f"‚Ä¢ Messages priv√©s automatiques\n"
                           f"‚Ä¢ Syst√®me de sanctions graduelles",
                color=discord.Color.green()
            )
            
            await interaction.response.send_message(embed=confirm_embed, ephemeral=True)
            
        except Exception as e:
            await interaction.response.send_message(f"‚ùå Erreur: {e}", ephemeral=True)


class ReglementView(discord.ui.View):
    """Interface √† boutons ultra simple pour le r√®glement"""
    
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label="‚úÖ J'ACCEPTE", style=discord.ButtonStyle.success, custom_id="accept_rules", emoji="‚úÖ")
    async def accept_rules(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Bouton d'acceptation du r√®glement"""
        
        cog = interaction.client.get_cog("ReglementSimple")
        if not cog:
            await interaction.response.send_message("‚ùå Syst√®me indisponible !", ephemeral=True)
            return
        
        # V√©rifier si d√©j√† accept√©
        already_accepted = await cog.is_user_accepted(interaction.guild.id, interaction.user.id)
        if already_accepted:
            await interaction.response.send_message("‚úÖ Vous avez d√©j√† accept√© le r√®glement !", ephemeral=True)
            return
        
        # Enregistrer l'acceptation
        success = await cog.record_acceptance(interaction.guild.id, interaction.user.id)
        if not success:
            await interaction.response.send_message("‚ùå Erreur lors de l'enregistrement !", ephemeral=True)
            return
        
        # Donner le r√¥le si configur√©
        config = await cog.get_config(interaction.guild.id)
        if config.get("member_role"):
            role = interaction.guild.get_role(config["member_role"])
            if role:
                try:
                    await interaction.user.add_roles(role, reason="Acceptation du r√®glement")
                except:
                    pass
        
        # Confirmation
        embed = discord.Embed(
            title="‚úÖ **R√àGLEMENT ACCEPT√â !**",
            description=f"**Bienvenue {interaction.user.mention} !**\n\n"
                       f"üéâ **Vous avez officiellement rejoint le serveur !**\n"
                       f"üîì **Acc√®s complet d√©verrouill√©**\n\n"
                       f"**Respectez les r√®gles et amusez-vous bien !**",
            color=discord.Color.green(),
            timestamp=datetime.now()
        )
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
    
    @discord.ui.button(label="‚ùå JE REFUSE", style=discord.ButtonStyle.danger, custom_id="refuse_rules", emoji="‚ùå")
    async def refuse_rules(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Bouton de refus du r√®glement"""
        
        embed = discord.Embed(
            title="‚ùå **R√àGLEMENT REFUS√â**",
            description=f"**{interaction.user.mention}**\n\n"
                       f"**Vous avez refus√© le r√®glement du serveur.**\n\n"
                       f"‚ö†Ô∏è **Vous allez √™tre expuls√© dans 10 secondes.**\n"
                       f"**Pour revenir, vous devrez accepter les r√®gles.**",
            color=discord.Color.red(),
            timestamp=datetime.now()
        )
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
        
        # Auto-kick apr√®s 10 secondes
        cog = interaction.client.get_cog("ReglementSimple")
        if cog:
            config = await cog.get_config(interaction.guild.id)
            if config.get("auto_kick", True):
                await asyncio.sleep(10)
                try:
                    await interaction.user.kick(reason="Refus du r√®glement")
                except:
                    pass
    
    @discord.ui.button(label="üìä MES INFOS", style=discord.ButtonStyle.secondary, custom_id="my_info", emoji="üìä")
    async def my_info(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Affiche les informations de l'utilisateur"""
        
        cog = interaction.client.get_cog("ReglementSimple")
        if not cog:
            await interaction.response.send_message("‚ùå Syst√®me indisponible !", ephemeral=True)
            return
        
        is_accepted = await cog.is_user_accepted(interaction.guild.id, interaction.user.id)
        
        embed = discord.Embed(
            title="üìä **VOS INFORMATIONS**",
            description=f"**{interaction.user.mention}**\n\n"
                       f"**Statut r√®glement:** {'‚úÖ Accept√©' if is_accepted else '‚ùå Non accept√©'}\n"
                       f"**Arriv√©e sur le serveur:** {interaction.user.joined_at.strftime('%d/%m/%Y √† %H:%M') if interaction.user.joined_at else 'Inconnue'}\n"
                       f"**Compte cr√©√©:** {interaction.user.created_at.strftime('%d/%m/%Y')}\n"
                       f"**ID:** `{interaction.user.id}`",
            color=discord.Color.green() if is_accepted else discord.Color.orange(),
            timestamp=datetime.now()
        )
        
        embed.set_thumbnail(url=interaction.user.display_avatar.url)
        embed.set_footer(text="Arsenal ‚Ä¢ R√®glement Simple", icon_url=interaction.client.user.avatar.url)
        
        await interaction.response.send_message(embed=embed, ephemeral=True)


async def setup(bot):
    """Charge le module ReglementSimple"""
    await bot.add_cog(ReglementSimple(bot))
    print("üöÄ [OK] ReglementSimple charg√© - Interface ultra moderne !")
