import discord
from discord.ext import commands, tasks
import json
import asyncio
from datetime import datetime, timezone

class ArsenalProfileUpdater(commands.Cog):
    """
    üéØ Arsenal Profile Updater
    Met √† jour automatiquement le profil Discord d'Arsenal pour afficher
    toutes les fonctionnalit√©s support√©es
    """
    
    def __init__(self, bot):
        self.bot = bot
        self.profile_data = {
            "supported_features": [
                "‚ö° Commandes Slash (/)",
                "üõ°Ô∏è AutoMod Discord Natif", 
                "üîò Boutons Interactifs",
                "üìã Menus D√©roulants",
                "üìù Modales/Formulaires",
                "üñ±Ô∏è Menus Contextuels (Clic Droit)",
                "‚≠ê R√©actions Automatiques",
                "üëë Gestion R√¥les & Permissions",
                "üé´ Syst√®me de Tickets",
                "üìä Logs d'Audit Avanc√©s",
                "‚ö° √âv√©nements Temps R√©el",
                "üîó Int√©grations Externes",
                "üéµ Syst√®me Musical HD",
                "üèÜ Niveaux & Gamification",
                "üåç Traduction Automatique",
                "üîí Protection Anti-Raid",
                "üåê Dashboard Web",
                "ü§ñ IA de Mod√©ration",
                "üîä Fonctionnalit√©s Vocales",
                "üí∞ √âconomie ArsenalCoins"
            ],
            "integrations": [
                "YouTube", "Twitch", "Spotify", "GitHub", "Google Sheets", 
                "Twitter", "Instagram", "TikTok", "Reddit", "Steam"
            ],
            "stats": {
                "commands": 150,
                "features": 20,
                "integrations": 10,
                "servers": 0,  # Sera mis √† jour automatiquement
                "users": 0     # Sera mis √† jour automatiquement
            }
        }
        
        # D√©marrer la t√¢che de mise √† jour
        self.update_profile_task.start()
    
    def cog_unload(self):
        """Arr√™ter les t√¢ches quand le cog est d√©charg√©"""
        self.update_profile_task.cancel()
    
    @tasks.loop(hours=1)  # Mise √† jour toutes les heures
    async def update_profile_task(self):
        """T√¢che automatique pour mettre √† jour le profil"""
        try:
            await self.update_bot_profile()
        except Exception as e:
            print(f"Erreur mise √† jour profil: {e}")
    
    @update_profile_task.before_loop
    async def before_update_profile(self):
        """Attendre que le bot soit pr√™t avant de d√©marrer"""
        await self.bot.wait_until_ready()
        # Attendre 30 secondes apr√®s le d√©marrage pour la premi√®re mise √† jour
        await asyncio.sleep(30)
    
    async def update_bot_profile(self):
        """Met √† jour le profil du bot avec les derni√®res statistiques"""
        try:
            # Mettre √† jour les statistiques
            self.profile_data["stats"]["servers"] = len(self.bot.guilds)
            self.profile_data["stats"]["users"] = sum(guild.member_count for guild in self.bot.guilds if guild.member_count)
            
            # Cr√©er une biographie compl√®te
            bio_parts = [
                "üöÄ **Arsenal Bot V4.5.1** - Bot Discord r√©volutionnaire",
                f"‚ö° {self.profile_data['stats']['commands']}+ commandes slash",
                f"üéØ {self.profile_data['stats']['features']} cat√©gories de fonctionnalit√©s",
                "",
                "‚ú® **FONCTIONNALIT√âS DISCORD NATIVES:**",
                "‚Ä¢ Commandes Slash (/) avec auto-compl√©tion",
                "‚Ä¢ AutoMod Discord int√©gr√© + IA avanc√©e", 
                "‚Ä¢ Boutons & Menus interactifs",
                "‚Ä¢ Modales/Formulaires pour saisie",
                "‚Ä¢ Menus contextuels (clic droit)",
                "‚Ä¢ R√©actions & r√¥les automatiques",
                "",
                "üî• **SYST√àMES AVANC√âS:**",
                "‚Ä¢ üí∞ ArsenalCoins - √âconomie compl√®te",
                "‚Ä¢ üéµ Musique HD multi-sources",
                "‚Ä¢ üõ°Ô∏è Protection anti-raid IA",
                "‚Ä¢ üåç Traduction 50+ langues",
                "‚Ä¢ üé´ Syst√®me tickets professionnel",
                "‚Ä¢ üìä Analytics temps r√©el",
                "",
                "üîó **INT√âGRATIONS:**",
                "‚Ä¢ YouTube ‚Ä¢ Twitch ‚Ä¢ Spotify ‚Ä¢ GitHub",
                "‚Ä¢ Google APIs ‚Ä¢ Discord Natif ‚Ä¢ IA",
                "",
                f"üìà **{self.profile_data['stats']['servers']} serveurs** ‚Ä¢ **{self.profile_data['stats']['users']} utilisateurs**",
                "",
                "üåê Dashboard: panel.arsenal-bot.xyz",
                "üìö Support: /help ‚Ä¢ /features ‚Ä¢ /migration_help"
            ]
            
            # Cr√©er la biographie (limite Discord: 190 caract√®res pour le statut)
            short_bio = (
                f"üöÄ Arsenal V4.5.1 | "
                f"‚ö°{self.profile_data['stats']['commands']}+ commandes | "
                f"üéØ{self.profile_data['stats']['features']} fonctionnalit√©s Discord natives | "
                f"üí∞ ArsenalCoins | üéµ Musique HD | üõ°Ô∏è AutoMod IA"
            )
            
            # Note: Discord ne permet pas de modifier la biographie du bot via l'API
            # Mais on peut mettre √† jour le statut et l'activit√©
            
            # Mettre √† jour l'activit√© avec les statistiques
            activity_text = (
                f"Arsenal V4.5.1 | "
                f"{self.profile_data['stats']['servers']} serveurs | "
                f"{self.profile_data['stats']['commands']}+ commandes | "
                f"üéØ Toutes fonctionnalit√©s Discord"
            )
            
            # Cr√©er l'activit√© streaming (statut violet)
            activity = discord.Streaming(
                name=activity_text[:128],  # Limite Discord pour les noms d'activit√©
                url="https://twitch.tv/xerox3elite"
            )
            
            await self.bot.change_presence(activity=activity)
            
            print(f"‚úÖ Profil Arsenal mis √† jour: {self.profile_data['stats']['servers']} serveurs, {self.profile_data['stats']['users']} utilisateurs")
            
        except Exception as e:
            print(f"‚ùå Erreur mise √† jour profil Arsenal: {e}")
    
    @commands.command(name="update_profile")
    @commands.is_owner()
    async def force_update_profile(self, ctx):
        """Force la mise √† jour du profil (commande owner uniquement)"""
        await self.update_bot_profile()
        await ctx.send("‚úÖ Profil Arsenal mis √† jour!")
    
    @commands.command(name="profile_info")
    async def show_profile_info(self, ctx):
        """Affiche les informations du profil Arsenal"""
        embed = discord.Embed(
            title="üéØ Arsenal Bot - Informations Profil",
            description="**Configuration actuelle du profil Discord**",
            color=discord.Color.blue()
        )
        
        # Statistiques actuelles
        stats = self.profile_data["stats"]
        embed.add_field(
            name="üìä Statistiques",
            value=(
                f"üè† **{stats['servers']}** serveurs\n"
                f"üë• **{stats['users']}** utilisateurs\n"
                f"‚ö° **{stats['commands']}+** commandes\n"
                f"üéØ **{stats['features']}** cat√©gories fonctionnalit√©s"
            ),
            inline=True
        )
        
        # Fonctionnalit√©s mises en avant
        featured_functions = [
            "‚ö° Commandes Slash (/)",
            "üõ°Ô∏è AutoMod Discord Natif",
            "üí∞ √âconomie ArsenalCoins", 
            "üéµ Syst√®me Musical HD",
            "üåç Traduction Auto",
            "ü§ñ IA de Mod√©ration"
        ]
        
        embed.add_field(
            name="‚ú® Fonctionnalit√©s Mises en Avant",
            value="\n".join(featured_functions[:6]),
            inline=True
        )
        
        # Int√©grations
        integrations_text = " ‚Ä¢ ".join(self.profile_data["integrations"][:6])
        if len(self.profile_data["integrations"]) > 6:
            integrations_text += f" ‚Ä¢ +{len(self.profile_data['integrations'])-6} autres"
        
        embed.add_field(
            name="üîó Int√©grations",
            value=integrations_text,
            inline=False
        )
        
        # Statut actuel
        current_activity = self.bot.activity
        if current_activity:
            embed.add_field(
                name="üì∫ Statut Actuel",
                value=f"**{current_activity.type.name}**: {current_activity.name}",
                inline=False
            )
        
        embed.add_field(
            name="üîÑ Mise √† Jour Auto",
            value="Profil mis √† jour automatiquement toutes les heures",
            inline=False
        )
        
        embed.set_footer(text="Arsenal V4.5.1 - Profil Discord optimis√©")
        
        await ctx.send(embed=embed)
    
    async def generate_features_list(self) -> str:
        """G√©n√®re une liste format√©e des fonctionnalit√©s"""
        features_text = ""
        for i, feature in enumerate(self.profile_data["supported_features"], 1):
            features_text += f"{i:2d}. {feature}\n"
        return features_text
    
    def get_profile_summary(self) -> dict:
        """Retourne un r√©sum√© du profil pour d'autres modules"""
        return {
            "total_features": len(self.profile_data["supported_features"]),
            "total_integrations": len(self.profile_data["integrations"]),
            "stats": self.profile_data["stats"].copy(),
            "last_update": datetime.now(timezone.utc).isoformat()
        }

async def setup(bot):
    await bot.add_cog(ArsenalProfileUpdater(bot))
