#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ ARSENAL CONFIG REVOLUTION V2.0 - PARTIE 2
M√©thodes compl√©mentaires pour le syst√®me de configuration r√©volutionnaire
"""

import discord
from discord.ext import commands
import asyncio
from datetime import datetime, timezone, timedelta
from typing import Dict, Any, List, Optional, Set
import logging

logger = logging.getLogger('ArsenalConfigRevolution')

# =============================================================================
# VUES SUPPL√âMENTAIRES ET M√âTHODES MANQUANTES 
# =============================================================================

class ReconfigurationView(discord.ui.View):
    """Vue pour serveur d√©j√† configur√©"""
    
    def __init__(self, cog, guild_id: int):
        super().__init__(timeout=1800)
        self.cog = cog
        self.guild_id = guild_id
    
    @discord.ui.button(label="üîÑ Reconfigurer", style=discord.ButtonStyle.primary)
    async def reconfigure_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Reconfigure le serveur"""
        await interaction.response.defer()
        
        # Reset la configuration
        config = self.cog.get_default_config()
        await self.cog.save_guild_config(self.guild_id, config)
        
        # Red√©marrer la configuration
        view = ConfigMainView(self.cog, self.guild_id)
        embed = self.cog.create_welcome_embed(interaction.guild)
        
        await interaction.edit_original_response(embed=embed, view=view)
    
    @discord.ui.button(label="‚öôÔ∏è Modifier Modules", style=discord.ButtonStyle.secondary)
    async def modify_modules_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Modifier des modules sp√©cifiques"""
        await interaction.response.defer()
        
        view = AdvancedConfigView(self.cog, self.guild_id)
        embed = self.cog.create_advanced_config_embed(await self.cog.load_guild_config(self.guild_id))
        
        await interaction.edit_original_response(embed=embed, view=view)

class StatusActionsView(discord.ui.View):
    """Actions du statut de configuration"""
    
    def __init__(self, cog, guild_id: int):
        super().__init__(timeout=1800)
        self.cog = cog
        self.guild_id = guild_id
    
    @discord.ui.button(label="üìä Dashboard", style=discord.ButtonStyle.primary)
    async def dashboard_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Ouvre le dashboard"""
        await interaction.response.defer()
        
        view = AnalyticsDashboardView(self.cog, self.guild_id)
        embed = await self.cog.create_analytics_embed(interaction.guild)
        
        await interaction.edit_original_response(embed=embed, view=view)

class BackupManagementView(discord.ui.View):
    """Gestion des sauvegardes"""
    
    def __init__(self, cog, guild_id: int):
        super().__init__(timeout=1800)
        self.cog = cog
        self.guild_id = guild_id
    
    @discord.ui.button(label="üíæ Cr√©er Backup", style=discord.ButtonStyle.success)
    async def create_backup_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Cr√©e un backup manuel"""
        await interaction.response.defer()
        
        try:
            config = await self.cog.load_guild_config(self.guild_id)
            await self.cog.create_config_backup(self.guild_id, config)
            
            embed = discord.Embed(
                title="üíæ Backup Cr√©√©",
                description="Un backup de votre configuration a √©t√© cr√©√© avec succ√®s.",
                color=0x00FF88
            )
            
            await interaction.edit_original_response(embed=embed, view=self)
            
        except Exception as e:
            embed = discord.Embed(
                title="‚ùå Erreur Backup",
                description=f"Erreur lors de la cr√©ation du backup: {str(e)}",
                color=0xFF0000
            )
            await interaction.edit_original_response(embed=embed, view=self)

class ResetConfirmationView(discord.ui.View):
    """Confirmation de reset"""
    
    def __init__(self, cog, guild_id: int):
        super().__init__(timeout=300)
        self.cog = cog
        self.guild_id = guild_id
    
    @discord.ui.button(label="‚ö†Ô∏è CONFIRMER RESET", style=discord.ButtonStyle.danger)
    async def confirm_reset_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Confirme le reset"""
        await interaction.response.defer()
        
        try:
            # Cr√©er backup avant reset
            current_config = await self.cog.load_guild_config(self.guild_id)
            await self.cog.create_config_backup(self.guild_id, current_config)
            
            # Reset la configuration
            default_config = self.cog.get_default_config()
            await self.cog.save_guild_config(self.guild_id, default_config)
            
            embed = discord.Embed(
                title="üîÑ Configuration R√©initialis√©e",
                description="La configuration a √©t√© r√©initialis√©e aux valeurs par d√©faut.\n"
                           "Un backup de l'ancienne configuration a √©t√© cr√©√©.",
                color=0xFF9900
            )
            
            await interaction.edit_original_response(embed=embed, view=None)
            
        except Exception as e:
            embed = discord.Embed(
                title="‚ùå Erreur Reset",
                description=f"Erreur lors du reset: {str(e)}",
                color=0xFF0000
            )
            await interaction.edit_original_response(embed=embed, view=None)
    
    @discord.ui.button(label="‚ùå Annuler", style=discord.ButtonStyle.secondary)
    async def cancel_reset_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Annule le reset"""
        embed = discord.Embed(
            title="‚ùå Reset Annul√©",
            description="Le reset de la configuration a √©t√© annul√©.",
            color=0x999999
        )
        await interaction.response.edit_message(embed=embed, view=None)

class GuideView(discord.ui.View):
    """Vue du guide complet"""
    
    def __init__(self, cog):
        super().__init__(timeout=1800)
        self.cog = cog
        self.current_page = 0
        self.max_pages = 5
    
    @discord.ui.button(label="‚¨ÖÔ∏è", style=discord.ButtonStyle.secondary)
    async def previous_page(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Page pr√©c√©dente"""
        if self.current_page > 0:
            self.current_page -= 1
            embed = self.cog.create_guide_page_embed(self.current_page)
            await interaction.response.edit_message(embed=embed, view=self)
    
    @discord.ui.button(label="‚û°Ô∏è", style=discord.ButtonStyle.secondary)
    async def next_page(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Page suivante"""
        if self.current_page < self.max_pages - 1:
            self.current_page += 1
            embed = self.cog.create_guide_page_embed(self.current_page)
            await interaction.response.edit_message(embed=embed, view=self)

class ManualCreationGuideView(discord.ui.View):
    """Guide de cr√©ation manuelle"""
    
    def __init__(self, cog, guild_id: int, server_type: str, server_size: str):
        super().__init__(timeout=1800)
        self.cog = cog
        self.guild_id = guild_id
        self.server_type = server_type
        self.server_size = server_size
    
    @discord.ui.button(label="‚úÖ Termin√© Manuellement", style=discord.ButtonStyle.success)
    async def manual_complete_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Marque la cr√©ation manuelle comme termin√©e"""
        await interaction.response.defer()
        
        # Passer √† l'√©tape finale
        view = QuickSetupStep5(self.cog, self.guild_id)
        embed = await self.cog.create_step5_embed(interaction.guild)
        
        await interaction.edit_original_response(embed=embed, view=view)

class ShopConfigView(discord.ui.View):
    """Configuration de la boutique"""
    
    def __init__(self, cog, guild_id: int):
        super().__init__(timeout=1800)
        self.cog = cog
        self.guild_id = guild_id
    
    @discord.ui.button(label="üõçÔ∏è Ajouter Article", style=discord.ButtonStyle.primary)
    async def add_item_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Ajouter un article √† la boutique"""
        await interaction.response.send_modal(ShopItemModal(self.cog, self.guild_id))

class ShopItemModal(discord.ui.Modal):
    """Modal pour ajouter un article √† la boutique"""
    
    def __init__(self, cog, guild_id: int):
        super().__init__(title="üõçÔ∏è Nouvel Article Boutique")
        self.cog = cog
        self.guild_id = guild_id
        
        self.item_name = discord.ui.TextInput(
            label="Nom de l'Article",
            placeholder="R√¥le VIP",
            max_length=50
        )
        self.add_item(self.item_name)
        
        self.item_price = discord.ui.TextInput(
            label="Prix (ArsenalCoin)",
            placeholder="1000",
            max_length=10
        )
        self.add_item(self.item_price)
        
        self.item_description = discord.ui.TextInput(
            label="Description",
            placeholder="Acc√®s VIP avec avantages exclusifs",
            style=discord.TextStyle.paragraph,
            max_length=200
        )
        self.add_item(self.item_description)
    
    async def on_submit(self, interaction: discord.Interaction):
        """Ajoute l'article √† la boutique"""
        await interaction.response.defer()
        
        try:
            config = await self.cog.load_guild_config(self.guild_id)
            
            if "economy" not in config:
                config["economy"] = {}
            if "shop" not in config["economy"]:
                config["economy"]["shop"] = {"custom_items": []}
            
            new_item = {
                "name": self.item_name.value,
                "price": int(self.item_price.value),
                "description": self.item_description.value,
                "type": "custom",
                "available": True
            }
            
            config["economy"]["shop"]["custom_items"].append(new_item)
            await self.cog.save_guild_config(self.guild_id, config)
            
            embed = discord.Embed(
                title="üõçÔ∏è Article Ajout√© !",
                description=f"L'article **{self.item_name.value}** a √©t√© ajout√© √† la boutique.",
                color=0x00FF88
            )
            embed.add_field(
                name="üìä D√©tails",
                value=f"‚Ä¢ **Prix:** {self.item_price.value} AC\n"
                      f"‚Ä¢ **Description:** {self.item_description.value}",
                inline=False
            )
            
            await interaction.edit_original_response(embed=embed)
            
        except ValueError:
            embed = discord.Embed(
                title="‚ùå Erreur",
                description="Le prix doit √™tre un nombre valide.",
                color=0xFF0000
            )
            await interaction.edit_original_response(embed=embed)

# =============================================================================
# M√âTHODES D'ASSISTANCE POUR CR√âATION D'EMBEDS
# =============================================================================

def create_step1_embed(self) -> discord.Embed:
    """Cr√©e l'embed de l'√©tape 1"""
    embed = discord.Embed(
        title="üéØ √âtape 1/5 : Type de Serveur",
        description="**S√©lectionnez le type de votre serveur**\n\n"
                   "Cette s√©lection d√©termine les modules recommand√©s et la configuration optimale.\n"
                   "Vous pourrez toujours personnaliser apr√®s.",
        color=0x3366FF
    )
    
    embed.add_field(
        name="üéÆ Gaming",
        value="‚Ä¢ Jeux & tournois\n‚Ä¢ Hunt Royal\n‚Ä¢ √âconomie avanc√©e",
        inline=True
    )
    
    embed.add_field(
        name="üë• Communaut√©",
        value="‚Ä¢ Discussion g√©n√©rale\n‚Ä¢ √âv√©nements\n‚Ä¢ Mod√©ration √©quilibr√©e",
        inline=True
    )
    
    embed.add_field(
        name="üíº Professionnel",
        value="‚Ä¢ Collaboration\n‚Ä¢ S√©curit√© renforc√©e\n‚Ä¢ Tickets support",
        inline=True
    )
    
    embed.set_footer(text="√âtape 1/5 ‚Ä¢ Arsenal Config Revolution V2.0")
    return embed

def create_step2_embed(self, server_type: str) -> discord.Embed:
    """Cr√©e l'embed de l'√©tape 2"""
    embed = discord.Embed(
        title="üìä √âtape 2/5 : Taille du Serveur",
        description=f"**Serveur {server_type.title()} s√©lectionn√© ‚úÖ**\n\n"
                   "Maintenant, indiquez la taille de votre serveur pour optimiser les performances.",
        color=0x3366FF
    )
    
    embed.add_field(
        name="üè† Petit (1-100)",
        value="‚Ä¢ Configuration l√©g√®re\n‚Ä¢ Fonctions essentielles\n‚Ä¢ Performance optimale",
        inline=True
    )
    
    embed.add_field(
        name="üè¢ Moyen (100-500)",
        value="‚Ä¢ √âquilibre fonctionnalit√©s\n‚Ä¢ Mod√©ration adapt√©e\n‚Ä¢ √âvolutivit√©",
        inline=True
    )
    
    embed.add_field(
        name="üè≠ Grand (500-2000)",
        value="‚Ä¢ Outils avanc√©s\n‚Ä¢ S√©curit√© renforc√©e\n‚Ä¢ Analytics d√©taill√©es",
        inline=True
    )
    
    embed.set_footer(text="√âtape 2/5 ‚Ä¢ Arsenal Config Revolution V2.0")
    return embed

def create_step3_embed(self, server_type: str, server_size: str) -> discord.Embed:
    """Cr√©e l'embed de l'√©tape 3"""
    embed = discord.Embed(
        title="‚öôÔ∏è √âtape 3/5 : S√©lection des Modules",
        description=f"**Serveur {server_type.title()} {server_size.title()} ‚úÖ**\n\n"
                   "Choisissez comment configurer vos modules :",
        color=0x3366FF
    )
    
    embed.add_field(
        name="‚úÖ Preset Recommand√©",
        value="‚Ä¢ Configuration automatique\n‚Ä¢ Optimis√© pour votre serveur\n‚Ä¢ **Recommand√© pour d√©butants**",
        inline=True
    )
    
    embed.add_field(
        name="üîß S√©lection Personnalis√©e",
        value="‚Ä¢ Contr√¥le total\n‚Ä¢ Choisir chaque module\n‚Ä¢ **Pour utilisateurs avanc√©s**",
        inline=True
    )
    
    embed.set_footer(text="√âtape 3/5 ‚Ä¢ Arsenal Config Revolution V2.0")
    return embed

async def create_step4_embed(self, server_type: str, server_size: str, use_preset: bool, selected_modules: set = None) -> discord.Embed:
    """Cr√©e l'embed de l'√©tape 4"""
    embed = discord.Embed(
        title="üöÄ √âtape 4/5 : Cr√©ation de la Structure",
        description="**Configuration pr√™te !**\n\n"
                   "Arsenal va maintenant cr√©er la structure de votre serveur :",
        color=0x3366FF
    )
    
    if use_preset:
        preset = await self.get_server_preset(ServerType(server_type), ServerSize(server_size))
        modules_count = sum(1 for module in preset.keys() if preset.get(module, {}).get("enabled", False))
        
        embed.add_field(
            name="üì¶ Preset Appliqu√©",
            value=f"‚Ä¢ **Type:** {server_type.title()}\n"
                  f"‚Ä¢ **Taille:** {server_size.title()}\n"
                  f"‚Ä¢ **Modules:** {modules_count} activ√©s",
            inline=True
        )
    else:
        embed.add_field(
            name="üîß Configuration Personnalis√©e",
            value=f"‚Ä¢ **Modules s√©lectionn√©s:** {len(selected_modules or set())}\n"
                  f"‚Ä¢ **Type:** {server_type.title()}\n"
                  f"‚Ä¢ **Taille:** {server_size.title()}",
            inline=True
        )
    
    embed.add_field(
        name="üîß √âl√©ments √† Cr√©er",
        value="‚Ä¢ Cat√©gories et salons\n‚Ä¢ R√¥les et permissions\n‚Ä¢ Configuration modules\n‚Ä¢ Param√®tres s√©curit√©",
        inline=True
    )
    
    embed.set_footer(text="√âtape 4/5 ‚Ä¢ Arsenal Config Revolution V2.0")
    return embed

async def create_step5_embed(self, guild: discord.Guild) -> discord.Embed:
    """Cr√©e l'embed de l'√©tape 5"""
    embed = discord.Embed(
        title="üéâ √âtape 5/5 : Finalisation",
        description=f"**Bravo ! {guild.name} est presque pr√™t !**\n\n"
                   "Structure cr√©√©e avec succ√®s. Il ne reste plus qu'√† finaliser.",
        color=0x00FF88
    )
    
    embed.add_field(
        name="‚úÖ Cr√©√© avec Succ√®s",
        value="‚Ä¢ Salons et cat√©gories\n‚Ä¢ R√¥les et permissions\n‚Ä¢ Configuration modules\n‚Ä¢ Param√®tres de base",
        inline=True
    )
    
    embed.add_field(
        name="üöÄ Prochaines √âtapes",
        value="‚Ä¢ Tester les fonctionnalit√©s\n‚Ä¢ Ajuster si n√©cessaire\n‚Ä¢ Inviter vos membres\n‚Ä¢ Profiter d'Arsenal !",
        inline=True
    )
    
    embed.set_footer(text="Configuration Termin√©e ‚Ä¢ Arsenal Config Revolution V2.0")
    return embed

def create_module_selection_embed(self) -> discord.Embed:
    """Embed pour s√©lection de modules"""
    embed = discord.Embed(
        title="üîß S√©lection Personnalis√©e des Modules",
        description="**Choisissez pr√©cis√©ment les modules √† activer**\n\n"
                   "S√©lectionnez dans chaque cat√©gorie les fonctionnalit√©s que vous souhaitez.",
        color=0x3366FF
    )
    
    embed.add_field(
        name="üõ°Ô∏è Mod√©ration & S√©curit√©",
        value="Protection et gestion du serveur",
        inline=True
    )
    
    embed.add_field(
        name="üí∞ √âconomie & Divertissement", 
        value="ArsenalCoin, jeux et niveaux",
        inline=True
    )
    
    embed.add_field(
        name="üó£Ô∏è Vocal & Communication",
        value="Hub vocal et syst√®me musical",
        inline=True
    )
    
    return embed

def create_manual_guide_embed(self, server_type: str, server_size: str) -> discord.Embed:
    """Guide de cr√©ation manuelle"""
    embed = discord.Embed(
        title="üìù Guide de Cr√©ation Manuelle",
        description=f"**Guide pour serveur {server_type.title()} {server_size.title()}**\n\n"
                   "Suivez ces √©tapes pour cr√©er votre structure manuellement :",
        color=0x3366FF
    )
    
    # Guide sp√©cifique selon le type
    if server_type == "gaming":
        embed.add_field(
            name="üéÆ Salons Gaming Recommand√©s",
            value="‚Ä¢ üì¢ #annonces-gaming\n‚Ä¢ üéÆ #gaming-g√©n√©ral\n‚Ä¢ üéØ #tournois\n‚Ä¢ üèπ #hunt-royal\n‚Ä¢ üéµ Salon vocal gaming",
            inline=False
        )
    elif server_type == "community":
        embed.add_field(
            name="üë• Salons Communaut√©",
            value="‚Ä¢ üì¢ #annonces\n‚Ä¢ üí¨ #g√©n√©ral\n‚Ä¢ üé™ #d√©tente\n‚Ä¢ üì∏ #partages\n‚Ä¢ üó£Ô∏è Salons vocaux",
            inline=False
        )
    
    embed.add_field(
        name="‚öôÔ∏è R√¥les de Base",
        value="‚Ä¢ üëë Administrateur\n‚Ä¢ üõ°Ô∏è Mod√©rateur\n‚Ä¢ üéì Membre\n‚Ä¢ ü§ñ Arsenal Bot",
        inline=True
    )
    
    embed.add_field(
        name="üîí Permissions Importantes", 
        value="‚Ä¢ G√©rer les salons\n‚Ä¢ G√©rer les r√¥les\n‚Ä¢ Mod√©rer\n‚Ä¢ Utiliser les commandes",
        inline=True
    )
    
    return embed

# Ajout des m√©thodes √† la classe ArsenalConfigRevolution
ArsenalConfigRevolution.create_step1_embed = create_step1_embed
ArsenalConfigRevolution.create_step2_embed = create_step2_embed  
ArsenalConfigRevolution.create_step3_embed = create_step3_embed
ArsenalConfigRevolution.create_step4_embed = create_step4_embed
ArsenalConfigRevolution.create_step5_embed = create_step5_embed
ArsenalConfigRevolution.create_module_selection_embed = create_module_selection_embed
ArsenalConfigRevolution.create_manual_guide_embed = create_manual_guide_embed
