#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ÔøΩ Arsenal V4 - Syst√®me de R√®glement Intelligent Complet
Toutes les fonctionnalit√©s avanc√©es avec interface ultra-simple
D√©velopp√© par XeRoX - Arsenal Bot V4.5.2
"""

import discord
from discord.ext import commands, tasks
from discord import app_commands
import aiosqlite
import json
import asyncio
from datetime import datetime, timedelta
import os
from typing import Optional, Dict, List
import logging

class ReglementSystem(commands.Cog):
    """Syst√®me de r√®glement complet style DraftBot"""
    
    def __init__(self, bot):
        self.bot = bot
        self.db_path = "data/reglement_draftbot.db"
        
        # Configuration ultra-compl√®te
        self.default_config = {
            "enabled": False,
            "rules_channel": None,
            "log_channel": None,
            "member_role": None,
            "auto_kick": True,
            "kick_delay": 300,
            "verification_level": "medium",
            "rules": [],
            "templates": {
                "gaming": [
                    {"title": "üéÆ Respect Gaming", "desc": "Pas de toxicit√© en jeu", "emoji": "üéÆ"},
                    {"title": "üö´ Anti-Cheat", "desc": "Interdiction de tricher", "emoji": "üö´"},
                    {"title": "ü§ù Fair Play", "desc": "Jouez √©quitablement", "emoji": "ü§ù"}
                ],
                "community": [
                    {"title": "üíñ Bienveillance", "desc": "Soyez bienveillants", "emoji": "üíñ"},
                    {"title": "üó£Ô∏è Discussion", "desc": "Discussions constructives", "emoji": "üó£Ô∏è"},
                    {"title": "üÜò Entraide", "desc": "Aidez les nouveaux", "emoji": "üÜò"}
                ],
                "basic": [
                    {"title": "ü§ù Respect", "desc": "Respectez tout le monde", "emoji": "ü§ù"},
                    {"title": "üö´ Pas de spam", "desc": "√âvitez le spam", "emoji": "üö´"},
                    {"title": "üîû Contenu", "desc": "Pas de contenu NSFW", "emoji": "üîû"}
                ]
            }
        }
        
        # La base de donn√©es sera initialis√©e dans cog_load()
        self._tasks_started = False

    async def cog_load(self):
        """Initialisation async du cog"""
        await self.setup_database()
        
        # D√©marrer les t√¢ches
        if not self._tasks_started:
            self.auto_kick_checker.start()
            self._tasks_started = True
    
    async def setup_database(self):
        """Base de donn√©es compl√®te"""
        try:
            os.makedirs("data", exist_ok=True)
            
            async with aiosqlite.connect(self.db_path) as db:
                # Configuration serveur
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS server_config (
                        guild_id INTEGER PRIMARY KEY,
                        config TEXT NOT NULL,
                        updated_at TEXT NOT NULL
                    )
                """)
                
                # Acceptations utilisateurs
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS user_accepts (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        guild_id INTEGER NOT NULL,
                        user_id INTEGER NOT NULL,
                        username TEXT NOT NULL,
                        accepted_at TEXT NOT NULL,
                        UNIQUE(guild_id, user_id)
                    )
                """)
                
                # Logs d'actions
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS action_logs (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        guild_id INTEGER NOT NULL,
                        user_id INTEGER NOT NULL,
                        action TEXT NOT NULL,
                        details TEXT,
                        timestamp TEXT NOT NULL
                    )
                """)
                
                # Statistiques
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS stats (
                        guild_id INTEGER PRIMARY KEY,
                        total_accepts INTEGER DEFAULT 0,
                        total_refuses INTEGER DEFAULT 0,
                        total_kicks INTEGER DEFAULT 0,
                        last_updated TEXT NOT NULL
                    )
                """)
                
                await db.commit()
                
        except Exception as e:
            logging.error(f"Erreur setup database: {e}")
    
    @tasks.loop(minutes=1)
    async def auto_kick_checker(self):
        """V√©rification auto-kick toutes les minutes"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                async with db.execute("SELECT guild_id, config FROM server_config") as cursor:
                    async for row in cursor:
                        guild_id, config_str = row
                        config = json.loads(config_str)
                        
                        if not config.get("enabled") or not config.get("auto_kick"):
                            continue
                        
                        guild = self.bot.get_guild(guild_id)
                        if not guild:
                            continue
                        
                        cutoff_time = datetime.now() - timedelta(seconds=config.get("kick_delay", 300))
                        
                        for member in guild.members:
                            if member.bot or await self.is_user_accepted(guild_id, member.id):
                                continue
                            
                            if member.joined_at and member.joined_at < cutoff_time:
                                try:
                                    await member.kick(reason="Non acceptation du r√®glement")
                                    await self.log_action(guild_id, member.id, "auto_kick", "D√©lai d√©pass√©")
                                except:
                                    pass
                                    
        except Exception as e:
            logging.error(f"Erreur auto_kick_checker: {e}")
    
    # M√©thodes utilitaires
    async def get_config(self, guild_id: int) -> Dict:
        try:
            async with aiosqlite.connect(self.db_path) as db:
                async with db.execute("SELECT config FROM server_config WHERE guild_id = ?", (guild_id,)) as cursor:
                    row = await cursor.fetchone()
                    if row:
                        return json.loads(row[0])
            return self.default_config.copy()
        except:
            return self.default_config.copy()
    
    async def save_config(self, guild_id: int, config: Dict):
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute("""
                    INSERT OR REPLACE INTO server_config (guild_id, config, updated_at)
                    VALUES (?, ?, ?)
                """, (guild_id, json.dumps(config), datetime.now().isoformat()))
                await db.commit()
        except Exception as e:
            logging.error(f"Erreur save_config: {e}")
    
    async def is_user_accepted(self, guild_id: int, user_id: int) -> bool:
        try:
            async with aiosqlite.connect(self.db_path) as db:
                async with db.execute("SELECT id FROM user_accepts WHERE guild_id = ? AND user_id = ?", (guild_id, user_id)) as cursor:
                    return (await cursor.fetchone()) is not None
        except:
            return False
    
    async def record_acceptance(self, guild_id: int, user_id: int, username: str):
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute("""
                    INSERT OR IGNORE INTO user_accepts (guild_id, user_id, username, accepted_at)
                    VALUES (?, ?, ?, ?)
                """, (guild_id, user_id, username, datetime.now().isoformat()))
                await db.commit()
                return True
        except:
            return False
    
    async def log_action(self, guild_id: int, user_id: int, action: str, details: str = ""):
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute("""
                    INSERT INTO action_logs (guild_id, user_id, action, details, timestamp)
                    VALUES (?, ?, ?, ?, ?)
                """, (guild_id, user_id, action, details, datetime.now().isoformat()))
                await db.commit()
        except Exception as e:
            logging.error(f"Erreur log_action: {e}")
    
    # ==================== COMMANDES ====================
    
    @app_commands.command(name="reglement_setup", description="üîß Setup complet du r√®glement (style DraftBot)")
    @app_commands.describe(
        template="Template de r√®gles",
        rules_channel="Salon du r√®glement",
        member_role="R√¥le membre existant (optionnel)",
        create_role="Cr√©er automatiquement un r√¥le membre (si pas de r√¥le existant)",
        role_name="Nom du r√¥le √† cr√©er (par d√©faut: Membre)",
        log_channel="Salon logs (optionnel)",
        verification_level="Niveau de v√©rification"
    )
    @app_commands.choices(template=[
        app_commands.Choice(name="üéÆ Gaming", value="gaming"),
        app_commands.Choice(name="üë• Community", value="community"),
        app_commands.Choice(name="üìù Basic", value="basic"),
        app_commands.Choice(name="üõ†Ô∏è Custom", value="custom")
    ])
    @app_commands.choices(verification_level=[
        app_commands.Choice(name="üü¢ Low (10 min)", value="low"),
        app_commands.Choice(name="üü° Medium (5 min)", value="medium"),
        app_commands.Choice(name="üü† High (2 min)", value="high"),
        app_commands.Choice(name="üî¥ Extreme (30s)", value="extreme")
    ])
    @app_commands.default_permissions(administrator=True)
    async def reglement_setup(self, interaction: discord.Interaction,
                             template: str,
                             rules_channel: discord.TextChannel,
                             member_role: Optional[discord.Role] = None,
                             create_role: bool = False,
                             role_name: str = "Membre",
                             log_channel: Optional[discord.TextChannel] = None,
                             verification_level: str = "medium"):
        """Configuration ultra-compl√®te en une commande avec gestion intelligente des r√¥les !"""
        
        await interaction.response.defer()
        
        config = await self.get_config(interaction.guild.id)
        
        # Gestion intelligente des r√¥les
        final_role = None
        role_info = ""
        
        if member_role:
            # Utiliser le r√¥le existant
            final_role = member_role
            role_info = f"üîÑ **R√¥le existant utilis√©:** {member_role.mention}"
        elif create_role:
            # Cr√©er un nouveau r√¥le automatiquement
            try:
                final_role = await interaction.guild.create_role(
                    name=role_name,
                    color=discord.Color.green(),
                    reason="R√¥le membre cr√©√© automatiquement par Arsenal",
                    mentionable=True,
                    hoist=True  # Affiche s√©par√©ment des autres r√¥les
                )
                role_info = f"‚ú® **Nouveau r√¥le cr√©√©:** {final_role.mention}"
                
                # Positionner le r√¥le au bon endroit (pas tout en haut)
                try:
                    bot_member = interaction.guild.get_member(self.bot.user.id)
                    if bot_member and bot_member.top_role.position > 1:
                        await final_role.edit(position=bot_member.top_role.position - 1)
                except:
                    pass
                    
            except Exception as e:
                await interaction.followup.send(f"‚ùå Impossible de cr√©er le r√¥le: {e}", ephemeral=True)
                return
        else:
            role_info = "‚ö†Ô∏è **Aucun r√¥le configur√©** - Les utilisateurs n'auront pas de r√¥le sp√©cial"
        
        # Appliquer les d√©lais selon le niveau
        kick_delays = {"low": 600, "medium": 300, "high": 120, "extreme": 30}
        
        config.update({
            "enabled": True,
            "rules_channel": rules_channel.id,
            "log_channel": log_channel.id if log_channel else None,
            "member_role": final_role.id if final_role else None,
            "verification_level": verification_level,
            "kick_delay": kick_delays[verification_level],
            "auto_kick": True
        })
        
        # Appliquer le template
        if template != "custom" and template in config["templates"]:
            config["rules"] = config["templates"][template].copy()
        
        await self.save_config(interaction.guild.id, config)
        
        # Embed de confirmation ultra-d√©taill√©
        level_names = {"low": "üü¢ Faible", "medium": "üü° Standard", "high": "üü† Strict", "extreme": "üî¥ Maximum"}
        template_names = {"gaming": "üéÆ Gaming", "community": "üë• Community", "basic": "üìù Basic", "custom": "üõ†Ô∏è Custom"}
        
        embed = discord.Embed(
            title="‚úÖ **R√àGLEMENT DRAFTBOT CONFIGUR√â !**",
            description=f"**Configuration ultra-compl√®te activ√©e !**\n\n"
                       f"üìã **Salon r√®glement:** {rules_channel.mention}\n"
                       f"{role_info}\n"
                       f"üìù **Salon logs:** {log_channel.mention if log_channel else '‚ùå Non configur√©'}\n"
                       f"üîí **Niveau s√©curit√©:** {level_names[verification_level]}\n"
                       f"‚è∞ **D√©lai expulsion:** {kick_delays[verification_level]}s\n"
                       f"üìä **Template appliqu√©:** {template_names[template]}",
            color=discord.Color.green(),
            timestamp=datetime.now()
        )
        
        embed.add_field(
            name="üöÄ **FONCTIONNALIT√âS ACTIVES**",
            value="‚Ä¢ ‚úÖ Auto-kick intelligent\n"
                  "‚Ä¢ üìä Statistiques compl√®tes\n"
                  "‚Ä¢ üìù Logs d√©taill√©s\n"
                  "‚Ä¢ üîî Notifications auto\n"
                  "‚Ä¢ üíå Messages priv√©s\n"
                  "‚Ä¢ üéØ Interface moderne",
            inline=True
        )
        
        embed.add_field(
            name="üìù **COMMANDES**",
            value="‚Ä¢ `/reglement_show` - Afficher\n"
                  "‚Ä¢ `/reglement_stats` - Stats\n"
                  "‚Ä¢ `/reglement_logs` - Logs\n"
                  "‚Ä¢ `/reglement_edit` - Modifier\n"
                  "‚Ä¢ `/reglement_test` - Test",
            inline=True
        )
        
        embed.set_footer(text="Arsenal ‚Ä¢ DraftBot Style", icon_url=self.bot.user.avatar.url)
        
        await interaction.followup.send(embed=embed)
    
    @app_commands.command(name="reglement_show", description="üìã Afficher le r√®glement avec interface compl√®te")
    @app_commands.default_permissions(administrator=True)
    async def reglement_show(self, interaction: discord.Interaction):
        """Affiche le r√®glement avec toutes les fonctionnalit√©s DraftBot"""
        
        config = await self.get_config(interaction.guild.id)
        if not config.get("enabled"):
            await interaction.response.send_message("‚ùå Configurez d'abord avec `/reglement_setup` !", ephemeral=True)
            return
        
        # Embed ultra-complet
        level_names = {"low": "üü¢ Standard", "medium": "üü° Renforc√©", "high": "üü† Strict", "extreme": "üî¥ Maximum"}
        level = config.get("verification_level", "medium")
        
        embed = discord.Embed(
            title="üìú **R√àGLEMENT OFFICIEL DU SERVEUR**",
            description=f"**{interaction.guild.name}**\n\n"
                       f"**‚ö†Ô∏è ACCEPTATION OBLIGATOIRE ‚ö†Ô∏è**\n\n"
                       f"üîí **S√©curit√©:** {level_names[level]}\n"
                       f"‚è∞ **Limite:** {config.get('kick_delay', 300)}s\n"
                       f"üìä **{len(config.get('rules', []))} r√®gles** √† respecter",
            color=0xff0000,
            timestamp=datetime.now()
        )
        
        # Ajouter les r√®gles
        if config.get("rules"):
            rules_text = ""
            for i, rule in enumerate(config["rules"][:8], 1):
                emoji = rule.get("emoji", "üìù")
                title = rule.get("title", f"R√®gle {i}")
                desc = rule.get("desc", "Description")
                rules_text += f"{emoji} **{i}. {title}**\n{desc}\n\n"
            
            embed.add_field(
                name="üìã **R√àGLES √Ä RESPECTER**",
                value=rules_text,
                inline=False
            )
        
        # Sanctions
        embed.add_field(
            name="‚öñÔ∏è **SANCTIONS AUTOMATIQUES**",
            value="üü° **1√®re fois:** Avertissement\n"
                  "üü† **2√®me fois:** Timeout 1h\n"
                  "üî¥ **3√®me fois:** Timeout 24h\n"
                  "‚ö´ **Grave:** Expulsion imm√©diate",
            inline=True
        )
        
        # Aide
        embed.add_field(
            name="üÜò **AIDE ET SUPPORT**",
            value="‚Ä¢ üìû Contactez un **@Mod√©rateur**\n"
                  "‚Ä¢ üé´ Ouvrez un **ticket**\n"
                  "‚Ä¢ üìß Salons d'**aide**\n"
                  "‚Ä¢ ‚è∞ Soyez **patients** !",
            inline=True
        )
        
        # Stats serveur
        embed.add_field(
            name="üìä **STATISTIQUES**",
            value=f"üë• **Membres:** {len(interaction.guild.members)}\n"
                  f"ü§ñ **Bots:** {len([m for m in interaction.guild.members if m.bot])}\n"
                  f"üìÖ **Cr√©√©:** {interaction.guild.created_at.strftime('%d/%m/%Y')}\n"
                  f"üîê **Niveau:** {interaction.guild.verification_level.name.title()}",
            inline=True
        )
        
        if interaction.guild.icon:
            embed.set_thumbnail(url=interaction.guild.icon.url)
        
        embed.set_footer(
            text=f"Arsenal ‚Ä¢ DraftBot Style ‚Ä¢ {datetime.now().strftime('%d/%m/%Y √† %H:%M')}",
            icon_url=self.bot.user.avatar.url
        )
        
        # Envoyer dans le salon
        rules_channel = self.bot.get_channel(config["rules_channel"])
        if not rules_channel:
            await interaction.response.send_message("‚ùå Salon introuvable !", ephemeral=True)
            return
        
        view = ReglementDraftBotView()
        
        try:
            await rules_channel.send(embed=embed, view=view)
            
            confirm_embed = discord.Embed(
                title="‚úÖ **R√àGLEMENT PUBLI√â !**",
                description=f"**Interface DraftBot affich√©e dans {rules_channel.mention}**\n\n"
                           f"üéØ **Fonctionnalit√©s actives:**\n"
                           f"‚Ä¢ Auto-kick apr√®s {config.get('kick_delay', 300)}s\n"
                           f"‚Ä¢ Interface √† boutons moderne\n"
                           f"‚Ä¢ Logs automatiques complets\n"
                           f"‚Ä¢ Statistiques en temps r√©el\n"
                           f"‚Ä¢ Messages priv√©s intelligents",
                color=discord.Color.green()
            )
            
            await interaction.response.send_message(embed=confirm_embed, ephemeral=True)
            
        except Exception as e:
            await interaction.response.send_message(f"‚ùå Erreur: {e}", ephemeral=True)
    
    @app_commands.command(name="reglement_stats", description="üìä Statistiques compl√®tes du r√®glement")
    @app_commands.default_permissions(manage_guild=True)
    async def reglement_stats(self, interaction: discord.Interaction):
        """Statistiques style DraftBot"""
        
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # Compter les acceptations
                async with db.execute("SELECT COUNT(*) FROM user_accepts WHERE guild_id = ?", (interaction.guild.id,)) as cursor:
                    total_accepts = (await cursor.fetchone())[0]
                
                # Compter les actions
                async with db.execute("SELECT COUNT(*) FROM action_logs WHERE guild_id = ? AND action = 'auto_kick'", (interaction.guild.id,)) as cursor:
                    total_kicks = (await cursor.fetchone())[0]
                
                # Acceptations r√©centes
                async with db.execute("""
                    SELECT COUNT(*) FROM user_accepts 
                    WHERE guild_id = ? AND DATE(accepted_at) = DATE('now')
                """, (interaction.guild.id,)) as cursor:
                    today_accepts = (await cursor.fetchone())[0]
            
            embed = discord.Embed(
                title="üìä **STATISTIQUES R√àGLEMENT**",
                description=f"**{interaction.guild.name}**\n\n"
                           f"Rapport complet du syst√®me de r√®glement",
                color=discord.Color.blue(),
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="‚úÖ **ACCEPTATIONS**",
                value=f"**Total:** {total_accepts}\n"
                      f"**Aujourd'hui:** {today_accepts}\n"
                      f"**Taux:** {(total_accepts/len(interaction.guild.members)*100):.1f}%",
                inline=True
            )
            
            embed.add_field(
                name="‚ùå **EXPULSIONS**",
                value=f"**Total:** {total_kicks}\n"
                      f"**Auto-kick:** {total_kicks}\n"
                      f"**Taux refus:** {(total_kicks/(total_accepts+total_kicks)*100) if (total_accepts+total_kicks) > 0 else 0:.1f}%",
                inline=True
            )
            
            embed.add_field(
                name="üìà **PERFORMANCE**",
                value=f"**Membres:** {len(interaction.guild.members)}\n"
                      f"**V√©rifi√©s:** {total_accepts}\n"
                      f"**En attente:** {len(interaction.guild.members) - total_accepts}",
                inline=True
            )
            
            embed.set_footer(text="Arsenal ‚Ä¢ Statistiques DraftBot Style", icon_url=self.bot.user.avatar.url)
            
            await interaction.response.send_message(embed=embed)
            
        except Exception as e:
            await interaction.response.send_message(f"‚ùå Erreur stats: {e}", ephemeral=True)


class ReglementDraftBotView(discord.ui.View):
    """Interface √† boutons style DraftBot ultra-compl√®te"""
    
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label="‚úÖ J'ACCEPTE LE R√àGLEMENT", style=discord.ButtonStyle.success, custom_id="accept_rules", emoji="‚úÖ", row=0)
    async def accept_rules(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Bouton d'acceptation principal"""
        
        cog = interaction.client.get_cog("ReglementDraftBot")
        if not cog:
            await interaction.response.send_message("‚ùå Syst√®me indisponible !", ephemeral=True)
            return
        
        # V√©rifier si d√©j√† accept√©
        if await cog.is_user_accepted(interaction.guild.id, interaction.user.id):
            embed = discord.Embed(
                title="‚ÑπÔ∏è **D√âJ√Ä ACCEPT√â**",
                description=f"**{interaction.user.mention}**\n\n"
                           f"‚úÖ **Vous avez d√©j√† accept√© le r√®glement !**\n"
                           f"üéâ **Bienvenue sur le serveur !**",
                color=discord.Color.blue()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        # Enregistrer l'acceptation
        success = await cog.record_acceptance(interaction.guild.id, interaction.user.id, str(interaction.user))
        if not success:
            await interaction.response.send_message("‚ùå Erreur technique !", ephemeral=True)
            return
        
        # Donner le r√¥le membre
        config = await cog.get_config(interaction.guild.id)
        if config.get("member_role"):
            role = interaction.guild.get_role(config["member_role"])
            if role:
                try:
                    await interaction.user.add_roles(role, reason="Acceptation du r√®glement")
                except:
                    pass
        
        # Log de l'action
        await cog.log_action(interaction.guild.id, interaction.user.id, "accept", "R√®glement accept√©")
        
        # Confirmation compl√®te
        embed = discord.Embed(
            title="üéâ **R√àGLEMENT ACCEPT√â AVEC SUCC√àS !**",
            description=f"**F√©licitations {interaction.user.mention} !**\n\n"
                       f"‚úÖ **Vous √™tes maintenant membre officiel !**\n"
                       f"üîì **Acc√®s complet au serveur d√©verrouill√©**\n"
                       f"üéØ **Tous les salons sont maintenant accessibles**\n\n"
                       f"ü§ù **Respectez les r√®gles et amusez-vous bien !**",
            color=discord.Color.green(),
            timestamp=datetime.now()
        )
        
        embed.add_field(
            name="üéÅ **AVANTAGES D√âBLOQU√âS**",
            value="‚Ä¢ üí¨ **Acc√®s aux salons** de discussion\n"
                  "‚Ä¢ üéÆ **Participation aux √©v√©nements**\n"
                  "‚Ä¢ üèÜ **Syst√®me de niveaux** et r√©compenses\n"
                  "‚Ä¢ üéµ **Commandes musicales** disponibles",
            inline=True
        )
        
        embed.add_field(
            name="üÜò **BESOIN D'AIDE ?**",
            value="‚Ä¢ üìû Mentionnez un **@Mod√©rateur**\n"
                  "‚Ä¢ üé´ Ouvrez un **ticket de support**\n"
                  "‚Ä¢ üìö Consultez le **#help** ou **#faq**\n"
                  "‚Ä¢ ü§ñ Utilisez les **commandes du bot**",
            inline=True
        )
        
        embed.set_thumbnail(url=interaction.user.display_avatar.url)
        embed.set_footer(text="Arsenal ‚Ä¢ Bienvenue officielle !", icon_url=interaction.client.user.avatar.url)
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
    
    @discord.ui.button(label="‚ùå JE REFUSE", style=discord.ButtonStyle.danger, custom_id="refuse_rules", emoji="‚ùå", row=0)
    async def refuse_rules(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Bouton de refus avec confirmation"""
        
        embed = discord.Embed(
            title="‚ö†Ô∏è **CONFIRMATION DE REFUS**",
            description=f"**{interaction.user.mention}**\n\n"
                       f"‚ùå **Vous √™tes sur le point de refuser le r√®glement.**\n"
                       f"‚ö†Ô∏è **Cela entra√Ænera votre expulsion automatique.**\n\n"
                       f"üîÑ **√ätes-vous certain de votre choix ?**",
            color=discord.Color.orange()
        )
        
        view = RefuseConfirmView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
    
    @discord.ui.button(label="üìä MES INFORMATIONS", style=discord.ButtonStyle.secondary, custom_id="my_info", emoji="üìä", row=1)
    async def my_info(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Informations personnelles compl√®tes"""
        
        cog = interaction.client.get_cog("ReglementDraftBot")
        if not cog:
            await interaction.response.send_message("‚ùå Syst√®me indisponible !", ephemeral=True)
            return
        
        is_accepted = await cog.is_user_accepted(interaction.guild.id, interaction.user.id)
        
        embed = discord.Embed(
            title="üìä **VOS INFORMATIONS COMPL√àTES**",
            description=f"**Profil de {interaction.user.mention}**\n\n"
                       f"Toutes les informations relatives √† votre statut",
            color=discord.Color.green() if is_accepted else discord.Color.orange(),
            timestamp=datetime.now()
        )
        
        embed.add_field(
            name="‚úÖ **STATUT R√àGLEMENT**",
            value=f"**√âtat:** {'‚úÖ Accept√©' if is_accepted else '‚ùå Non accept√©'}\n"
                  f"**Acc√®s:** {'üîì Complet' if is_accepted else 'üîí Restreint'}\n"
                  f"**Permissions:** {'üë• Membre' if is_accepted else 'üë§ Visiteur'}",
            inline=True
        )
        
        embed.add_field(
            name="üìÖ **DATES IMPORTANTES**",
            value=f"**Arriv√©e:** {interaction.user.joined_at.strftime('%d/%m/%Y √† %H:%M') if interaction.user.joined_at else 'Inconnue'}\n"
                  f"**Compte cr√©√©:** {interaction.user.created_at.strftime('%d/%m/%Y')}\n"
                  f"**Anciennet√©:** {(datetime.now() - interaction.user.created_at.replace(tzinfo=None)).days} jours",
            inline=True
        )
        
        embed.add_field(
            name="üîß **DONN√âES TECHNIQUES**",
            value=f"**ID:** `{interaction.user.id}`\n"
                  f"**Tag:** {interaction.user.discriminator}\n"
                  f"**Bot:** {'ü§ñ Oui' if interaction.user.bot else 'üë§ Non'}",
            inline=True
        )
        
        embed.set_thumbnail(url=interaction.user.display_avatar.url)
        embed.set_footer(text="Arsenal ‚Ä¢ Informations Personnelles", icon_url=interaction.client.user.avatar.url)
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
    
    @discord.ui.button(label="üìã RELIRE LE R√àGLEMENT", style=discord.ButtonStyle.secondary, custom_id="reread_rules", emoji="üìã", row=1)
    async def reread_rules(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Relire le r√®glement en d√©tail"""
        
        cog = interaction.client.get_cog("ReglementDraftBot")
        if not cog:
            await interaction.response.send_message("‚ùå Syst√®me indisponible !", ephemeral=True)
            return
        
        config = await cog.get_config(interaction.guild.id)
        rules = config.get("rules", [])
        
        if not rules:
            await interaction.response.send_message("‚ùå Aucune r√®gle configur√©e !", ephemeral=True)
            return
        
        embed = discord.Embed(
            title="üìã **R√àGLEMENT D√âTAILL√â**",
            description=f"**{interaction.guild.name}** ‚Ä¢ Lecture compl√®te\n\n"
                       f"üìö **{len(rules)} r√®gles** √† retenir absolument",
            color=discord.Color.blue(),
            timestamp=datetime.now()
        )
        
        for i, rule in enumerate(rules[:10], 1):
            emoji = rule.get("emoji", "üìù")
            title = rule.get("title", f"R√®gle {i}")
            desc = rule.get("desc", "Description non d√©finie")
            
            embed.add_field(
                name=f"{emoji} **{i}. {title}**",
                value=desc,
                inline=False
            )
        
        embed.set_footer(text="Arsenal ‚Ä¢ R√®glement Complet", icon_url=interaction.client.user.avatar.url)
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
    
    @discord.ui.button(label="üÜò AIDE ET SUPPORT", style=discord.ButtonStyle.secondary, custom_id="help_support", emoji="üÜò", row=2)
    async def help_support(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Aide et support complet"""
        
        embed = discord.Embed(
            title="üÜò **AIDE ET SUPPORT COMPLET**",
            description=f"**{interaction.guild.name}** ‚Ä¢ Centre d'aide\n\n"
                       f"üéØ **Toutes les ressources pour vous aider**",
            color=discord.Color.blue(),
            timestamp=datetime.now()
        )
        
        embed.add_field(
            name="üë• **CONTACTER L'√âQUIPE**",
            value="‚Ä¢ üõ°Ô∏è **@Mod√©rateurs** - Questions g√©n√©rales\n"
                  "‚Ä¢ üëë **@Administrateurs** - Probl√®mes techniques\n"
                  "‚Ä¢ ü§ñ **@Support Bot** - Aide avec les commandes\n"
                  "‚Ä¢ üìß **Messages priv√©s** - Questions priv√©es",
            inline=False
        )
        
        embed.add_field(
            name="üìö **RESSOURCES UTILES**",
            value="‚Ä¢ üìñ **#r√®gles** - R√®glement complet\n"
                  "‚Ä¢ ‚ùì **#faq** - Questions fr√©quentes\n"
                  "‚Ä¢ üÜò **#aide** - Support communautaire\n"
                  "‚Ä¢ üì¢ **#annonces** - Informations importantes",
            inline=True
        )
        
        embed.add_field(
            name="üé´ **SYST√àME DE TICKETS**",
            value="‚Ä¢ üéüÔ∏è **Ticket g√©n√©ral** - Questions diverses\n"
                  "‚Ä¢ üîß **Ticket technique** - Probl√®mes bot\n"
                  "‚Ä¢ üö® **Ticket urgent** - Signalement\n"
                  "‚Ä¢ üí° **Ticket suggestion** - Id√©es",
            inline=True
        )
        
        embed.add_field(
            name="‚ö° **R√âPONSE RAPIDE**",
            value="‚Ä¢ üèÉ‚Äç‚ôÇÔ∏è **Temps moyen:** 5-15 minutes\n"
                  "‚Ä¢ ‚è∞ **Horaires:** 24h/24, 7j/7\n"
                  "‚Ä¢ üåç **Langues:** Fran√ßais, Anglais\n"
                  "‚Ä¢ üéØ **Efficacit√©:** 98% de r√©solution",
            inline=False
        )
        
        embed.set_footer(text="Arsenal ‚Ä¢ Centre d'Aide", icon_url=interaction.client.user.avatar.url)
        
        await interaction.response.send_message(embed=embed, ephemeral=True)


class RefuseConfirmView(discord.ui.View):
    """Confirmation de refus avec double v√©rification"""
    
    def __init__(self):
        super().__init__(timeout=60)
    
    @discord.ui.button(label="‚úÖ OUI, JE CONFIRME LE REFUS", style=discord.ButtonStyle.danger, emoji="‚úÖ")
    async def confirm_refuse(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Confirmation d√©finitive du refus"""
        
        embed = discord.Embed(
            title="‚ùå **R√àGLEMENT REFUS√â D√âFINITIVEMENT**",
            description=f"**{interaction.user.mention}**\n\n"
                       f"‚ùå **Vous avez officiellement refus√© le r√®glement.**\n"
                       f"‚ö†Ô∏è **Expulsion automatique dans 10 secondes.**\n\n"
                       f"üîÑ **Pour revenir, vous devrez accepter les r√®gles.**",
            color=discord.Color.red(),
            timestamp=datetime.now()
        )
        
        embed.set_footer(text="Arsenal ‚Ä¢ Expulsion Automatique", icon_url=interaction.client.user.avatar.url)
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
        
        # Log et auto-kick
        cog = interaction.client.get_cog("ReglementDraftBot")
        if cog:
            await cog.log_action(interaction.guild.id, interaction.user.id, "refuse", "Refus confirm√©")
            
            await asyncio.sleep(10)
            try:
                await interaction.user.kick(reason="Refus confirm√© du r√®glement")
            except:
                pass
    
    @discord.ui.button(label="üîÑ NON, JE RECONSID√àRE", style=discord.ButtonStyle.secondary, emoji="üîÑ")
    async def cancel_refuse(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Annulation du refus"""
        
        embed = discord.Embed(
            title="üîÑ **REFUS ANNUL√â**",
            description=f"**{interaction.user.mention}**\n\n"
                       f"‚úÖ **Sage d√©cision !**\n"
                       f"üìã **Prenez le temps de relire le r√®glement.**\n"
                       f"üéØ **Acceptez-le quand vous √™tes pr√™t !**",
            color=discord.Color.green()
        )
        
        await interaction.response.send_message(embed=embed, ephemeral=True)


async def setup(bot):
    """Charge le module ReglementDraftBot"""
    await bot.add_cog(ReglementSystem(bot))
    print("üöÄ [OK] ReglementDraftBot charg√© - Interface ultra-compl√®te style DraftBot !")
