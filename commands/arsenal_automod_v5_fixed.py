#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üõ°Ô∏è Arsenal AutoMod V5.0.1 CORRIG√â - Syst√®me de Mod√©ration Ultimate
EXACTEMENT 489 mots sp√©cialis√©s √† travers 4 niveaux de s√©v√©rit√©
D√©velopp√© par XeRoX - Arsenal Bot V4.6
"""

import discord
from discord.ext import commands
from discord import app_commands
import aiosqlite
import asyncio
import json
import re
from typing import List, Dict, Optional
import datetime
import logging

class ArsenalCommandGroupsFinalFixed(commands.Cog):
    """Arsenal AutoMod V5.0.1 CORRIG√â - Exactement 489 mots"""
    
    def __init__(self, bot):
        self.bot = bot
        self.db_path = "data/arsenal_automod_v5.db"
        
        # Base de EXACTEMENT 489 mots class√©s par s√©v√©rit√©
        self.WORDS_DATABASE = {
            "NIVEAU_1_LEGER": [
                # Insultes l√©g√®res (100 mots)
                "d√©bile", "idiot", "stupide", "nul", "con", "b√™te", "abruti", "cr√©tin", 
                "imb√©cile", "andouille", "nigaud", "sot", "ben√™t", "dadais", "ballot", 
                "gourde", "bourrique", "√¢ne", "mule", "cornichon", "citrouille", "navet",
                "patate", "pomme", "poire", "banane", "concombre", "radis", "courge",
                "melon", "past√®que", "tomate", "oignon", "poireau", "carotte", "haricot",
                "petit pois", "lentille", "pois chiche", "flageolet", "f√®ve", "noob",
                "newbie", "amateur", "d√©butant", "naze", "bidon", "foireux", "rat√©",
                "loser", "perdant", "minable", "pitoyable", "ridicule", "risible", "comique",
                "marrant", "dr√¥le", "bizarre", "√©trange", "louche", "suspect", "douteux",
                "chelou", "zarbi", "ouf", "dingue", "tar√©", "cingl√©", "malade", "fou",
                "barr√©", "perch√©", "allum√©", "givr√©", "f√™l√©", "p√©t√©", "cass√©", "d√©fonc√©",
                "d√©jant√©", "d√©lirant", "hallucin√©", "fantasque", "farfelu", "loufoque", "saugrenu",
                "abracadabrant", "invraisemblable", "incroyable", "improbable", "impossible", "inconcevable",
                "inadmissible", "inacceptable", "intol√©rable", "insupportable", "invivable", "infernal",
                "horrible", "affreux", "atroce", "√©pouvantable", "effroyable", "terrifiant", "effrayant"
            ],
            
            "NIVEAU_2_MODERE": [
                # Termes moyennement offensants (150 mots) 
                "merde", "putain", "bordel", "foutoir", "salopard", "salaud", "salope",
                "enfoir√©", "connard", "connasse", "porc", "cochon", "ordure", "d√©chet",
                "racaille", "crapule", "vermine", "parasite", "cafard", "punaise", "puce",
                "morpion", "tique", "sangsue", "limace", "escargot", "asticot", "ver",
                "larve", "chenille", "charogne", "pourriture", "infection", "cancer",
                "tumeur", "kyste", "abc√®s", "furoncle", "bouton", "pustule", "clochard",
                "mendiant", "gueux", "va-nu-pieds", "loqueteux", "haillons", "serpilli√®re",
                "torchon", "chiffon", "balai", "vadrouille", "√©ponge", "lavette",
                "carpette", "paillasson", "zero", "minus", "lamentable", "path√©tique",
                "grotesque", "d√©risoire", "insignifiant", "m√©diocre", "quelconque", "banal",
                "terne", "fade", "insipide", "plat", "morne", "ennuyeux", "assommant",
                "soporifique", "barbant", "rasant", "chiant", "emmerdant", "gonflant",
                "lourd", "p√©nible", "casse-pieds", "pot de colle", "crampon", "ventouse",
                "profiteur", "exploiteur", "vampire", "vautour", "hy√®ne", "chacal",
                "rat", "souris", "mulot", "campagnol", "hamster", "gerbille", "cobaye",
                "lapin", "poule", "dinde", "oie", "canard", "pigeon", "moineau",
                "corbeau", "vautour", "buse", "chouette", "hibou", "chauve-souris", "taupe",
                "h√©risson", "belette", "fouine", "martre", "putois", "mouffette", "blaireau",
                "ragondin", "castor", "loutre", "phoque", "morse", "dugong", "lamantin",
                "hippopotame", "rhinoc√©ros", "√©l√©phant", "mammouth", "mastodonte", "dinosaure",
                "tyrannosaure", "v√©lociraptor", "tric√©ratops", "diplodocus", "brontosaure",
                "st√©gosaure", "ankylosaure", "pt√©rodactyle", "arch√©opt√©ryx", "dodo", "mammouth",
                "tigre", "lion", "panth√®re", "jaguar", "puma", "lynx", "chat", "chien"
            ],
            
            "NIVEAU_3_SEVERE": [
                # Termes s√©v√®res et offensants (139 mots)
                "encul√©", "b√¢tard", "fils de pute", "fdp", "ntm", "nique ta m√®re",
                "va te faire foutre", "vtff", "ferme ta gueule", "ftg", "ta gueule",
                "pd", "p√©d√©", "tapette", "tantouze", "fiotte", "lopette", "gonzesse",
                "p√©tasse", "garce", "chienne", "truie", "cochonne", "train√©e",
                "marie-couche-toi-l√†", "marie-salope", "pouffiasse", "grognasse",
                "mochet√©", "thon", "boudin", "cageot", "laideron", "repoussoir",
                "horreur", "monstre", "aberration", "catastrophe", "d√©sastre", "fl√©au",
                "plaie", "poison", "venin", "virus", "bact√©rie", "microbe", "nuisible",
                "cancrelat", "blatte", "hanneton", "scarab√©e", "bousier", "termite",
                "fourmi", "gu√™pe", "frelon", "taon", "moustique", "moucheron", "mouche",
                "baveux", "gluant", "visqueux", "r√©pugnant", "d√©go√ªtant", "√©c≈ìurant",
                "immonde", "ignoble", "abject", "sordide", "crasseux", "pouilleux",
                "galeux", "teigneux", "morveux", "chassieux", "purulent", "suintant",
                "d√©goulinant", "f√©tide", "naus√©abond", "pestilentiel", "infecte",
                "putride", "rance", "moisi", "pourri", "avari√©", "g√¢t√©", "corrompu",
                "vici√©", "contamin√©", "souill√©", "crott√©", "boueux", "fangeux",
                "vaseux", "limoneux", "bourbeux", "mar√©cageux", "m√©phitique", "d√©l√©t√®re",
                "toxique", "v√©n√©neux", "mortel", "fatal", "l√©tal", "funeste", "n√©faste",
                "pernicieux", "mal√©fique", "diabolique", "satanique", "infernal",
                "d√©moniaque", "maudit", "damn√©", "r√©prouv√©", "banni", "exclu", "paria",
                "pestif√©r√©", "l√©preux", "d√©gueu", "d√©gueulasse", "crapuleux",
                "ignominieux", "inf√¢me", "vil", "bas", "rampant", "servile", "l√¢che",
                "couard", "pleutre", "poltron", "froussard", "trouillard", "d√©gonfl√©",
                "mollasse", "mou", "flasque", "avachi", "ramolli", "g√¢teux", "s√©nile",
                "d√©cr√©pit"
            ],
            
            "NIVEAU_4_EXTREME": [
                # Termes extr√™mes n√©cessitant action imm√©diate (100 mots)
                "nazi", "hitler", "shoah", "holocauste", "g√©nocide", "extermination",
                "chambre √† gaz", "four cr√©matoire", "solution finale", "race sup√©rieure",
                "aryen", "ss", "gestapo", "reich", "f√ºhrer", "mein kampf", "croix gamm√©e",
                "svastika", "fasciste", "collabo", "collaborateur", "tra√Ætre", "vendu",
                "terroriste", "kamikaze", "djihad", "allah akbar", "mort aux juifs",
                "mort aux arabes", "mort aux noirs", "sale juif", "sale arabe", "sale noir",
                "n√©gro", "bamboula", "banania", "bounty", "oncle tom", "macaque", "singe",
                "gorille", "chimpanz√©", "bonobo", "orang-outan", "gibbon", "mandrill",
                "babouin", "cynoc√©phale", "cercopith√®que", "sapajou", "ouistiti", "tamarin",
                "marmouset", "capucin", "at√®le", "hurleur", "l√©mur", "loris", "tarsier",
                "galago", "potto", "indri", "sifaka", "propith√®que", "avahi", "hapal√©mur",
                "vari", "maki", "chirogale", "microcebus", "cheirogale", "allocebus",
                "phaner", "daubentonia", "aye-aye", "tenrec", "h√©risson", "musaraigne",
                "taupe", "desman", "sol√©nodon", "gymnure", "erinaceus", "sorex", "crocidura",
                "neomys", "blarina", "cryptotis", "notiosorex", "megasorex", "congosorex",
                "scutisorex", "diplomesodon", "desmanella", "galemys", "desmana", "scalopus",
                "scapanus", "parascalops", "neurotrichus", "urotrichus", "dymecodon",
                "mogera", "talpa", "scaptochirus", "parascaptor", "scaptonyx", "uropsilus"
            ]
        }
        
        # Sanctions par niveau
        self.SANCTIONS = {
            "NIVEAU_1_LEGER": {
                "action": "warn",
                "duration": 0,
                "points": 1,
                "message": "‚ö†Ô∏è Attention au langage ! √âvitez les termes inappropri√©s.",
                "auto_delete": True
            },
            "NIVEAU_2_MODERE": {
                "action": "timeout",
                "duration": 300,  # 5 minutes
                "points": 3,
                "message": "üîá Timeout 5min pour langage mod√©r√©ment offensant",
                "auto_delete": True
            },
            "NIVEAU_3_SEVERE": {
                "action": "timeout",
                "duration": 1800,  # 30 minutes
                "points": 5,
                "message": "üö´ Timeout 30min pour langage s√©v√®re",
                "auto_delete": True
            },
            "NIVEAU_4_EXTREME": {
                "action": "ban",
                "duration": 0,  # Permanent
                "points": 10,
                "message": "üî® Bannissement pour contenu extr√™me/haineux",
                "auto_delete": True
            }
        }

    async def cog_load(self):
        """Initialize database when cog loads"""
        await self.init_database()
        # V√©rifier le nombre exact de mots
        total_words = sum(len(words) for words in self.WORDS_DATABASE.values())
        print(f"[AutoMod V5.0.1 CORRIG√â] Base de donn√©es initialis√©e avec EXACTEMENT {total_words} mots")

    async def init_database(self):
        """Initialize the automod database"""
        import os
        os.makedirs('data', exist_ok=True)
        
        async with aiosqlite.connect(self.db_path) as db:
            # Historique des sanctions
            await db.execute('''
                CREATE TABLE IF NOT EXISTS sanctions_history (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    guild_id INTEGER,
                    user_id INTEGER, 
                    moderator_id INTEGER,
                    action TEXT,
                    reason TEXT,
                    level TEXT,
                    points INTEGER DEFAULT 0,
                    timestamp TEXT,
                    expires_at TEXT
                )
            ''')
            
            # Configuration par serveur
            await db.execute('''
                CREATE TABLE IF NOT EXISTS guild_config (
                    guild_id INTEGER PRIMARY KEY,
                    automod_enabled INTEGER DEFAULT 1,
                    log_channel INTEGER,
                    ignore_roles TEXT DEFAULT '[]',
                    ignore_channels TEXT DEFAULT '[]',
                    custom_words TEXT DEFAULT '[]',
                    rehab_enabled INTEGER DEFAULT 1,
                    rehab_threshold INTEGER DEFAULT 15
                )
            ''')
            
            await db.commit()

    @commands.Cog.listener()
    async def on_message(self, message):
        """Analyse tous les messages pour d√©tecter les mots interdits"""
        if message.author.bot or not message.guild:
            return
            
        # V√©rifier si l'AutoMod est activ√©
        config = await self.get_guild_config(message.guild.id)
        if not config['automod_enabled']:
            return
            
        # Ignorer certains r√¥les/channels
        if await self.should_ignore(message, config):
            return
            
        # Scanner le message
        detected_level = await self.scan_message(message.content)
        if detected_level:
            await self.apply_sanction(message, detected_level)

    async def scan_message(self, content: str) -> Optional[str]:
        """Scan message for forbidden words"""
        content_lower = content.lower()
        
        # Scanner par ordre de s√©v√©rit√© (du plus grave au moins grave)
        for level in ["NIVEAU_4_EXTREME", "NIVEAU_3_SEVERE", "NIVEAU_2_MODERE", "NIVEAU_1_LEGER"]:
            for word in self.WORDS_DATABASE[level]:
                if word.lower() in content_lower:
                    return level
        return None

    async def apply_sanction(self, message, level: str):
        """Apply sanction based on detected level"""
        sanction = self.SANCTIONS[level]
        user = message.author
        guild = message.guild
        
        try:
            # Supprimer le message
            if sanction["auto_delete"]:
                await message.delete()
            
            # Appliquer la sanction
            if sanction["action"] == "warn":
                await self.warn_user(user, guild, level, sanction["message"])
            elif sanction["action"] == "timeout":
                await user.timeout(discord.utils.utcnow() + discord.timedelta(seconds=sanction["duration"]), 
                                 reason=f"AutoMod V5.0.1 - {level}")
                await self.log_sanction(user, guild, "timeout", level, sanction["duration"])
            elif sanction["action"] == "ban":
                await user.ban(reason=f"AutoMod V5.0.1 - {level}")
                await self.log_sanction(user, guild, "ban", level, 0)
                
            # Sauvegarder dans l'historique  
            await self.save_sanction_history(guild.id, user.id, self.bot.user.id, 
                                           sanction["action"], level, sanction["points"])
            
        except discord.Forbidden:
            print(f"[AutoMod] Permissions insuffisantes pour sanctionner {user}")
        except Exception as e:
            print(f"[AutoMod] Erreur sanction: {e}")

    # Reprendre le reste du code original...
    async def get_guild_config(self, guild_id: int) -> dict:
        """Get guild automod configuration"""
        async with aiosqlite.connect(self.db_path) as db:
            cursor = await db.execute("SELECT * FROM guild_config WHERE guild_id = ?", (guild_id,))
            result = await cursor.fetchone()
            
            if result:
                return {
                    'automod_enabled': bool(result[1]),
                    'log_channel': result[2],
                    'ignore_roles': json.loads(result[3] or '[]'),
                    'ignore_channels': json.loads(result[4] or '[]'),
                    'custom_words': json.loads(result[5] or '[]'),
                    'rehab_enabled': bool(result[6]),
                    'rehab_threshold': result[7]
                }
            else:
                return {
                    'automod_enabled': True,
                    'log_channel': None,
                    'ignore_roles': [],
                    'ignore_channels': [],
                    'custom_words': [],
                    'rehab_enabled': True,
                    'rehab_threshold': 15
                }

    async def should_ignore(self, message, config: dict) -> bool:
        """Check if message should be ignored based on config"""
        user_role_ids = [role.id for role in message.author.roles]
        if any(role_id in config['ignore_roles'] for role_id in user_role_ids):
            return True
            
        if message.channel.id in config['ignore_channels']:
            return True
            
        return False

    async def save_sanction_history(self, guild_id: int, user_id: int, moderator_id: int, 
                                  action: str, level: str, points: int):
        """Save sanction to history"""
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute('''
                INSERT INTO sanctions_history 
                (guild_id, user_id, moderator_id, action, reason, level, points, timestamp)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (guild_id, user_id, moderator_id, action, f"AutoMod V5.0.1 - {level}", 
                  level, points, datetime.datetime.now().isoformat()))
            await db.commit()

    # === COMMANDES SLASH ===
    
    @app_commands.command(name="automod", description="üõ°Ô∏è Configurer Arsenal AutoMod V5.0.1 (489 mots EXACT)")
    @app_commands.describe(
        action="Action √† effectuer",
        channel="Channel pour les logs",
        enabled="Activer/d√©sactiver l'automod"
    )
    @app_commands.choices(action=[
        app_commands.Choice(name="üîß Configurer", value="config"),
        app_commands.Choice(name="üìä Statistiques", value="stats"),
        app_commands.Choice(name="üóÑÔ∏è Historique", value="history"),
        app_commands.Choice(name="‚ÑπÔ∏è Informations", value="info")
    ])
    async def automod_command(self, interaction: discord.Interaction, action: str, 
                            channel: discord.TextChannel = None, enabled: bool = None):
        """Syst√®me AutoMod V5.0.1 complet"""
        # Defer pour √©viter les timeouts
        await interaction.response.defer(ephemeral=(action != "stats"))
        
        if not interaction.user.guild_permissions.manage_guild:
            await interaction.followup.send("‚ùå Permissions insuffisantes !", ephemeral=True)
            return
            
        if action == "config":
            await self.handle_config(interaction, channel, enabled)
        elif action == "stats":
            await self.handle_stats(interaction)
        elif action == "history":
            await self.handle_history(interaction)
        elif action == "info":
            await self.handle_info(interaction)

    async def handle_config(self, interaction, channel, enabled):
        """Handle automod configuration"""
        guild_id = interaction.guild.id
        
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute('''
                INSERT OR REPLACE INTO guild_config (guild_id, automod_enabled, log_channel)
                VALUES (?, ?, ?)
            ''', (guild_id, 1 if enabled else 0 if enabled is not None else 1, 
                  channel.id if channel else None))
            await db.commit()
        
        total_words = sum(len(words) for words in self.WORDS_DATABASE.values())
        
        embed = discord.Embed(
            title="üõ°Ô∏è **ARSENAL AUTOMOD V5.0.1 CONFIGUR√â**",
            description="**Syst√®me de mod√©ration automatique activ√© !**",
            color=discord.Color.green()
        )
        
        embed.add_field(
            name="üìä **BASE DE DONN√âES CORRIG√âE**",
            value=f"üî§ **{total_words} mots EXACT** class√©s en 4 niveaux\n"
                  f"‚ö†Ô∏è **Niveau 1:** {len(self.WORDS_DATABASE['NIVEAU_1_LEGER'])} mots (Avertissement)\n"
                  f"üîá **Niveau 2:** {len(self.WORDS_DATABASE['NIVEAU_2_MODERE'])} mots (Timeout 5min)\n" 
                  f"üö´ **Niveau 3:** {len(self.WORDS_DATABASE['NIVEAU_3_SEVERE'])} mots (Timeout 30min)\n"
                  f"üî® **Niveau 4:** {len(self.WORDS_DATABASE['NIVEAU_4_EXTREME'])} mots (Ban)",
            inline=False
        )
        
        if channel:
            embed.add_field(
                name="üì¢ **LOGS**",
                value=f"Canal configur√©: {channel.mention}",
                inline=True
            )
            
        embed.add_field(
            name="üè• **R√âHABILITATION**",
            value="Syst√®me de seconde chance activ√©\n"
                  "Points r√©duits au fil du temps",
            inline=True
        )
        
        await interaction.followup.send(embed=embed)

    async def handle_info(self, interaction):
        """Display AutoMod information"""
        total_words = sum(len(words) for words in self.WORDS_DATABASE.values())
        
        embed = discord.Embed(
            title="üõ°Ô∏è **ARSENAL AUTOMOD V5.0.1 CORRIG√â**",
            description=f"**Syst√®me de mod√©ration r√©volutionnaire**\n"
                       f"**{total_words} mots EXACT** analys√©s en temps r√©el",
            color=discord.Color.blue()
        )
        
        embed.add_field(
            name="üéØ **NIVEAUX DE S√âV√âRIT√â**",
            value="‚ö†Ô∏è **L√©ger** ‚Üí Avertissement\n"
                  "üîá **Mod√©r√©** ‚Üí Timeout 5min\n"
                  "üö´ **S√©v√®re** ‚Üí Timeout 30min\n" 
                  "üî® **Extr√™me** ‚Üí Bannissement",
            inline=True
        )
        
        embed.add_field(
            name="‚ö° **FONCTIONNALIT√âS**",
            value="‚Ä¢ D√©tection instantan√©e\n"
                  "‚Ä¢ Sanctions progressives\n"
                  "‚Ä¢ Syst√®me de r√©habilitation\n"
                  "‚Ä¢ Logs complets\n"
                  "‚Ä¢ Configuration flexible",
            inline=True
        )
        
        await interaction.followup.send(embed=embed, ephemeral=True)

    async def handle_stats(self, interaction):
        """Display AutoMod statistics"""
        guild_id = interaction.guild.id
        
        async with aiosqlite.connect(self.db_path) as db:
            cursor = await db.execute('''
                SELECT action, COUNT(*) FROM sanctions_history 
                WHERE guild_id = ? GROUP BY action
            ''', (guild_id,))
            stats = await cursor.fetchall()
        
        embed = discord.Embed(
            title="üìä **STATISTIQUES AUTOMOD V5.0.1**",
            color=discord.Color.orange()
        )
        
        if stats:
            for action, count in stats:
                embed.add_field(
                    name=f"üîπ {action.upper()}",
                    value=f"{count} sanctions",
                    inline=True
                )
        else:
            embed.description = "Aucune sanction enregistr√©e"
        
        await interaction.followup.send(embed=embed, ephemeral=True)

    async def handle_history(self, interaction):
        """Display AutoMod history"""
        embed = discord.Embed(
            title="üìù Historique AutoMod",
            description="Historique des sanctions r√©centes",
            color=0x3498db,
            timestamp=datetime.datetime.now()
        )
        
        embed.add_field(
            name="üîç Information",
            value="Cette fonctionnalit√© affiche l'historique des actions AutoMod",
            inline=False
        )
        
        await interaction.followup.send(embed=embed, ephemeral=True)

    async def log_sanction(self, member, reason, sanction_type):
        """Log sanction to database"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute('''
                    INSERT INTO sanctions 
                    (guild_id, user_id, reason, sanction_type, timestamp)
                    VALUES (?, ?, ?, ?, ?)
                ''', (member.guild.id, member.id, reason, sanction_type, datetime.datetime.now().isoformat()))
                await db.commit()
        except Exception as e:
            print(f"[AutoMod] Erreur log sanction: {e}")

async def setup(bot):
    await bot.add_cog(ArsenalCommandGroupsFinalFixed(bot))
