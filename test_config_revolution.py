#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ TEST ARSENAL CONFIG REVOLUTION
Script de test pour le nouveau syst√®me de configuration r√©volutionnaire
"""

import asyncio
import discord
from discord.ext import commands
import os
import sys

# Ajouter le dossier Arsenal_propre au path
sys.path.append('a:/Arsenal_propre')

async def test_config_revolution():
    """Test du syst√®me de configuration r√©volutionnaire"""
    
    print("üöÄ [TEST] D√©but du test Arsenal Config Revolution")
    
    # Test 1: Import du module
    try:
        from commands.config_revolution import ArsenalConfigRevolution
        print("‚úÖ [TEST] Import ArsenalConfigRevolution r√©ussi")
    except Exception as e:
        print(f"‚ùå [TEST] Erreur import ArsenalConfigRevolution: {e}")
        return False
    
    # Test 2: Cr√©ation d'une instance factice du bot
    try:
        intents = discord.Intents.all()
        bot = commands.Bot(command_prefix="!", intents=intents)
        print("‚úÖ [TEST] Cr√©ation du bot factice r√©ussie")
    except Exception as e:
        print(f"‚ùå [TEST] Erreur cr√©ation bot: {e}")
        return False
    
    # Test 3: Cr√©ation du Cog
    try:
        config_cog = ArsenalConfigRevolution(bot)
        print("‚úÖ [TEST] Cr√©ation du Cog ArsenalConfigRevolution r√©ussie")
    except Exception as e:
        print(f"‚ùå [TEST] Erreur cr√©ation Cog: {e}")
        return False
    
    # Test 4: Test de la configuration par d√©faut
    try:
        default_config = config_cog.get_default_config()
        assert "version" in default_config
        assert "moderation" in default_config
        assert "economy" in default_config
        assert "voice" in default_config
        print("‚úÖ [TEST] Configuration par d√©faut valide")
        print(f"    Version: {default_config['version']}")
        print(f"    Modules: {len(default_config)} sections")
    except Exception as e:
        print(f"‚ùå [TEST] Erreur configuration par d√©faut: {e}")
        return False
    
    # Test 5: Test de sauvegarde/chargement
    try:
        test_guild_id = 12345
        config_cog.save_guild_config(test_guild_id, default_config)
        loaded_config = config_cog.load_guild_config(test_guild_id)
        assert loaded_config["version"] == default_config["version"]
        print("‚úÖ [TEST] Sauvegarde/Chargement configuration r√©ussi")
    except Exception as e:
        print(f"‚ùå [TEST] Erreur sauvegarde/chargement: {e}")
        return False
    
    # Test 6: Test des vues Discord (structure)
    try:
        from commands.config_revolution import ConfigMainView, QuickSetupStep1
        main_view = ConfigMainView(bot, 123456, test_guild_id)
        step1_view = QuickSetupStep1(bot, 123456, test_guild_id)
        print("‚úÖ [TEST] Cr√©ation des vues Discord r√©ussie")
    except Exception as e:
        print(f"‚ùå [TEST] Erreur cr√©ation vues: {e}")
        return False
    
    print("üéâ [TEST] Tous les tests Arsenal Config Revolution pass√©s avec succ√®s !")
    return True

async def test_integration():
    """Test d'int√©gration avec le main.py"""
    
    print("\nüîß [TEST] Test d'int√©gration avec main.py")
    
    try:
        # Simulation d'import depuis main.py
        sys.path.append('a:/Arsenal_propre')
        from commands.config_revolution import ArsenalConfigRevolution
        print("‚úÖ [TEST] Import depuis main.py simul√© r√©ussi")
        
        # Test de structure des commandes
        # V√©rifier que la commande config_revolution existe
        import inspect
        from commands.config_revolution import config_revolution
        
        sig = inspect.signature(config_revolution)
        print(f"‚úÖ [TEST] Commande config_revolution trouv√©e avec signature: {sig}")
        
        return True
    except Exception as e:
        print(f"‚ùå [TEST] Erreur int√©gration: {e}")
        return False

async def main():
    """Fonction principale de test"""
    
    print("=" * 60)
    print("üß™ ARSENAL CONFIG REVOLUTION - TESTS")
    print("=" * 60)
    
    # Cr√©er le dossier de test si n√©cessaire
    os.makedirs("a:/Arsenal_propre/data/configs", exist_ok=True)
    
    # Ex√©cuter les tests
    test1_result = await test_config_revolution()
    test2_result = await test_integration()
    
    print("\n" + "=" * 60)
    if test1_result and test2_result:
        print("üéâ TOUS LES TESTS PASS√âS AVEC SUCC√àS !")
        print("‚úÖ Arsenal Config Revolution est pr√™t √† l'emploi")
        print("üöÄ Le syst√®me r√©volutionnaire peut √™tre d√©ploy√©")
    else:
        print("‚ùå CERTAINS TESTS ONT √âCHOU√â")
        print("üîß V√©rifiez les erreurs ci-dessus")
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(main())
