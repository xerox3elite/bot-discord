#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üöÄ Arsenal V4.5.2 Ultimate - Deployment Ready Check
=================================================
V√©rification finale avant d√©ploiement sur Git + Oracle
"""

import os
import sys
import json
import subprocess
from pathlib import Path

def main():
    """V√©rification compl√®te de l'√©tat de d√©ploiement"""
    print("üöÄ ARSENAL V4.5.2 ULTIMATE - DEPLOYMENT READY CHECK")
    print("=" * 60)
    
    errors = []
    warnings = []
    
    # 1. V√©rifier les fichiers essentiels
    print("\nüìÅ [CHECK] Fichiers essentiels...")
    essential_files = [
        "main.py",
        "requirements.txt",
        "deploy_oracle.sh",
        "DEPLOY_GIT_ORACLE_GUIDE.md"
    ]
    
    for file in essential_files:
        if Path(file).exists():
            print(f"‚úÖ [OK] {file}")
        else:
            print(f"‚ùå [ERROR] {file} manquant")
            errors.append(f"Fichier manquant: {file}")
    
    # 2. V√©rifier main.py
    print("\nüîç [CHECK] Syntaxe main.py...")
    try:
        with open("main.py", 'r', encoding='utf-8') as f:
            code = f.read()
        compile(code, "main.py", 'exec')
        print("‚úÖ [OK] Syntaxe main.py valide")
        
        # V√©rifier que les syst√®mes sont charg√©s
        if "ArsenalConfigSystemUnified" in code:
            print("‚úÖ [OK] Syst√®me de config unifi√© d√©tect√©")
        
        if "AdvancedTicketSystem" in code:
            print("‚úÖ [OK] Syst√®me de tickets avanc√© d√©tect√©")
            
        if "ArsenalCustomCommands" in code:
            print("‚úÖ [OK] Syst√®me de commandes personnalis√©es d√©tect√©")
            
    except SyntaxError as e:
        print(f"‚ùå [ERROR] Erreur syntaxe main.py: {e}")
        errors.append(f"Erreur syntaxe: {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è [WARNING] Probl√®me lecture main.py: {e}")
        warnings.append(f"Probl√®me main.py: {e}")
    
    # 3. V√©rifier requirements.txt
    print("\nüì¶ [CHECK] D√©pendances...")
    try:
        with open("requirements.txt", 'r') as f:
            deps = f.read()
            
        critical_deps = ['discord.py', 'aiosqlite']
        for dep in critical_deps:
            if dep in deps:
                print(f"‚úÖ [OK] {dep} pr√©sent")
            else:
                print(f"‚ùå [ERROR] {dep} manquant")
                errors.append(f"D√©pendance manquante: {dep}")
                
    except Exception as e:
        print(f"‚ùå [ERROR] Probl√®me requirements.txt: {e}")
        errors.append(f"Erreur requirements: {e}")
    
    # 4. V√©rifier la structure
    print("\nüìÇ [CHECK] Structure du projet...")
    required_dirs = ['commands', 'core', 'data', 'logs']
    for dir_name in required_dirs:
        if Path(dir_name).exists():
            py_files = list(Path(dir_name).glob("*.py"))
            print(f"‚úÖ [OK] {dir_name}/ ({len(py_files)} fichiers)")
        else:
            print(f"‚ö†Ô∏è [WARNING] {dir_name}/ manquant")
            warnings.append(f"Dossier manquant: {dir_name}")
    
    # 5. V√©rifier Git
    print("\nüîÄ [CHECK] √âtat Git...")
    try:
        result = subprocess.run(['git', 'status', '--porcelain'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            uncommitted = result.stdout.strip()
            if uncommitted:
                lines = len(uncommitted.split('\n'))
                print(f"‚ö†Ô∏è [WARNING] {lines} fichiers non commit√©s")
                warnings.append(f"{lines} fichiers non commit√©s")
            else:
                print("‚úÖ [OK] Repository Git propre")
        else:
            print("‚ö†Ô∏è [WARNING] Probl√®me Git")
            
    except FileNotFoundError:
        print("‚ö†Ô∏è [WARNING] Git non disponible")
        warnings.append("Git non install√©")
    
    # 6. V√©rifier les variables d'environnement
    print("\nüîß [CHECK] Variables d'environnement...")
    
    # Chercher .env
    if Path(".env").exists():
        print("‚úÖ [OK] .env trouv√©")
        try:
            with open(".env", 'r') as f:
                env_content = f.read()
                if "DISCORD_TOKEN" in env_content:
                    print("‚úÖ [OK] DISCORD_TOKEN dans .env")
                else:
                    print("‚ö†Ô∏è [WARNING] DISCORD_TOKEN manquant dans .env")
                    warnings.append("DISCORD_TOKEN manquant dans .env")
        except Exception:
            pass
    else:
        print("‚ö†Ô∏è [WARNING] .env non trouv√©")
        warnings.append("Fichier .env non trouv√©")
        
        # V√©rifier variables syst√®me
        if os.getenv("DISCORD_TOKEN"):
            print("‚úÖ [OK] DISCORD_TOKEN dans variables syst√®me")
        else:
            print("‚ùå [ERROR] DISCORD_TOKEN non d√©fini")
            errors.append("DISCORD_TOKEN non d√©fini")
    
    # 7. R√©sum√©
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DE V√âRIFICATION")
    print("=" * 60)
    
    print(f"‚ùå Erreurs critiques: {len(errors)}")
    print(f"‚ö†Ô∏è Avertissements: {len(warnings)}")
    
    if errors:
        print("\nüö® ERREURS CRITIQUES √Ä CORRIGER:")
        for error in errors:
            print(f"  ‚Ä¢ {error}")
        print("\n‚ùó Corrigez ces erreurs avant de d√©ployer !")
        return False
    else:
        print("\nüéâ [SUCCESS] Projet pr√™t pour le d√©ploiement !")
        
        if warnings:
            print("\n‚ö†Ô∏è AVERTISSEMENTS (non critiques):")
            for warning in warnings:
                print(f"  ‚Ä¢ {warning}")
        
        print("\nüìã COMMANDES DE D√âPLOIEMENT:")
        print("1Ô∏è‚É£ Git:")
        print("   git add .")
        print('   git commit -m "üöÄ Arsenal V4.5.2 Ultimate Ready"')
        print("   git push origin main")
        print("\n2Ô∏è‚É£ Oracle:")
        print("   ssh ubuntu@your-oracle-ip")
        print("   git pull origin main")
        print("   python3 main.py")
        print("\nüöÄ Bon d√©ploiement !")
        return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
