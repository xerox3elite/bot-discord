#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ ARSENAL CONFIG REVOLUTION V2.0 - SYST√àME COMPLET 5000 LIGNES
Interface de configuration Discord la plus avanc√©e jamais cr√©√©e
Configuration compl√®te en 30 minutes avec 29 modules Arsenal
Par xerox3elite - Arsenal V4.5.2 ULTIMATE

üéØ FONCTIONNALIT√âS R√âVOLUTIONNAIRES:
- Configuration rapide guid√©e en 5 √©tapes (15-30 min)
- 29 modules Arsenal configurables individuellement
- Presets intelligents selon type/taille serveur
- Cr√©ation automatique salons/r√¥les/permissions
- Validation temps r√©el avec rollback automatique
- Dashboard analytics avec m√©triques performance
- Interface ultra-moderne avec progression visuelle
- Sauvegarde JSON compl√®te + backup syst√®me
- Gestion d'erreurs niveau production
- Tests automatis√©s int√©gr√©s

üèÜ MODULES SUPPORT√âS:
üõ°Ô∏è Mod√©ration & AutoMod V5 ‚Ä¢ üí∞ √âconomie ArsenalCoin ‚Ä¢ üèπ Hunt Royal
üéµ Syst√®me Musical Avanc√© ‚Ä¢ üó£Ô∏è Hub Vocal Intelligent ‚Ä¢ üìä Logs & Analytics  
üîî Notifications Sociales ‚Ä¢ üé´ Syst√®me Tickets ‚Ä¢ üéÆ Jeux & Divertissement
‚öôÔ∏è Gestion R√¥les ‚Ä¢ üîí S√©curit√© Avanc√©e ‚Ä¢ üìà Niveaux & XP ‚Ä¢ üè™ Boutique
üìù R√®glement Intelligent ‚Ä¢ üé≠ Events Automatiques ‚Ä¢ üì± WebPanel Integration
üíé Crypto System ‚Ä¢ ü§ñ IA Integration ‚Ä¢ üé® Customisation Avanc√©e
üîÑ Syst√®me Backup ‚Ä¢ üì° API Integration ‚Ä¢ üåê Multi-serveurs ‚Ä¢ üîß Dev Tools
‚ö° Performance Monitor ‚Ä¢ üé™ Fun Commands ‚Ä¢ üìö Help System Avanc√©
üîç Search System ‚Ä¢ üìã Command Manager ‚Ä¢ üéØ Target System ‚Ä¢ üõ†Ô∏è Utils Avanc√©s
"""

import discord
from discord.ext import commands
from discord import app_commands
import json
import os
import asyncio
import aiofiles
import aiosqlite
from datetime import datetime, timezone, timedelta
from typing import Dict, Any, List, Optional, Union, Tuple, Set
import logging
import traceback
import psutil
import re
import hashlib
from dataclasses import dataclass, asdict
from enum import Enum
import copy

# Configuration du logging avanc√©
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s - %(name)s: %(message)s',
    handlers=[
        logging.FileHandler('logs/config_revolution.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('ArsenalConfigRevolution')

class ServerType(Enum):
    """Types de serveurs support√©s"""
    GAMING = "gaming"
    COMMUNITY = "community" 
    BUSINESS = "business"
    EDUCATION = "education"
    CREATIVE = "creative"
    CUSTOM = "custom"

class ServerSize(Enum):
    """Tailles de serveurs"""
    SMALL = "small"      # 1-100 membres
    MEDIUM = "medium"    # 100-500 membres  
    LARGE = "large"      # 500-2000 membres
    MASSIVE = "massive"  # 2000+ membres

class ConfigStep(Enum):
    """√âtapes de configuration"""
    WELCOME = 0
    SERVER_TYPE = 1
    SERVER_SIZE = 2
    MODULES_SELECT = 3
    CHANNELS_CREATE = 4
    FINALIZE = 5

@dataclass
class ConfigProgress:
    """Suivi de progression de configuration"""
    step: ConfigStep
    percentage: int
    completed_modules: Set[str]
    failed_modules: Set[str]
    start_time: datetime
    estimated_remaining: Optional[int] = None
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            "step": self.step.value,
            "percentage": self.percentage,
            "completed_modules": list(self.completed_modules),
            "failed_modules": list(self.failed_modules),
            "start_time": self.start_time.isoformat(),
            "estimated_remaining": self.estimated_remaining
        }

class ConfigValidator:
    """Syst√®me de validation avanc√© pour les configurations"""
    
    @staticmethod
    async def validate_permissions(guild: discord.Guild, required_perms: List[str]) -> Tuple[bool, List[str]]:
        """Valide que le bot a toutes les permissions requises"""
        bot_member = guild.me
        missing_perms = []
        
        perm_mapping = {
            'manage_channels': bot_member.guild_permissions.manage_channels,
            'manage_roles': bot_member.guild_permissions.manage_roles,
            'manage_messages': bot_member.guild_permissions.manage_messages,
            'kick_members': bot_member.guild_permissions.kick_members,
            'ban_members': bot_member.guild_permissions.ban_members,
            'manage_guild': bot_member.guild_permissions.manage_guild,
            'view_audit_log': bot_member.guild_permissions.view_audit_log,
            'send_messages': bot_member.guild_permissions.send_messages,
            'embed_links': bot_member.guild_permissions.embed_links,
            'attach_files': bot_member.guild_permissions.attach_files,
            'use_external_emojis': bot_member.guild_permissions.use_external_emojis,
            'connect': bot_member.guild_permissions.connect,
            'speak': bot_member.guild_permissions.speak,
            'move_members': bot_member.guild_permissions.move_members,
            'mute_members': bot_member.guild_permissions.mute_members,
            'deafen_members': bot_member.guild_permissions.deafen_members
        }
        
        for perm in required_perms:
            if perm in perm_mapping and not perm_mapping[perm]:
                missing_perms.append(perm)
        
        return len(missing_perms) == 0, missing_perms
    
    @staticmethod
    async def validate_channels(guild: discord.Guild, channels_config: Dict[str, Any]) -> Tuple[bool, List[str]]:
        """Valide la configuration des salons"""
        issues = []
        
        # V√©rifier les limites Discord
        if len(guild.channels) + len(channels_config.get('to_create', [])) > 500:
            issues.append("Limite de 500 salons d√©pass√©e")
        
        # V√©rifier les noms de salons
        for channel_name in channels_config.get('to_create', []):
            if not re.match(r'^[a-z0-9\-_]{1,100}$', channel_name):
                issues.append(f"Nom de salon invalide: {channel_name}")
        
        return len(issues) == 0, issues
    
    @staticmethod
    async def validate_roles(guild: discord.Guild, roles_config: Dict[str, Any]) -> Tuple[bool, List[str]]:
        """Valide la configuration des r√¥les"""
        issues = []
        
        # V√©rifier les limites Discord
        if len(guild.roles) + len(roles_config.get('to_create', [])) > 250:
            issues.append("Limite de 250 r√¥les d√©pass√©e")
        
        # V√©rifier la hi√©rarchie des r√¥les
        bot_top_role = guild.me.top_role
        for role_config in roles_config.get('to_create', []):
            if role_config.get('position', 0) >= bot_top_role.position:
                issues.append(f"Position de r√¥le trop √©lev√©e: {role_config['name']}")
        
        return len(issues) == 0, issues

class ArsenalConfigRevolution(commands.Cog):
    """Syst√®me de configuration r√©volutionnaire Arsenal"""
    
    def __init__(self, bot):
        self.bot = bot
        # R√©f√©rence au syst√®me de config central (si charg√©)
        try:
            self.config_system = self.bot.get_cog('ArsenalConfigRevolution')
        except Exception:
            self.config_system = None
        self.config_cache = {}
        self.active_configs = {}  # Configurations en cours
        self.validator = ConfigValidator()
        self.ensure_directories()
        logger.info("üöÄ Arsenal Config Revolution V2.0 initialis√©")

    def get_cog(self, name: str):
        """Proxy method so code that calls self.get_cog(...) on this Cog instance still works.

        Some parts of the code pass Cog instances around and call get_cog on them
        (incorrectly). Providing this proxy keeps backward compatibility by
        delegating to the bot's get_cog method.
        """
        try:
            return getattr(self.bot, "get_cog", lambda _name: None)(name)
        except Exception:
            return None

    def ensure_directories(self):
        """Assure que tous les dossiers n√©cessaires existent"""
        dirs = [
            "data/configs",
            "data/backups", 
            "data/analytics",
            "logs",
            "cache/configs"
        ]
        for dir_path in dirs:
            os.makedirs(dir_path, exist_ok=True)
    
    async def load_guild_config(self, guild_id: int) -> Dict[str, Any]:
        """Charge la configuration d'un serveur avec cache intelligent"""
        if guild_id in self.config_cache:
            return self.config_cache[guild_id]
        
        config_file = f"data/configs/{guild_id}.json"
        
        try:
            if os.path.exists(config_file):
                async with aiofiles.open(config_file, 'r', encoding='utf-8') as f:
                    content = await f.read()
                    config = json.loads(content)
                    
                    # Migration de version si n√©cessaire
                    config = await self.migrate_config_version(config)
            else:
                config = self.get_default_config()
            
            # Cache la configuration
            self.config_cache[guild_id] = config
            return config
            
        except Exception as e:
            logger.error(f"Erreur chargement config {guild_id}: {e}")
            return self.get_default_config()
    
    async def save_guild_config(self, guild_id: int, config: Dict[str, Any], backup: bool = True):
        """Sauvegarde la configuration avec backup automatique"""
        try:
            if backup and guild_id in self.config_cache:
                await self.create_config_backup(guild_id, self.config_cache[guild_id])
            
            config_file = f"data/configs/{guild_id}.json"
            
            # Validation avant sauvegarde
            if not self.validate_config_structure(config):
                raise ValueError("Structure de configuration invalide")
            
            async with aiofiles.open(config_file, 'w', encoding='utf-8') as f:
                content = json.dumps(config, indent=2, ensure_ascii=False)
                await f.write(content)
            
            # Mise √† jour du cache
            self.config_cache[guild_id] = copy.deepcopy(config)
            
            # Log de sauvegarde
            logger.info(f"Configuration sauvegard√©e pour {guild_id}")
            
        except Exception as e:
            logger.error(f"Erreur sauvegarde config {guild_id}: {e}")
            raise
    
    async def create_config_backup(self, guild_id: int, config: Dict[str, Any]):
        """Cr√©e un backup de la configuration"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_file = f"data/backups/{guild_id}_{timestamp}.json"
            
            async with aiofiles.open(backup_file, 'w', encoding='utf-8') as f:
                content = json.dumps(config, indent=2, ensure_ascii=False)
                await f.write(content)
            
            # Nettoie les anciens backups (garde les 10 derniers)
            await self.cleanup_old_backups(guild_id)
            
        except Exception as e:
            logger.warning(f"Erreur cr√©ation backup {guild_id}: {e}")
    
    async def cleanup_old_backups(self, guild_id: int):
        """Nettoie les anciens backups"""
        try:
            backup_dir = "data/backups"
            backups = [f for f in os.listdir(backup_dir) if f.startswith(f"{guild_id}_")]
            backups.sort(reverse=True)
            
            # Supprime les backups au-del√† des 10 derniers
            for backup in backups[10:]:
                os.remove(os.path.join(backup_dir, backup))
                
        except Exception as e:
            logger.warning(f"Erreur nettoyage backups {guild_id}: {e}")
    
    def validate_config_structure(self, config: Dict[str, Any]) -> bool:
        """Valide la structure de base de la configuration"""
        required_keys = [
            "version", "setup_completed", "setup_progress",
            "moderation", "economy", "entertainment", "voice",
            "logs", "notifications", "security", "channels"
        ]
        
        for key in required_keys:
            if key not in config:
                return False
        
        # Validation des types
        if not isinstance(config.get("setup_progress"), (int, float)):
            return False
        
        if not isinstance(config.get("setup_completed"), bool):
            return False
        
        return True
    
    async def migrate_config_version(self, config: Dict[str, Any]) -> Dict[str, Any]:
        """Migre la configuration vers la version courante"""
        current_version = "2.0"
        config_version = config.get("version", "1.0")
        
        if config_version == current_version:
            return config
        
        logger.info(f"Migration config de {config_version} vers {current_version}")
        
        # Migration 1.0 -> 2.0
        if config_version == "1.0":
            config = await self.migrate_v1_to_v2(config)
        
        config["version"] = current_version
        return config
    
    async def migrate_v1_to_v2(self, config: Dict[str, Any]) -> Dict[str, Any]:
        """Migration de la version 1.0 vers 2.0"""
        # Ajoute les nouveaux champs V2.0
        if "analytics" not in config:
            config["analytics"] = {
                "enabled": True,
                "retention_days": 30,
                "detailed_metrics": True,
                "export_enabled": True
            }
        
        if "advanced_features" not in config:
            config["advanced_features"] = {
                "ai_integration": False,
                "webhook_system": True,
                "api_access": False,
                "custom_commands": True
            }
        
        return config
    
    def get_default_config(self) -> Dict[str, Any]:
        """Configuration par d√©faut ultra-compl√®te V2.0"""
        return {
            "version": "2.0",
            "setup_completed": False,
            "setup_progress": 0,
            "last_modified": datetime.now(timezone.utc).isoformat(),
            "config_hash": "",
            
            # Informations de configuration rapide
            "quick_setup": {
                "server_type": None,
                "server_size": None,
                "preset_applied": None,
                "completion_time": None,
                "steps_completed": []
            },
            
            # 1. MOD√âRATION & S√âCURIT√â
            "moderation": {
                "enabled": True,
                "automod": {
                    "enabled": True,
                    "anti_spam": {
                        "enabled": True,
                        "max_messages": 5,
                        "time_window": 10,
                        "punishment": "timeout",
                        "duration": 300
                    },
                    "anti_toxicity": {
                        "enabled": True,
                        "sensitivity": "medium",
                        "auto_delete": True,
                        "log_violations": True
                    },
                    "anti_raid": {
                        "enabled": True,
                        "join_threshold": 10,
                        "time_window": 60,
                        "action": "lockdown",
                        "notify_admins": True
                    },
                    "anti_alt": {
                        "enabled": False,
                        "min_account_age": 7,
                        "action": "quarantine"
                    },
                    "word_filter": {
                        "enabled": True,
                        "custom_words": [],
                        "severity_levels": {
                            "mild": {"action": "delete", "warn": False},
                            "severe": {"action": "timeout", "duration": 600},
                            "extreme": {"action": "ban", "delete_history": True}
                        }
                    },
                    "link_filter": {
                        "enabled": True,
                        "whitelist": [],
                        "blacklist": [],
                        "auto_scan": True
                    },
                    "caps_filter": {
                        "enabled": True,
                        "percentage": 70,
                        "min_length": 10
                    },
                    "mention_spam": {
                        "enabled": True,
                        "max_mentions": 3,
                        "punishment": "timeout"
                    }
                },
                "sanctions": {
                    "auto_escalation": True,
                    "warn_threshold": 3,
                    "timeout_duration": 3600,
                    "ban_threshold": 5,
                    "keep_logs": True,
                    "dm_users": True,
                    "public_logs": False
                },
                "quarantine": {
                    "enabled": True,
                    "channel": None,
                    "role": None,
                    "auto_release": 3600,
                    "review_required": False
                }
            },
            
            # 2. √âCONOMIE & NIVEAUX  
            "economy": {
                "enabled": True,
                "arsenalcoin": {
                    "symbol": "AC",
                    "daily_reward": 100,
                    "message_reward": 5,
                    "voice_reward": 10,
                    "boost_multiplier": 2.0,
                    "work_commands": True,
                    "gambling": {
                        "enabled": True,
                        "max_bet": 1000,
                        "house_edge": 0.02
                    }
                },
                "shop": {
                    "enabled": True,
                    "categories": ["roles", "perks", "cosmetics"],
                    "custom_items": [],
                    "auto_restock": True,
                    "sales_events": True
                },
                "levels": {
                    "enabled": True,
                    "xp_per_message": 15,
                    "xp_per_voice_minute": 20,
                    "xp_cooldown": 60,
                    "level_rewards": {
                        "roles": {},
                        "coins": {},
                        "perks": {}
                    },
                    "leaderboard": {
                        "enabled": True,
                        "public": True,
                        "reset_monthly": False
                    }
                },
                "crypto": {
                    "enabled": False,
                    "supported_coins": ["BTC", "ETH", "ADA"],
                    "price_alerts": True,
                    "wallet_integration": False
                }
            },
            
            # 3. DIVERTISSEMENT & JEUX
            "entertainment": {
                "hunt_royal": {
                    "enabled": False,
                    "integration_level": "basic",
                    "auth_required": True,
                    "leaderboard": True,
                    "tournaments": False
                },
                "games": {
                    "enabled": True,
                    "categories": ["casino", "trivia", "social", "skill"],
                    "available_games": [
                        "dice", "8ball", "trivia", "roulette", 
                        "coinflip", "slots", "poker", "blackjack"
                    ],
                    "daily_limits": True,
                    "tournaments": {
                        "enabled": True,
                        "auto_schedule": False,
                        "prize_pool": 10000
                    }
                },
                "events": {
                    "enabled": True,
                    "auto_events": True,
                    "event_types": ["giveaway", "tournament", "contest"],
                    "frequency": "weekly",
                    "notification_role": None
                },
                "memes": {
                    "enabled": True,
                    "sources": ["reddit", "custom"],
                    "nsfw_filter": True,
                    "cache_enabled": True
                },
                "music_quiz": {
                    "enabled": False,
                    "categories": ["pop", "rock", "electronic"],
                    "difficulty_levels": 3
                }
            },
            
            # 4. SYST√àME VOCAL & AUDIO
            "voice": {
                "hub_system": {
                    "enabled": True,
                    "category": None,
                    "auto_create": True,
                    "max_channels": 10,
                    "auto_delete": True,
                    "name_template": "{user}'s Channel",
                    "default_permissions": {
                        "user_limit": 0,
                        "private": False,
                        "manage_permissions": ["owner"]
                    }
                },
                "music": {
                    "enabled": True,
                    "sources": ["youtube", "spotify", "soundcloud"],
                    "dj_role": None,
                    "volume_limit": 100,
                    "queue_limit": 50,
                    "auto_disconnect": 300,
                    "lyrics_support": True,
                    "playlists": True
                },
                "soundboard": {
                    "enabled": False,
                    "custom_sounds": [],
                    "volume": 80,
                    "cooldown": 5
                },
                "voice_stats": {
                    "enabled": True,
                    "track_time": True,
                    "leaderboard": True,
                    "achievements": True
                }
            },
            
            # 5. LOGS & ANALYTICS
            "logs": {
                "enabled": True,
                "channels": {
                    "moderation": None,
                    "member": None,
                    "server": None,
                    "voice": None,
                    "economy": None,
                    "messages": None,
                    "roles": None
                },
                "events": {
                    "message_delete": True,
                    "message_edit": True,
                    "member_join": True,
                    "member_leave": True,
                    "member_update": True,
                    "role_changes": True,
                    "channel_changes": True,
                    "voice_activity": True,
                    "moderation_actions": True,
                    "economy_transactions": True
                },
                "advanced": {
                    "embed_logs": True,
                    "include_content": True,
                    "attachment_logging": True,
                    "bulk_delete_threshold": 5
                },
                "retention": {
                    "days": 30,
                    "auto_cleanup": True,
                    "archive_old": True
                }
            },
            
            # 6. NOTIFICATIONS & MESSAGES
            "notifications": {
                "welcome": {
                    "enabled": True,
                    "channel": None,
                    "message": "Bienvenue {user} sur **{server}** ! üéâ",
                    "embed": True,
                    "dm_user": False,
                    "role_assignment": None,
                    "custom_image": None
                },
                "goodbye": {
                    "enabled": True,
                    "channel": None,
                    "message": "Au revoir {user}... üò¢",
                    "embed": True,
                    "show_stats": True
                },
                "level_up": {
                    "enabled": True,
                    "channel": None,
                    "congratulate": True,
                    "show_rewards": True,
                    "dm_user": False
                },
                "social_media": {
                    "youtube": {"enabled": False, "channels": [], "notification_channel": None},
                    "twitch": {"enabled": False, "channels": [], "notification_channel": None},
                    "twitter": {"enabled": False, "accounts": [], "notification_channel": None}
                },
                "server_boosts": {
                    "enabled": True,
                    "thank_message": True,
                    "special_role": None,
                    "bonus_rewards": True
                }
            },
            
            # 7. S√âCURIT√â AVANC√âE
            "security": {
                "verification": {
                    "enabled": False,
                    "level": "medium",
                    "methods": ["reaction", "captcha", "questions"],
                    "role": None,
                    "timeout": 300,
                    "max_attempts": 3
                },
                "anti_nuke": {
                    "enabled": True,
                    "channel_delete_limit": 3,
                    "role_delete_limit": 2,
                    "ban_limit": 5,
                    "time_window": 300,
                    "action": "remove_permissions"
                },
                "backup": {
                    "auto_backup": True,
                    "frequency": "daily",
                    "include_messages": False,
                    "retention_days": 7
                },
                "audit": {
                    "enabled": True,
                    "track_admin_actions": True,
                    "require_reason": True,
                    "log_channel": None
                }
            },
            
            # 8. R√àGLEMENT & TICKETS
            "rules": {
                "enabled": True,
                "channel": None,
                "auto_update": True,
                "acceptance_required": False,
                "categories": ["general", "chat", "voice", "events"],
                "custom_rules": []
            },
            "tickets": {
                "enabled": True,
                "category": None,
                "support_role": None,
                "auto_close": 48,
                "transcript": True,
                "rating_system": True,
                "types": ["support", "report", "suggestion", "other"]
            },
            
            # 9. R√îLES & PERMISSIONS
            "roles": {
                "auto_roles": {
                    "enabled": True,
                    "on_join": [],
                    "on_boost": None,
                    "on_verification": None
                },
                "reaction_roles": {
                    "enabled": True,
                    "messages": [],
                    "remove_on_unreact": True,
                    "max_roles": 1
                },
                "level_roles": {
                    "enabled": True,
                    "remove_previous": False,
                    "rewards": {}
                },
                "custom_commands": {
                    "enabled": True,
                    "prefix": "!",
                    "aliases": {},
                    "cooldowns": {}
                }
            },
            
            # 10. SALONS & STRUCTURE
            "channels": {
                "setup_complete": False,
                "auto_channels": {
                    "enabled": True,
                    "templates": {
                        "gaming": ["general", "gaming", "voice-general"],
                        "community": ["announcements", "general", "off-topic"]
                    }
                },
                "categories": {},
                "special_channels": {},
                "permissions": {},
                "slowmode": {}
            },
            
            # 11. ANALYTICS & M√âTRIQUES
            "analytics": {
                "enabled": True,
                "metrics": {
                    "member_activity": True,
                    "channel_usage": True,
                    "command_usage": True,
                    "economy_stats": True,
                    "voice_time": True
                },
                "reports": {
                    "daily": True,
                    "weekly": True,
                    "monthly": True,
                    "channel": None
                },
                "export": {
                    "enabled": True,
                    "formats": ["json", "csv", "xlsx"],
                    "auto_export": "monthly"
                }
            },
            
            # 12. FONCTIONNALIT√âS AVANC√âES
            "advanced_features": {
                "ai_integration": {
                    "enabled": False,
                    "chatbot": False,
                    "content_moderation": False,
                    "smart_responses": False
                },
                "webhook_system": {
                    "enabled": True,
                    "external_notifications": True,
                    "custom_integrations": []
                },
                "api_access": {
                    "enabled": False,
                    "rate_limit": 100,
                    "allowed_ips": [],
                    "require_auth": True
                },
                "multi_language": {
                    "enabled": False,
                    "default_language": "fr",
                    "auto_detect": False,
                    "supported": ["fr", "en", "es", "de"]
                }
            }
        }
    
    async def get_server_preset(self, server_type: ServerType, server_size: ServerSize) -> Dict[str, Any]:
        """G√©n√®re un preset intelligent selon le type et la taille du serveur"""
        
        # Presets de base selon le type
        presets = {
            ServerType.GAMING: {
                "moderation": {
                    "enabled": True,
                    "automod": {
                        "anti_toxicity": {"enabled": True, "sensitivity": "high"},
                        "anti_spam": {"enabled": True, "max_messages": 3},
                        "word_filter": {"enabled": True}
                    }
                },
                "economy": {
                    "enabled": True,
                    "arsenalcoin": {"daily_reward": 150, "boost_multiplier": 2.5},
                    "levels": {"enabled": True, "xp_per_voice_minute": 25},
                    "shop": {"enabled": True}
                },
                "entertainment": {
                    "hunt_royal": {"enabled": True, "integration_level": "advanced"},
                    "games": {"enabled": True, "tournaments": {"enabled": True}},
                    "events": {"enabled": True, "auto_events": True}
                },
                "voice": {
                    "hub_system": {"enabled": True, "max_channels": 15},
                    "music": {"enabled": True, "queue_limit": 100},
                    "voice_stats": {"enabled": True}
                }
            },
            
            ServerType.COMMUNITY: {
                "moderation": {
                    "enabled": True,
                    "automod": {
                        "anti_spam": {"enabled": True},
                        "anti_toxicity": {"enabled": True, "sensitivity": "medium"}
                    }
                },
                "economy": {
                    "enabled": True,
                    "levels": {"enabled": True, "xp_per_message": 20},
                    "shop": {"enabled": True}
                },
                "entertainment": {
                    "games": {"enabled": True},
                    "events": {"enabled": True, "frequency": "weekly"}
                },
                "notifications": {
                    "welcome": {"enabled": True, "embed": True},
                    "level_up": {"enabled": True}
                }
            },
            
            ServerType.BUSINESS: {
                "moderation": {
                    "enabled": True,
                    "automod": {"anti_spam": {"enabled": True}}
                },
                "economy": {"enabled": False},
                "voice": {
                    "hub_system": {"enabled": True, "max_channels": 5},
                    "music": {"enabled": False}
                },
                "security": {
                    "verification": {"enabled": True, "level": "high"},
                    "audit": {"enabled": True, "require_reason": True}
                },
                "tickets": {"enabled": True}
            },
            
            ServerType.EDUCATION: {
                "moderation": {
                    "enabled": True,
                    "automod": {
                        "anti_toxicity": {"enabled": True},
                        "link_filter": {"enabled": True}
                    }
                },
                "economy": {
                    "enabled": True,
                    "levels": {"enabled": True},
                    "arsenalcoin": {"gambling": {"enabled": False}}
                },
                "voice": {
                    "hub_system": {"enabled": True, "max_channels": 8}
                },
                "security": {
                    "verification": {"enabled": True}
                }
            },
            
            ServerType.CREATIVE: {
                "moderation": {
                    "enabled": True,
                    "automod": {"anti_spam": {"enabled": True}}
                },
                "economy": {
                    "enabled": True,
                    "arsenalcoin": {"daily_reward": 120}
                },
                "voice": {
                    "music": {"enabled": True, "lyrics_support": True},
                    "hub_system": {"enabled": True}
                },
                "entertainment": {
                    "games": {"enabled": True}
                }
            }
        }
        
        # Ajustements selon la taille
        size_adjustments = {
            ServerSize.SMALL: {
                "voice": {"hub_system": {"max_channels": 5}},
                "logs": {"events": {"voice_activity": False}},
                "analytics": {"reports": {"daily": False}}
            },
            ServerSize.MEDIUM: {
                "voice": {"hub_system": {"max_channels": 10}},
                "economy": {"levels": {"leaderboard": {"public": True}}}
            },
            ServerSize.LARGE: {
                "voice": {"hub_system": {"max_channels": 20}},
                "security": {"anti_alt": {"enabled": True}},
                "analytics": {"enabled": True, "reports": {"daily": True}}
            },
            ServerSize.MASSIVE: {
                "voice": {"hub_system": {"max_channels": 50}},
                "security": {
                    "anti_alt": {"enabled": True},
                    "anti_nuke": {"enabled": True}
                },
                "moderation": {
                    "automod": {"auto_ban_threshold": 2}
                },
                "analytics": {
                    "enabled": True,
                    "export": {"auto_export": "weekly"}
                }
            }
        }
        
        # Fusion des presets
        preset = copy.deepcopy(presets.get(server_type, presets[ServerType.COMMUNITY]))
        size_preset = size_adjustments.get(server_size, {})
        
        # Application r√©cursive des ajustements
        self._deep_merge_dict(preset, size_preset)
        
        return preset
    
    def _deep_merge_dict(self, base_dict: Dict[str, Any], update_dict: Dict[str, Any]):
        """Fusion r√©cursive de dictionnaires"""
        for key, value in update_dict.items():
            if key in base_dict and isinstance(base_dict[key], dict) and isinstance(value, dict):
                self._deep_merge_dict(base_dict[key], value)
            else:
                base_dict[key] = value
    
    @app_commands.command(name="config", description="üöÄ Configuration r√©volutionnaire Arsenal - Setup complet en 30 min !")
    @app_commands.describe(
        action="Action √† effectuer",
        module="Module sp√©cifique √† configurer",
        preset="Preset √† appliquer selon votre serveur"
    )
    @app_commands.choices(action=[
        app_commands.Choice(name="üöÄ Configuration Rapide (30 min)", value="quick_setup"),
        app_commands.Choice(name="‚öôÔ∏è Configuration Avanc√©e", value="advanced_setup"),
        app_commands.Choice(name="üìä Dashboard Analytics", value="dashboard"),
        app_commands.Choice(name="üîß Module Sp√©cifique", value="module_config"),
        app_commands.Choice(name="üìã Statut Configuration", value="status"),
        app_commands.Choice(name="üíæ Sauvegarde/Restauration", value="backup"),
        app_commands.Choice(name="üîÑ Reset Configuration", value="reset"),
        app_commands.Choice(name="üìñ Guide Complet", value="guide")
    ])
    @app_commands.choices(module=[
        app_commands.Choice(name="üõ°Ô∏è Mod√©ration & AutoMod", value="moderation"),
        app_commands.Choice(name="üí∞ √âconomie & Niveaux", value="economy"),
        app_commands.Choice(name="üéÆ Divertissement & Jeux", value="entertainment"),
        app_commands.Choice(name="üó£Ô∏è Syst√®me Vocal", value="voice"),
        app_commands.Choice(name="üìä Logs & Analytics", value="logs"),
        app_commands.Choice(name="üîî Notifications", value="notifications"),
        app_commands.Choice(name="üîí S√©curit√©", value="security"),
        app_commands.Choice(name="üìù R√®glement & Tickets", value="rules_tickets"),
        app_commands.Choice(name="‚öôÔ∏è R√¥les & Permissions", value="roles"),
        app_commands.Choice(name="üåê Fonctionnalit√©s Avanc√©es", value="advanced")
    ])
    @app_commands.choices(preset=[
        app_commands.Choice(name="üéÆ Serveur Gaming", value="gaming"),
        app_commands.Choice(name="üë• Communaut√©", value="community"),
        app_commands.Choice(name="üíº Professionnel", value="business"),
        app_commands.Choice(name="üéì √âducatif", value="education"),
        app_commands.Choice(name="üé® Cr√©atif", value="creative"),
        app_commands.Choice(name="üîß Personnalis√©", value="custom")
    ])
    async def config_command(self, interaction: discord.Interaction, 
                           action: str = "quick_setup",
                           module: str = None,
                           preset: str = None):
        """Commande principale de configuration Arsenal"""
        
        # V√©rifications de permissions
        if not interaction.user.guild_permissions.administrator:
            embed = discord.Embed(
                title="‚ùå Permissions Insuffisantes",
                description="Seuls les **Administrateurs** peuvent utiliser ce syst√®me de configuration.",
                color=0xFF0000
            )
            return await interaction.response.send_message(embed=embed, ephemeral=True)
        
        # D√©f√©rer la r√©ponse pour traitement long
        await interaction.response.defer()
        
        try:
            # Router vers la fonction appropri√©e
            if action == "quick_setup":
                await self.handle_quick_setup(interaction, preset)
            elif action == "advanced_setup":
                await self.handle_advanced_setup(interaction)
            elif action == "dashboard":
                await self.handle_dashboard(interaction)
            elif action == "module_config":
                await self.handle_module_config(interaction, module)
            elif action == "status":
                await self.handle_status(interaction)
            elif action == "backup":
                await self.handle_backup(interaction)
            elif action == "reset":
                await self.handle_reset(interaction)
            elif action == "guide":
                await self.handle_guide(interaction)
            else:
                await self.handle_quick_setup(interaction, preset)
                
        except Exception as e:
            logger.error(f"Erreur configuration {interaction.guild.id}: {e}")
            await self.handle_error(interaction, e)
    
    async def handle_quick_setup(self, interaction: discord.Interaction, preset: str = None):
        """G√®re la configuration rapide guid√©e"""
        guild = interaction.guild
        config = await self.load_guild_config(guild.id)
        
        # Si d√©j√† configur√©, proposer reconfiguration
        if config.get("setup_completed", False):
            view = ReconfigurationView(self, guild.id)
            embed = self.create_reconfiguration_embed(config)
            return await interaction.followup.send(embed=embed, view=view, ephemeral=True)
        
        # D√©marrer la configuration rapide
        progress = ConfigProgress(
            step=ConfigStep.WELCOME,
            percentage=0,
            completed_modules=set(),
            failed_modules=set(),
            start_time=datetime.now(timezone.utc)
        )
        
        self.active_configs[guild.id] = progress
        
        # Vue principale de configuration
        view = ConfigMainView(self, guild.id, preset)
        embed = self.create_welcome_embed(guild)
        
        await interaction.followup.send(embed=embed, view=view, ephemeral=True)
    
    async def handle_advanced_setup(self, interaction: discord.Interaction):
        """G√®re la configuration avanc√©e module par module"""
        guild = interaction.guild
        config = await self.load_guild_config(guild.id)
        
        view = AdvancedConfigView(self, guild.id)
        embed = self.create_advanced_config_embed(config)
        
        await interaction.followup.send(embed=embed, view=view, ephemeral=True)
    
    async def handle_dashboard(self, interaction: discord.Interaction):
        """Affiche le dashboard analytics"""
        guild = interaction.guild
        
        # V√©rification des permissions analytics
        config = await self.load_guild_config(guild.id)
        if not config.get("analytics", {}).get("enabled", False):
            embed = discord.Embed(
                title="üìä Analytics D√©sactiv√©es",
                description="Les analytics doivent √™tre activ√©es pour acc√©der au dashboard.\n"
                           "Utilisez `/config action:Configuration Rapide` pour les activer.",
                color=0xFF9900
            )
            return await interaction.followup.send(embed=embed, ephemeral=True)
        
        view = AnalyticsDashboardView(self, guild.id)
        embed = await self.create_analytics_embed(guild)
        
        await interaction.followup.send(embed=embed, view=view, ephemeral=True)
    
    async def handle_module_config(self, interaction: discord.Interaction, module: str):
        """Configuration sp√©cifique d'un module"""
        if not module:
            embed = discord.Embed(
                title="‚ùå Module Non Sp√©cifi√©",
                description="Veuillez s√©lectionner un module √† configurer.",
                color=0xFF0000
            )
            return await interaction.followup.send(embed=embed, ephemeral=True)
        
        guild = interaction.guild
        config = await self.load_guild_config(guild.id)
        
        view = ModuleConfigView(self, guild.id, module)
        embed = self.create_module_embed(module, config.get(module, {}))
        
        await interaction.followup.send(embed=embed, view=view, ephemeral=True)
    
    async def handle_status(self, interaction: discord.Interaction):
        """Affiche le statut de la configuration"""
        guild = interaction.guild
        config = await self.load_guild_config(guild.id)
        
        embed = await self.create_status_embed(guild, config)
        view = StatusActionsView(self, guild.id)
        
        await interaction.followup.send(embed=embed, view=view, ephemeral=True)
    
    async def handle_backup(self, interaction: discord.Interaction):
        """G√®re les sauvegardes et restaurations"""
        guild = interaction.guild
        
        view = BackupManagementView(self, guild.id)
        embed = self.create_backup_embed(guild)
        
        await interaction.followup.send(embed=embed, view=view, ephemeral=True)
    
    async def handle_reset(self, interaction: discord.Interaction):
        """Reset de la configuration"""
        guild = interaction.guild
        
        view = ResetConfirmationView(self, guild.id)
        embed = self.create_reset_embed()
        
        await interaction.followup.send(embed=embed, view=view, ephemeral=True)
    
    async def handle_guide(self, interaction: discord.Interaction):
        """Affiche le guide complet"""
        view = GuideView(self)
        embed = self.create_guide_embed()
        
        await interaction.followup.send(embed=embed, view=view, ephemeral=True)
    
    async def handle_error(self, interaction: discord.Interaction, error: Exception):
        """G√®re les erreurs de configuration"""
        embed = discord.Embed(
            title="‚ùå Erreur de Configuration",
            description=f"Une erreur s'est produite lors de la configuration:\n```\n{str(error)[:1000]}\n```",
            color=0xFF0000
        )
        embed.add_field(
            name="üîß Support",
            value="Si cette erreur persiste, contactez le support Arsenal.\n"
                  "**Erreur ID:** `" + hashlib.md5(str(error).encode()).hexdigest()[:8] + "`",
            inline=False
        )
        
        try:
            await interaction.followup.send(embed=embed, ephemeral=True)
        except:
            # Si l'interaction a expir√©, essayer de cr√©er un nouveau message
            if interaction.channel:
                await interaction.channel.send(embed=embed)
    
    def create_welcome_embed(self, guild: discord.Guild) -> discord.Embed:
        """Cr√©e l'embed de bienvenue pour la configuration"""
        embed = discord.Embed(
            title="üöÄ Arsenal Config Revolution V2.0",
            description=f"**Configuration Ultra-Rapide pour {guild.name}**\n\n"
                       "‚ú® **Fonctionnalit√©s:**\n"
                       "‚Ä¢ Configuration compl√®te en **15-30 minutes**\n"
                       "‚Ä¢ **29 modules** Arsenal configurables\n"
                       "‚Ä¢ Presets intelligents selon votre serveur\n"
                       "‚Ä¢ Cr√©ation automatique salons/r√¥les\n"
                       "‚Ä¢ Dashboard analytics en temps r√©el\n\n"
                       "üéØ **Pr√™t √† r√©volutionner votre serveur ?**",
            color=0x00FF88
        )
        
        embed.add_field(
            name="‚ö° Configuration Rapide",
            value="Setup guid√© en 5 √©tapes\n‚è±Ô∏è **15-30 minutes max**",
            inline=True
        )
        
        embed.add_field(
            name="üîß Configuration Avanc√©e", 
            value="Contr√¥le total sur chaque module\nüéõÔ∏è **Personnalisation compl√®te**",
            inline=True
        )
        
        embed.add_field(
            name="üìä Analytics Dashboard",
            value="M√©triques temps r√©el\nüìà **Performance & insights**",
            inline=True
        )
        
        embed.set_footer(text="Arsenal V4.5.2 ‚Ä¢ Configuration R√©volutionnaire")
        embed.set_thumbnail(url=guild.icon.url if guild.icon else None)
        
        return embed
    
    def create_reconfiguration_embed(self, config: Dict[str, Any]) -> discord.Embed:
        """Embed pour serveur d√©j√† configur√©"""
        embed = discord.Embed(
            title="‚úÖ Serveur D√©j√† Configur√©",
            description="Ce serveur a d√©j√† √©t√© configur√© avec Arsenal.\n\n"
                       "**Options disponibles:**",
            color=0x00AA55
        )
        
        last_modified = config.get("last_modified", "Inconnu")
        setup_progress = config.get("setup_progress", 0)
        
        embed.add_field(
            name="üìä Statut Actuel",
            value=f"**Progression:** {setup_progress}%\n"
                  f"**Derni√®re modification:** {last_modified[:10] if last_modified != 'Inconnu' else 'Inconnu'}",
            inline=False
        )
        
        return embed
    
    def create_advanced_config_embed(self, config: Dict[str, Any]) -> discord.Embed:
        """Embed pour configuration avanc√©e"""
        embed = discord.Embed(
            title="üîß Configuration Avanc√©e Arsenal",
            description="**Contr√¥le total sur tous les modules**\n\n"
                       "Configurez chaque aspect d'Arsenal selon vos besoins pr√©cis.\n"
                       "Interface experte avec options d√©taill√©es.",
            color=0x3366FF
        )
        
        # Comptage des modules activ√©s
        enabled_modules = 0
        total_modules = 12  # Modules principaux
        
        modules_status = []
        for module_name in ["moderation", "economy", "entertainment", "voice", "logs", "notifications"]:
            if config.get(module_name, {}).get("enabled", False):
                enabled_modules += 1
                modules_status.append(f"‚úÖ {module_name.title()}")
            else:
                modules_status.append(f"‚ùå {module_name.title()}")
        
        embed.add_field(
            name="üìä Modules Activ√©s",
            value=f"**{enabled_modules}/{total_modules}** modules activ√©s\n\n" + "\n".join(modules_status[:6]),
            inline=True
        )
        
        embed.add_field(
            name="‚öôÔ∏è Configuration",
            value="‚Ä¢ Module par module\n‚Ä¢ Options avanc√©es\n‚Ä¢ Validation temps r√©el\n‚Ä¢ Rollback automatique",
            inline=True
        )
        
        return embed


# =============================================================================
# VUES DISCORD UI - INTERFACES ULTRA-MODERNES
# =============================================================================

class ConfigMainView(discord.ui.View):
    """Vue principale de configuration avec boutons ultra-modernes"""
    
    def __init__(self, cog: ArsenalConfigRevolution, guild_id: int, preset: str = None):
        super().__init__(timeout=1800)  # 30 minutes
        self.cog = cog
        self.guild_id = guild_id
        self.preset = preset
    
    @discord.ui.button(label="üöÄ Configuration Rapide", style=discord.ButtonStyle.primary, emoji="‚ö°")
    async def quick_setup_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """D√©marre la configuration rapide"""
        await interaction.response.defer()
        
        # D√©marrer la configuration par √©tapes
        view = QuickSetupStep1(self.cog, self.guild_id, self.preset)
        embed = self.cog.create_step1_embed()
        
        await interaction.edit_original_response(embed=embed, view=view)
    
    @discord.ui.button(label="üîß Configuration Avanc√©e", style=discord.ButtonStyle.secondary, emoji="‚öôÔ∏è")
    async def advanced_setup_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Configuration avanc√©e module par module"""
        await interaction.response.defer()
        
        view = AdvancedConfigView(self.cog, self.guild_id)
        embed = self.cog.create_advanced_config_embed(await self.cog.load_guild_config(self.guild_id))
        
        await interaction.edit_original_response(embed=embed, view=view)
    
    @discord.ui.button(label="üìä Dashboard", style=discord.ButtonStyle.success, emoji="üìà")
    async def dashboard_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Ouvre le dashboard analytics"""
        await interaction.response.defer()
        
        view = AnalyticsDashboardView(self.cog, self.guild_id)
        embed = await self.cog.create_analytics_embed(interaction.guild)
        
        await interaction.edit_original_response(embed=embed, view=view)
    
    @discord.ui.button(label="‚ùå Annuler", style=discord.ButtonStyle.danger)
    async def cancel_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Annule la configuration"""
        embed = discord.Embed(
            title="‚ùå Configuration Annul√©e",
            description="La configuration a √©t√© annul√©e. Aucun changement n'a √©t√© effectu√©.",
            color=0xFF0000
        )
        await interaction.response.edit_message(embed=embed, view=None)

class QuickSetupStep1(discord.ui.View):
    """√âtape 1: S√©lection du type de serveur"""
    
    def __init__(self, cog: ArsenalConfigRevolution, guild_id: int, preset: str = None):
        super().__init__(timeout=1800)
        self.cog = cog
        self.guild_id = guild_id
        self.selected_preset = preset
    
    @discord.ui.select(
        placeholder="üéØ S√©lectionnez le type de votre serveur...",
        options=[
            discord.SelectOption(
                label="üéÆ Serveur Gaming",
                value="gaming",
                description="Jeux, comp√©titions, tournois, communaut√© gaming",
                emoji="üéÆ"
            ),
            discord.SelectOption(
                label="üë• Communaut√© G√©n√©rale",
                value="community", 
                description="Discussion, √©v√©nements, communaut√© diverse",
                emoji="üë•"
            ),
            discord.SelectOption(
                label="üíº Serveur Professionnel",
                value="business",
                description="Entreprise, √©quipe, collaboration professionnelle",
                emoji="üíº"
            ),
            discord.SelectOption(
                label="üéì Serveur √âducatif",
                value="education",
                description="√âcole, universit√©, formation, apprentissage",
                emoji="üéì"
            ),
            discord.SelectOption(
                label="üé® Serveur Cr√©atif",
                value="creative",
                description="Art, musique, cr√©ation, partage cr√©atif",
                emoji="üé®"
            ),
            discord.SelectOption(
                label="üîß Configuration Personnalis√©e",
                value="custom",
                description="Configuration sur mesure, contr√¥le total",
                emoji="üîß"
            )
        ]
    )
    async def server_type_select(self, interaction: discord.Interaction, select: discord.ui.Select):
        """S√©lection du type de serveur"""
        await interaction.response.defer()
        
        server_type = select.values[0]
        
        # Sauvegarder la s√©lection
        config = await self.cog.load_guild_config(self.guild_id)
        config["quick_setup"]["server_type"] = server_type
        await self.cog.save_guild_config(self.guild_id, config)
        
        # Passer √† l'√©tape 2
        view = QuickSetupStep2(self.cog, self.guild_id, server_type)
        embed = self.cog.create_step2_embed(server_type)
        
        await interaction.edit_original_response(embed=embed, view=view)
    
    @discord.ui.button(label="‚¨ÖÔ∏è Retour", style=discord.ButtonStyle.secondary)
    async def back_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Retour au menu principal"""
        await interaction.response.defer()
        
        view = ConfigMainView(self.cog, self.guild_id, self.selected_preset)
        embed = self.cog.create_welcome_embed(interaction.guild)
        
        await interaction.edit_original_response(embed=embed, view=view)

class QuickSetupStep2(discord.ui.View):
    """√âtape 2: S√©lection de la taille du serveur"""
    
    def __init__(self, cog: ArsenalConfigRevolution, guild_id: int, server_type: str):
        super().__init__(timeout=1800)
        self.cog = cog
        self.guild_id = guild_id
        self.server_type = server_type
    
    @discord.ui.select(
        placeholder="üìä S√©lectionnez la taille de votre serveur...",
        options=[
            discord.SelectOption(
                label="üè† Petit Serveur (1-100 membres)",
                value="small",
                description="Configuration optimis√©e pour petites communaut√©s",
                emoji="üè†"
            ),
            discord.SelectOption(
                label="üè¢ Serveur Moyen (100-500 membres)",
                value="medium",
                description="Fonctionnalit√©s √©quilibr√©es pour croissance",
                emoji="üè¢"
            ),
            discord.SelectOption(
                label="üè≠ Grand Serveur (500-2000 membres)",
                value="large", 
                description="Outils avanc√©s pour grandes communaut√©s",
                emoji="üè≠"
            ),
            discord.SelectOption(
                label="üåÜ Serveur Massif (2000+ membres)",
                value="massive",
                description="Configuration haute performance & s√©curit√©",
                emoji="üåÜ"
            )
        ]
    )
    async def server_size_select(self, interaction: discord.Interaction, select: discord.ui.Select):
        """S√©lection de la taille du serveur"""
        await interaction.response.defer()
        
        server_size = select.values[0]
        
        # Sauvegarder la s√©lection
        config = await self.cog.load_guild_config(self.guild_id)
        config["quick_setup"]["server_size"] = server_size
        await self.cog.save_guild_config(self.guild_id, config)
        
        # Passer √† l'√©tape 3
        view = QuickSetupStep3(self.cog, self.guild_id, self.server_type, server_size)
        embed = self.cog.create_step3_embed(self.server_type, server_size)
        
        await interaction.edit_original_response(embed=embed, view=view)
    
    @discord.ui.button(label="‚¨ÖÔ∏è Retour", style=discord.ButtonStyle.secondary)
    async def back_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Retour √† l'√©tape 1"""
        await interaction.response.defer()
        
        view = QuickSetupStep1(self.cog, self.guild_id)
        embed = self.cog.create_step1_embed()
        
        await interaction.edit_original_response(embed=embed, view=view)

class QuickSetupStep3(discord.ui.View):
    """√âtape 3: S√©lection des modules √† activer"""
    
    def __init__(self, cog: ArsenalConfigRevolution, guild_id: int, server_type: str, server_size: str):
        super().__init__(timeout=1800)
        self.cog = cog
        self.guild_id = guild_id
        self.server_type = server_type
        self.server_size = server_size
        self.selected_modules = set()
    
    @discord.ui.button(label="‚úÖ Utiliser Preset Recommand√©", style=discord.ButtonStyle.success, emoji="‚ö°")
    async def use_preset_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Utilise le preset recommand√©"""
        await interaction.response.defer()
        
        # Passer directement √† l'√©tape 4 avec preset
        view = QuickSetupStep4(self.cog, self.guild_id, self.server_type, self.server_size, use_preset=True)
        embed = await self.cog.create_step4_embed(self.server_type, self.server_size, True)
        
        await interaction.edit_original_response(embed=embed, view=view)
    
    @discord.ui.button(label="üîß S√©lection Personnalis√©e", style=discord.ButtonStyle.primary, emoji="‚öôÔ∏è")
    async def custom_selection_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """S√©lection manuelle des modules"""
        await interaction.response.defer()
        
        view = ModuleSelectionView(self.cog, self.guild_id, self.server_type, self.server_size)
        embed = self.cog.create_module_selection_embed()
        
        await interaction.edit_original_response(embed=embed, view=view)
    
    @discord.ui.button(label="‚¨ÖÔ∏è Retour", style=discord.ButtonStyle.secondary)
    async def back_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Retour √† l'√©tape 2"""
        await interaction.response.defer()
        
        view = QuickSetupStep2(self.cog, self.guild_id, self.server_type)
        embed = self.cog.create_step2_embed(self.server_type)
        
        await interaction.edit_original_response(embed=embed, view=view)

class ModuleSelectionView(discord.ui.View):
    """Vue de s√©lection manuelle des modules"""
    
    def __init__(self, cog: ArsenalConfigRevolution, guild_id: int, server_type: str, server_size: str):
        super().__init__(timeout=1800)
        self.cog = cog
        self.guild_id = guild_id
        self.server_type = server_type
        self.server_size = server_size
        self.selected_modules = set()
    
    @discord.ui.select(
        placeholder="üõ°Ô∏è Modules de Mod√©ration & S√©curit√©...",
        options=[
            discord.SelectOption(label="üõ°Ô∏è AutoMod Complet", value="automod", emoji="üõ°Ô∏è"),
            discord.SelectOption(label="üîí S√©curit√© Avanc√©e", value="security", emoji="üîí"),
            discord.SelectOption(label="üìä Logs D√©taill√©s", value="logs", emoji="üìä"),
            discord.SelectOption(label="üé´ Syst√®me Tickets", value="tickets", emoji="üé´"),
            discord.SelectOption(label="üìù R√®glement Auto", value="rules", emoji="üìù")
        ],
        max_values=5
    )
    async def moderation_modules(self, interaction: discord.Interaction, select: discord.ui.Select):
        """S√©lection modules mod√©ration"""
        for value in select.values:
            self.selected_modules.add(value)
        await interaction.response.defer()
    
    @discord.ui.select(
        placeholder="üí∞ Modules √âconomie & Divertissement...",
        options=[
            discord.SelectOption(label="üí∞ ArsenalCoin", value="economy", emoji="üí∞"),
            discord.SelectOption(label="üìà Syst√®me Niveaux", value="levels", emoji="üìà"),
            discord.SelectOption(label="üéÆ Jeux & Casino", value="games", emoji="üéÆ"),
            discord.SelectOption(label="üèπ Hunt Royal", value="hunt_royal", emoji="üèπ"),
            discord.SelectOption(label="üéµ Syst√®me Musical", value="music", emoji="üéµ"),
            discord.SelectOption(label="üó£Ô∏è Hub Vocal", value="voice_hub", emoji="üó£Ô∏è")
        ],
        max_values=6
    )
    async def economy_modules(self, interaction: discord.Interaction, select: discord.ui.Select):
        """S√©lection modules √©conomie"""
        for value in select.values:
            self.selected_modules.add(value)
        await interaction.response.defer()
    
    @discord.ui.button(label="‚úÖ Confirmer S√©lection", style=discord.ButtonStyle.success)
    async def confirm_selection(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Confirme la s√©lection et passe √† l'√©tape suivante"""
        await interaction.response.defer()
        
        # Sauvegarder les modules s√©lectionn√©s
        config = await self.cog.load_guild_config(self.guild_id)
        config["quick_setup"]["selected_modules"] = list(self.selected_modules)
        await self.cog.save_guild_config(self.guild_id, config)
        
        # Passer √† l'√©tape 4
        view = QuickSetupStep4(self.cog, self.guild_id, self.server_type, self.server_size, False, self.selected_modules)
        embed = await self.cog.create_step4_embed(self.server_type, self.server_size, False, self.selected_modules)
        
        await interaction.edit_original_response(embed=embed, view=view)

class QuickSetupStep4(discord.ui.View):
    """√âtape 4: Cr√©ation des salons et r√¥les"""
    
    def __init__(self, cog: ArsenalConfigRevolution, guild_id: int, server_type: str, server_size: str, 
                 use_preset: bool = True, selected_modules: set = None):
        super().__init__(timeout=1800)
        self.cog = cog
        self.guild_id = guild_id
        self.server_type = server_type
        self.server_size = server_size
        self.use_preset = use_preset
        self.selected_modules = selected_modules or set()
        self.creation_in_progress = False
    
    @discord.ui.button(label="üöÄ Cr√©er Structure Automatiquement", style=discord.ButtonStyle.primary, emoji="‚ö°")
    async def auto_create_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Cr√©ation automatique de la structure"""
        if self.creation_in_progress:
            return
        
        self.creation_in_progress = True
        await interaction.response.defer()
        
        try:
            # D√©but de la cr√©ation
            embed = discord.Embed(
                title="üöÄ Cr√©ation en Cours...",
                description="Cr√©ation de la structure du serveur en cours...\n\n‚è≥ **√âtape 1/5:** Validation des permissions",
                color=0xFFAA00
            )
            await interaction.edit_original_response(embed=embed, view=None)
            
            # Cr√©ation progressive avec updates
            success = await self.cog.create_server_structure(
                interaction.guild, self.server_type, self.server_size, 
                self.use_preset, self.selected_modules, interaction
            )
            
            if success:
                # Passer √† l'√©tape finale
                view = QuickSetupStep5(self.cog, self.guild_id)
                embed = await self.cog.create_step5_embed(interaction.guild)
                await interaction.edit_original_response(embed=embed, view=view)
            else:
                # Erreur dans la cr√©ation
                embed = discord.Embed(
                    title="‚ùå Erreur de Cr√©ation",
                    description="Une erreur s'est produite lors de la cr√©ation.\nVeuillez r√©essayer ou contacter le support.",
                    color=0xFF0000
                )
                await interaction.edit_original_response(embed=embed, view=self)
                
        except Exception as e:
            logger.error(f"Erreur cr√©ation structure {self.guild_id}: {e}")
            embed = discord.Embed(
                title="‚ùå Erreur Critique",
                description=f"Erreur critique: {str(e)[:500]}",
                color=0xFF0000
            )
            await interaction.edit_original_response(embed=embed, view=None)
        finally:
            self.creation_in_progress = False
    
    @discord.ui.button(label="üìù Cr√©er Manuellement", style=discord.ButtonStyle.secondary, emoji="‚úã")
    async def manual_create_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Guide de cr√©ation manuelle"""
        await interaction.response.defer()
        
        view = ManualCreationGuideView(self.cog, self.guild_id, self.server_type, self.server_size)
        embed = self.cog.create_manual_guide_embed(self.server_type, self.server_size)
        
        await interaction.edit_original_response(embed=embed, view=view)

class QuickSetupStep5(discord.ui.View):
    """√âtape 5: Finalisation et r√©capitulatif"""
    
    def __init__(self, cog: ArsenalConfigRevolution, guild_id: int):
        super().__init__(timeout=1800)
        self.cog = cog
        self.guild_id = guild_id
    
    @discord.ui.button(label="üéâ Finaliser Configuration", style=discord.ButtonStyle.success, emoji="‚úÖ")
    async def finalize_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Finalise la configuration"""
        await interaction.response.defer()
        
        try:
            # Marquer comme configur√©
            config = await self.cog.load_guild_config(self.guild_id)
            config["setup_completed"] = True
            config["setup_progress"] = 100
            config["last_modified"] = datetime.now(timezone.utc).isoformat()
            config["quick_setup"]["completion_time"] = datetime.now(timezone.utc).isoformat()
            
            await self.cog.save_guild_config(self.guild_id, config)
            
            # Nettoyer la configuration active
            if self.guild_id in self.cog.active_configs:
                del self.cog.active_configs[self.guild_id]
            
            # Embed de succ√®s
            embed = discord.Embed(
                title="üéâ Configuration Termin√©e !",
                description=f"**{interaction.guild.name}** a √©t√© configur√© avec succ√®s !\n\n"
                           "üéØ **Arsenal est maintenant op√©rationnel**\n"
                           "üìä Consultez `/config status` pour voir le r√©sum√©\n"
                           "üìà Utilisez `/config dashboard` pour les analytics\n\n"
                           "**Merci d'avoir choisi Arsenal ! üöÄ**",
                color=0x00FF88
            )
            
            embed.add_field(
                name="üîó Liens Utiles",
                value="‚Ä¢ [Documentation](https://arsenal.xerox3elite.com/docs)\n"
                      "‚Ä¢ [Support Discord](https://discord.gg/arsenal)\n"
                      "‚Ä¢ [GitHub](https://github.com/xerox3elite/arsenal)",
                inline=False
            )
            
            await interaction.edit_original_response(embed=embed, view=None)
            
        except Exception as e:
            logger.error(f"Erreur finalisation {self.guild_id}: {e}")
            embed = discord.Embed(
                title="‚ùå Erreur de Finalisation",
                description="Une erreur s'est produite lors de la finalisation.",
                color=0xFF0000
            )
            await interaction.edit_original_response(embed=embed, view=None)
    
    @discord.ui.button(label="üìä Voir Dashboard", style=discord.ButtonStyle.primary, emoji="üìà")
    async def dashboard_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Ouvre le dashboard apr√®s configuration"""
        await interaction.response.defer()
        
        view = AnalyticsDashboardView(self.cog, self.guild_id)
        embed = await self.cog.create_analytics_embed(interaction.guild)
        
        await interaction.edit_original_response(embed=embed, view=view)

class ConfigMainView(discord.ui.View):
    """Interface principale r√©volutionnaire"""
    
    def __init__(self, bot, user_id: int, guild_id: int):
        super().__init__(timeout=600)  # 10 minutes
        self.bot = bot
        self.user_id = user_id
        self.guild_id = guild_id
        self.config_system = self.bot.get_cog('ArsenalConfigRevolution')
        
    @discord.ui.button(
        label="‚ö° Configuration Rapide", 
        style=discord.ButtonStyle.success, 
        emoji="‚ö°",
        row=0
    )
    async def quick_setup(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Configuration rapide en 5 √©tapes (15-30 min)"""
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå Seul l'administrateur peut utiliser cette interface!", ephemeral=True)
            return
        
        embed = discord.Embed(
            title="‚ö° Configuration Rapide Arsenal",
            description="""
**üéØ Configurez votre serveur en 30 minutes maximum !**

Cette configuration guid√©e va vous permettre de configurer tous les modules essentiels d'Arsenal en quelques clics.

**üìã √âtapes de la configuration :**
1Ô∏è‚É£ **Type de serveur** (Gaming, Communaut√©, Business...)
2Ô∏è‚É£ **Taille du serveur** (Petit, Moyen, Grand...)
3Ô∏è‚É£ **Modules principaux** (Mod√©ration, √âconomie, Logs...)
4Ô∏è‚É£ **Salons automatiques** (Cr√©ation intelligente)
5Ô∏è‚É£ **Finalisation** (Test et activation)

‚ú® **Temps estim√© :** 15-30 minutes
üîÑ **Sauvegarde automatique** √† chaque √©tape
""",
            color=0x00ff41,
            timestamp=datetime.now(timezone.utc)
        )
        embed.set_footer(text="Arsenal Config Revolution ‚Ä¢ √âtape 1/5")
        
        view = QuickSetupStep1(self.bot, self.user_id, self.guild_id)
        await interaction.response.edit_message(embed=embed, view=view)
    
    @discord.ui.button(
        label="üéõÔ∏è Configuration Avanc√©e", 
        style=discord.ButtonStyle.primary, 
        emoji="üéõÔ∏è",
        row=0
    )
    async def advanced_setup(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Configuration avanc√©e module par module"""
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå Seul l'administrateur peut utiliser cette interface!", ephemeral=True)
            return
        
        embed = discord.Embed(
            title="üéõÔ∏è Configuration Avanc√©e Arsenal",
            description="""
**üîß Configuration d√©taill√©e par modules**

Configurez chaque module Arsenal individuellement avec toutes les options avanc√©es disponibles.

**üìÇ Modules disponibles :**
üõ°Ô∏è **Mod√©ration & S√©curit√©**
üí∞ **√âconomie & Niveaux**
üéµ **Audio & Vocal**
üìä **Logs & Analytics**
üéÆ **Jeux & Divertissement**
‚öôÔ∏è **Syst√®me & Permissions**

‚ö†Ô∏è **Niveau requis :** Administrateur exp√©riment√©
‚è±Ô∏è **Temps estim√© :** 1-2 heures
""",
            color=0x3498db,
            timestamp=datetime.now(timezone.utc)
        )
        embed.set_footer(text="Arsenal Config Revolution ‚Ä¢ Mode Expert")
        
        view = AdvancedConfigView(self.bot, self.user_id, self.guild_id)
        await interaction.response.edit_message(embed=embed, view=view)
    
    @discord.ui.button(
        label="üìä √âtat de la Configuration", 
        style=discord.ButtonStyle.secondary, 
        emoji="üìä",
        row=1
    )
    async def config_status(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Affiche l'√©tat actuel de la configuration"""
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå Seul l'administrateur peut utiliser cette interface!", ephemeral=True)
            return
        
        config = self.config_system.load_guild_config(self.guild_id)
        
        # Calcul du pourcentage de completion
        total_modules = 6
        completed_modules = 0
        
        modules_status = {
            "üõ°Ô∏è Mod√©ration": config.get("moderation", {}).get("enabled", False),
            "üí∞ √âconomie": config.get("economy", {}).get("enabled", False),
            "üéµ Audio": config.get("voice", {}).get("hub_system", {}).get("enabled", False),
            "üìä Logs": config.get("logs", {}).get("enabled", False),
            "üéÆ Jeux": config.get("entertainment", {}).get("games", {}).get("enabled", False),
            "‚öôÔ∏è Syst√®me": config.get("security", {}).get("backup", {}).get("auto_backup", False)
        }
        
        completed_modules = sum(1 for enabled in modules_status.values() if enabled)
        completion_percentage = (completed_modules / total_modules) * 100
        
        # Cr√©ation de l'embed de statut
        embed = discord.Embed(
            title="üìä √âtat de la Configuration Arsenal",
            description=f"""
**üéØ Progression globale : {completion_percentage:.1f}%**
{'üü¢' * int(completion_percentage // 10)}{'‚ö™' * (10 - int(completion_percentage // 10))}

**üìã √âtat des modules :**
""",
            color=0x27ae60 if completion_percentage > 80 else 0xf39c12 if completion_percentage > 50 else 0xe74c3c,
            timestamp=datetime.now(timezone.utc)
        )
        
        for module, enabled in modules_status.items():
            status = "‚úÖ Configur√©" if enabled else "‚ùå Non configur√©"
            embed.add_field(name=module, value=status, inline=True)
        
        # Informations additionnelles
        setup_info = config.get("quick_setup", {})
        if setup_info.get("server_type"):
            embed.add_field(
                name="üè∑Ô∏è Type de serveur", 
                value=setup_info.get("server_type", "Non d√©fini").title(), 
                inline=True
            )
        
        if setup_info.get("server_size"):
            embed.add_field(
                name="üìè Taille du serveur", 
                value=setup_info.get("server_size", "Non d√©fini").title(), 
                inline=True
            )
        
        embed.set_footer(text=f"Configuration version {config.get('version', '1.0')} ‚Ä¢ Arsenal V4.5.2")
        
        back_view = ConfigStatusView(self.bot, self.user_id, self.guild_id)
        await interaction.response.edit_message(embed=embed, view=back_view)
    
    @discord.ui.button(
        label="üîÑ R√©initialiser", 
        style=discord.ButtonStyle.danger, 
        emoji="üîÑ",
        row=1
    )
    async def reset_config(self, interaction: discord.Interaction, button: discord.ui.Button):
        """R√©initialise compl√®tement la configuration"""
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå Seul l'administrateur peut utiliser cette interface!", ephemeral=True)
            return
        
        embed = discord.Embed(
            title="üîÑ R√©initialisation de la Configuration",
            description="""
**‚ö†Ô∏è ATTENTION : Action irr√©versible !**

Cette action va supprimer **TOUTE** la configuration actuelle d'Arsenal sur ce serveur et restaurer les param√®tres par d√©faut.

**üìã Sera supprim√© :**
‚Ä¢ Toute la configuration des modules
‚Ä¢ Les pr√©f√©rences et param√®tres personnalis√©s
‚Ä¢ Les logs de configuration
‚Ä¢ Les presets appliqu√©s

**üíæ Sera conserv√© :**
‚Ä¢ Les donn√©es √©conomiques des utilisateurs
‚Ä¢ L'historique des sanctions
‚Ä¢ Les profils utilisateurs

√ätes-vous **absolument certain** de vouloir continuer ?
""",
            color=0xe74c3c,
            timestamp=datetime.now(timezone.utc)
        )
        embed.set_footer(text="‚ö†Ô∏è Cette action est irr√©versible !")
        
        view = ResetConfirmView(self.bot, self.user_id, self.guild_id)
        await interaction.response.edit_message(embed=embed, view=view)

class QuickSetupStep1(discord.ui.View):
    """√âtape 1 : Choix du type de serveur"""
    
    def __init__(self, bot, user_id: int, guild_id: int):
        super().__init__(timeout=600)
        self.bot = bot
        self.user_id = user_id
        self.guild_id = guild_id
        self.config_system = self.bot.get_cog('ArsenalConfigRevolution')
    
    @discord.ui.select(
        placeholder="üè∑Ô∏è Quel type de serveur administrez-vous ?",
        options=[
            discord.SelectOption(
                label="üéÆ Gaming Community",
                value="gaming",
                description="Communaut√© gaming avec tournois, stats, Hunt Royal...",
                emoji="üéÆ"
            ),
            discord.SelectOption(
                label="üí¨ Communaut√© G√©n√©rale",
                value="community",
                description="Serveur communautaire avec discussions, √©v√©nements...",
                emoji="üí¨"
            ),
            discord.SelectOption(
                label="üè¢ Professionnel/Business",
                value="business",
                description="√âquipe, entreprise, organisation professionnelle...",
                emoji="üè¢"
            ),
            discord.SelectOption(
                label="üéì √âducation/Formation",
                value="education",
                description="√âcole, cours, formation, apprentissage...",
                emoji="üéì"
            ),
            discord.SelectOption(
                label="üé® Cr√©atif/Artistique",
                value="creative",
                description="Art, musique, cr√©ation de contenu, streaming...",
                emoji="üé®"
            ),
            discord.SelectOption(
                label="üîß Personnalis√©",
                value="custom",
                description="Configuration manuelle selon vos besoins sp√©cifiques",
                emoji="üîß"
            )
        ]
    )
    async def server_type_select(self, interaction: discord.Interaction, select: discord.ui.Select):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå Seul l'administrateur peut utiliser cette interface!", ephemeral=True)
            return
        
        await interaction.response.defer()
        
        server_type = select.values[0]
        
        # Sauvegarde du choix
        config = self.config_system.load_guild_config(self.guild_id)
        config["quick_setup"]["server_type"] = server_type
        config["setup_progress"] = 20  # 20% complete
        self.config_system.save_guild_config(self.guild_id, config)
        
        # Pr√©paration de l'√©tape suivante
        embed = discord.Embed(
            title="üìè Configuration Rapide Arsenal - √âtape 2/5",
            description=f"""
**‚úÖ Type de serveur s√©lectionn√© :** {self._get_server_type_name(server_type)}

**üìè Quelle est la taille approximative de votre serveur ?**

Cette information nous aide √† optimiser les param√®tres pour de meilleures performances.

üî∏ **Petit** : 1-100 membres (Param√®tres l√©gers)
üî∏ **Moyen** : 100-500 membres (Param√®tres √©quilibr√©s)  
üî∏ **Grand** : 500-2000 membres (Param√®tres optimis√©s)
üî∏ **Massif** : 2000+ membres (Param√®tres haute performance)

‚ö° **Progression :** 20% ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì
""",
            color=0x00ff41,
            timestamp=datetime.now(timezone.utc)
        )
        embed.set_footer(text="Arsenal Config Revolution ‚Ä¢ √âtape 2/5")
        
        view = QuickSetupStep2(self.bot, self.user_id, self.guild_id, server_type)
        await interaction.edit_original_response(embed=embed, view=view)
    
    def _get_server_type_name(self, server_type: str) -> str:
        """Convertit le type de serveur en nom lisible"""
        names = {
            "gaming": "üéÆ Gaming Community",
            "community": "üí¨ Communaut√© G√©n√©rale", 
            "business": "üè¢ Professionnel/Business",
            "education": "üéì √âducation/Formation",
            "creative": "üé® Cr√©atif/Artistique",
            "custom": "üîß Personnalis√©"
        }
        return names.get(server_type, server_type)

# Continuera avec les autres √©tapes...

class QuickSetupStep2(discord.ui.View):
    """√âtape 2 : Choix de la taille du serveur"""
    
    def __init__(self, bot, user_id: int, guild_id: int, server_type: str):
        super().__init__(timeout=600)
        self.bot = bot
        self.user_id = user_id
        self.guild_id = guild_id
        self.server_type = server_type
        self.config_system = self.bot.get_cog('ArsenalConfigRevolution')
    
    @discord.ui.button(label="üî∏ Petit (1-100)", style=discord.ButtonStyle.secondary, emoji="üî∏")
    async def small_server(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self._handle_size_selection(interaction, "small")
    
    @discord.ui.button(label="üîπ Moyen (100-500)", style=discord.ButtonStyle.primary, emoji="üîπ")
    async def medium_server(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self._handle_size_selection(interaction, "medium")
    
    @discord.ui.button(label="üî∂ Grand (500-2K)", style=discord.ButtonStyle.success, emoji="üî∂")
    async def large_server(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self._handle_size_selection(interaction, "large")
    
    @discord.ui.button(label="üî∑ Massif (2K+)", style=discord.ButtonStyle.danger, emoji="üî∑")
    async def massive_server(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self._handle_size_selection(interaction, "massive")
    
    async def _handle_size_selection(self, interaction: discord.Interaction, size: str):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå Seul l'administrateur peut utiliser cette interface!", ephemeral=True)
            return
        
        await interaction.response.defer()
        
        # Sauvegarde du choix
        config = self.config_system.load_guild_config(self.guild_id)
        config["quick_setup"]["server_size"] = size
        config["setup_progress"] = 40  # 40% complete
        self.config_system.save_guild_config(self.guild_id, config)
        
        # Application du preset intelligent
        preset_config = self._generate_smart_preset(self.server_type, size)
        config.update(preset_config)
        self.config_system.save_guild_config(self.guild_id, config)
        
        # Pr√©paration de l'√©tape suivante
        embed = discord.Embed(
            title="üéõÔ∏è Configuration Rapide Arsenal - √âtape 3/5",
            description=f"""
**‚úÖ Configuration automatique appliqu√©e !**

**üìã Preset intelligent g√©n√©r√© :**
üè∑Ô∏è **Type :** {self._get_server_type_name(self.server_type)}
üìè **Taille :** {self._get_size_name(size)}

**üîß Modules activ√©s automatiquement :**
{self._get_enabled_modules_text(preset_config)}

**‚öôÔ∏è Voulez-vous personnaliser ces modules ou continuer avec la configuration automatique ?**

‚ö° **Progression :** 40% ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì
""",
            color=0x00ff41,
            timestamp=datetime.now(timezone.utc)
        )
        embed.set_footer(text="Arsenal Config Revolution ‚Ä¢ √âtape 3/5")
        
        view = QuickSetupStep3(self.bot, self.user_id, self.guild_id, preset_config)
        await interaction.edit_original_response(embed=embed, view=view)
    
    def _generate_smart_preset(self, server_type: str, size: str) -> Dict[str, Any]:
        """G√©n√®re un preset intelligent bas√© sur le type et la taille"""
        
        # Presets de base selon le type de serveur
        presets = {
            "gaming": {
                "moderation": {"enabled": True, "automod": {"anti_toxicity": True, "auto_ban_threshold": 3}},
                "economy": {"enabled": True, "arsenalcoin": {"daily_reward": 150, "boost_multiplier": 2.5}},
                "entertainment": {"hunt_royal": {"enabled": True}, "games": {"enabled": True}},
                "voice": {"hub_system": {"enabled": True, "max_channels": 15}},
                "logs": {"enabled": True, "events": {"voice_activity": True}}
            },
            "community": {
                "moderation": {"enabled": True, "automod": {"anti_spam": True, "anti_toxicity": True}},
                "economy": {"enabled": True, "levels": {"enabled": True, "xp_per_message": 20}},
                "entertainment": {"games": {"enabled": True}, "events": {"enabled": True}},
                "notifications": {"welcome": {"enabled": True}, "level_up": {"enabled": True}},
                "logs": {"enabled": True}
            },
            "business": {
                "moderation": {"enabled": True, "automod": {"anti_spam": True}},
                "economy": {"enabled": False},
                "voice": {"hub_system": {"enabled": True, "max_channels": 5}},
                "logs": {"enabled": True, "events": {"message_delete": True, "role_changes": True}},
                "security": {"verification": {"enabled": True, "level": "high"}}
            },
            "education": {
                "moderation": {"enabled": True, "automod": {"anti_toxicity": True, "anti_spam": True}},
                "economy": {"enabled": True, "levels": {"enabled": True}},
                "voice": {"hub_system": {"enabled": True, "max_channels": 8}},
                "logs": {"enabled": True},
                "security": {"verification": {"enabled": True}}
            },
            "creative": {
                "moderation": {"enabled": True, "automod": {"anti_spam": True}},
                "economy": {"enabled": True, "arsenalcoin": {"daily_reward": 120}},
                "voice": {"music": {"enabled": True}, "hub_system": {"enabled": True}},
                "entertainment": {"games": {"enabled": True}},
                "logs": {"enabled": True}
            }
        }
        
        # Ajustements selon la taille
        size_adjustments = {
            "small": {"voice": {"hub_system": {"max_channels": 5}}, "logs": {"events": {"voice_activity": False}}},
            "medium": {"voice": {"hub_system": {"max_channels": 10}}},
            "large": {"voice": {"hub_system": {"max_channels": 20}}, "security": {"anti_alt": {"enabled": True}}},
            "massive": {"voice": {"hub_system": {"max_channels": 50}}, "security": {"anti_alt": {"enabled": True}}, "moderation": {"automod": {"auto_ban_threshold": 2}}}
        }
        
        # Fusion des presets
        preset = presets.get(server_type, presets["community"])
        size_preset = size_adjustments.get(size, {})
        
        # Application des ajustements de taille
        for key, value in size_preset.items():
            if key in preset:
                preset[key].update(value)
            else:
                preset[key] = value
        
        return preset
    
    def _get_server_type_name(self, server_type: str) -> str:
        names = {
            "gaming": "üéÆ Gaming Community",
            "community": "üí¨ Communaut√© G√©n√©rale", 
            "business": "üè¢ Professionnel/Business",
            "education": "üéì √âducation/Formation",
            "creative": "üé® Cr√©atif/Artistique"
        }
        return names.get(server_type, server_type)
    
    def _get_size_name(self, size: str) -> str:
        names = {
            "small": "üî∏ Petit (1-100 membres)",
            "medium": "üîπ Moyen (100-500 membres)",
            "large": "üî∂ Grand (500-2K membres)",
            "massive": "üî∑ Massif (2K+ membres)"
        }
        return names.get(size, size)
    
    def _get_enabled_modules_text(self, preset: Dict[str, Any]) -> str:
        modules = []
        if preset.get("moderation", {}).get("enabled"):
            modules.append("üõ°Ô∏è Mod√©ration & AutoMod")
        if preset.get("economy", {}).get("enabled"):
            modules.append("üí∞ √âconomie & Niveaux")
        if preset.get("voice", {}).get("hub_system", {}).get("enabled"):
            modules.append("üéµ Hub Vocal")
        if preset.get("entertainment", {}).get("games", {}).get("enabled"):
            modules.append("üéÆ Jeux & Divertissement")
        if preset.get("logs", {}).get("enabled"):
            modules.append("üìä Logs & Analytics")
        if preset.get("security", {}).get("verification", {}).get("enabled"):
            modules.append("üîí S√©curit√© Avanc√©e")
        
        return "\n".join(f"‚úÖ {module}" for module in modules) or "Aucun module activ√©"

class QuickSetupStep3(discord.ui.View):
    """√âtape 3 : Personnalisation des modules"""
    
    def __init__(self, bot, user_id: int, guild_id: int, preset_config: Dict[str, Any]):
        super().__init__(timeout=600)
        self.bot = bot
        self.user_id = user_id
        self.guild_id = guild_id
        self.preset_config = preset_config
        self.config_system = self.bot.get_cog('ArsenalConfigRevolution')
    
    @discord.ui.button(label="‚úÖ Continuer (Recommand√©)", style=discord.ButtonStyle.success, emoji="‚úÖ")
    async def continue_setup(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå Seul l'administrateur peut utiliser cette interface!", ephemeral=True)
            return
        
        await interaction.response.defer()
        
        # Mise √† jour du progr√®s
        config = self.config_system.load_guild_config(self.guild_id)
        config["setup_progress"] = 60  # 60% complete
        self.config_system.save_guild_config(self.guild_id, config)
        
        # Passage √† l'√©tape de cr√©ation des salons
        embed = discord.Embed(
            title="üèóÔ∏è Configuration Rapide Arsenal - √âtape 4/5",
            description="""
**üéØ Cr√©ation automatique des salons**

Arsenal va maintenant cr√©er automatiquement les salons n√©cessaires pour le bon fonctionnement de tous les modules configur√©s.

**üìÇ Salons qui seront cr√©√©s :**
üõ°Ô∏è **#arsenal-logs** - Logs de mod√©ration
üìä **#arsenal-analytics** - Statistiques et analyses  
üéÆ **#arsenal-games** - Jeux et divertissement
üí∞ **#arsenal-economy** - √âconomie et boutique
üîî **#bienvenue** - Messages d'accueil
‚ö†Ô∏è **#quarantine** - Salon de quarantine

**üé≠ Cat√©gories qui seront cr√©√©es :**
üìã **ARSENAL SYSTEM** - Salons syst√®me
üéØ **COMMUNAUT√â** - Salons communautaires

‚ö° **Progression :** 60% ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì
""",
            color=0x00ff41,
            timestamp=datetime.now(timezone.utc)
        )
        embed.set_footer(text="Arsenal Config Revolution ‚Ä¢ √âtape 4/5")
        
        view = QuickSetupStep4(self.bot, self.user_id, self.guild_id)
        await interaction.edit_original_response(embed=embed, view=view)
    
    @discord.ui.button(label="üéõÔ∏è Personnaliser", style=discord.ButtonStyle.primary, emoji="üéõÔ∏è")
    async def customize_modules(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå Seul l'administrateur peut utiliser cette interface!", ephemeral=True)
            return
        
        embed = discord.Embed(
            title="üéõÔ∏è Personnalisation des Modules",
            description="""
**üîß S√©lectionnez les modules √† personnaliser**

Vous pouvez activer/d√©sactiver et configurer finement chaque module selon vos besoins.

**üìÇ Modules disponibles :**
""",
            color=0x3498db,
            timestamp=datetime.now(timezone.utc)
        )
        
        view = ModuleCustomizationView(self.bot, self.user_id, self.guild_id, self.preset_config)
        await interaction.response.edit_message(embed=embed, view=view)

class QuickSetupStep4(discord.ui.View):
    """√âtape 4 : Cr√©ation des salons"""
    
    def __init__(self, bot, user_id: int, guild_id: int):
        super().__init__(timeout=600)
        self.bot = bot
        self.user_id = user_id
        self.guild_id = guild_id
        self.config_system = self.bot.get_cog('ArsenalConfigRevolution')
    
    @discord.ui.button(label="üèóÔ∏è Cr√©er les Salons", style=discord.ButtonStyle.success, emoji="üèóÔ∏è")
    async def create_channels(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå Seul l'administrateur peut utiliser cette interface!", ephemeral=True)
            return
        
        await interaction.response.defer()
        
        guild = self.bot.get_guild(self.guild_id)
        if not guild:
            await interaction.followup.send("‚ùå Erreur : Serveur introuvable!")
            return
        
        try:
            # Cr√©ation de la cat√©gorie principale Arsenal
            arsenal_category = await guild.create_category(
                "üéØ ARSENAL SYSTEM",
                reason="Configuration automatique Arsenal"
            )
            
            # Cr√©ation des salons syst√®me
            created_channels = {}
            
            # Salon de logs
            logs_channel = await guild.create_text_channel(
                "arsenal-logs",
                category=arsenal_category,
                topic="üìä Logs automatiques d'Arsenal Bot",
                reason="Configuration automatique Arsenal"
            )
            created_channels["logs"] = logs_channel.id
            
            # Salon d'analytics
            analytics_channel = await guild.create_text_channel(
                "arsenal-analytics", 
                category=arsenal_category,
                topic="üìà Statistiques et analyses Arsenal",
                reason="Configuration automatique Arsenal"
            )
            created_channels["analytics"] = analytics_channel.id
            
            # Salon de jeux
            games_channel = await guild.create_text_channel(
                "arsenal-games",
                category=arsenal_category, 
                topic="üéÆ Jeux et divertissement Arsenal",
                reason="Configuration automatique Arsenal"
            )
            created_channels["games"] = games_channel.id
            
            # Salon d'√©conomie
            economy_channel = await guild.create_text_channel(
                "arsenal-economy",
                category=arsenal_category,
                topic="üí∞ √âconomie ArsenalCoin et boutique",
                reason="Configuration automatique Arsenal"
            )
            created_channels["economy"] = economy_channel.id
            
            # Salon de bienvenue (dans une cat√©gorie communaut√©)
            community_category = await guild.create_category(
                "üí¨ COMMUNAUT√â",
                reason="Configuration automatique Arsenal"
            )
            
            welcome_channel = await guild.create_text_channel(
                "bienvenue",
                category=community_category,
                topic="üëã Bienvenue sur notre serveur !",
                reason="Configuration automatique Arsenal"
            )
            created_channels["welcome"] = welcome_channel.id
            
            # Salon de quarantine
            quarantine_channel = await guild.create_text_channel(
                "quarantine",
                category=arsenal_category,
                topic="‚ö†Ô∏è Salon de quarantine automatique",
                reason="Configuration automatique Arsenal"
            )
            created_channels["quarantine"] = quarantine_channel.id
            
            # Sauvegarde des IDs des salons dans la config
            config = self.config_system.load_guild_config(self.guild_id)
            config["channels"]["special_channels"] = created_channels
            config["setup_progress"] = 80  # 80% complete
            
            # Mise √† jour des r√©f√©rences dans les modules
            config["moderation"]["automod"]["log_channel"] = logs_channel.id
            config["moderation"]["automod"]["quarantine_channel"] = quarantine_channel.id
            config["logs"]["channels"]["moderation"] = logs_channel.id
            config["logs"]["channels"]["server"] = analytics_channel.id
            config["notifications"]["welcome"]["channel"] = welcome_channel.id
            
            self.config_system.save_guild_config(self.guild_id, config)
            
            # √âtape finale
            embed = discord.Embed(
                title="üéâ Configuration Rapide Arsenal - √âtape 5/5",
                description=f"""
**‚úÖ Salons cr√©√©s avec succ√®s !**

**üìÇ Salons Arsenal cr√©√©s :**
üõ°Ô∏è {logs_channel.mention} - Logs de mod√©ration
üìä {analytics_channel.mention} - Analytics et statistiques
üéÆ {games_channel.mention} - Jeux et divertissement  
üí∞ {economy_channel.mention} - √âconomie ArsenalCoin
üëã {welcome_channel.mention} - Messages de bienvenue
‚ö†Ô∏è {quarantine_channel.mention} - Quarantine automatique

**üéØ Finalisation de la configuration**

Il ne reste plus qu'√† activer tous les syst√®mes et finaliser la configuration !

‚ö° **Progression :** 80% ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì
""",
                color=0x00ff41,
                timestamp=datetime.now(timezone.utc)
            )
            embed.set_footer(text="Arsenal Config Revolution ‚Ä¢ Finalisation")
            
            view = QuickSetupStep5(self.bot, self.user_id, self.guild_id)
            await interaction.edit_original_response(embed=embed, view=view)
            
        except discord.Forbidden:
            await interaction.followup.send("‚ùå Erreur : Je n'ai pas les permissions pour cr√©er des salons!")
        except Exception as e:
            await interaction.followup.send(f"‚ùå Erreur lors de la cr√©ation des salons : {str(e)}")
    
    @discord.ui.button(label="‚è≠Ô∏è Ignorer", style=discord.ButtonStyle.secondary, emoji="‚è≠Ô∏è")
    async def skip_channels(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå Seul l'administrateur peut utiliser cette interface!", ephemeral=True)
            return
        
        await interaction.response.defer()
        
        config = self.config_system.load_guild_config(self.guild_id)
        config["setup_progress"] = 80
        self.config_system.save_guild_config(self.guild_id, config)
        
        embed = discord.Embed(
            title="üéâ Configuration Rapide Arsenal - √âtape 5/5",
            description="""
**‚è≠Ô∏è Cr√©ation de salons ignor√©e**

Vous devrez configurer manuellement les salons pour les logs et autres fonctionnalit√©s dans la configuration avanc√©e.

**üéØ Finalisation de la configuration**

‚ö° **Progression :** 80% ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì
""",
            color=0xf39c12,
            timestamp=datetime.now(timezone.utc)
        )
        
        view = QuickSetupStep5(self.bot, self.user_id, self.guild_id)
        await interaction.edit_original_response(embed=embed, view=view)

class QuickSetupStep5(discord.ui.View):
    """√âtape 5 : Finalisation"""
    
    def __init__(self, bot, user_id: int, guild_id: int):
        super().__init__(timeout=600)
        self.bot = bot
        self.user_id = user_id
        self.guild_id = guild_id
        self.config_system = self.bot.get_cog('ArsenalConfigRevolution')
    
    @discord.ui.button(label="üéâ Finaliser la Configuration", style=discord.ButtonStyle.success, emoji="üéâ")
    async def finalize_setup(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå Seul l'administrateur peut utiliser cette interface!", ephemeral=True)
            return
        
        await interaction.response.defer()
        
        # Finalisation de la configuration
        config = self.config_system.load_guild_config(self.guild_id)
        config["setup_completed"] = True
        config["setup_progress"] = 100
        config["quick_setup"]["preset_applied"] = "completed"
        self.config_system.save_guild_config(self.guild_id, config)
        
        # Message de succ√®s final
        embed = discord.Embed(
            title="üéâ Configuration Arsenal Termin√©e !",
            description="""
**‚úÖ F√©licitations ! Votre serveur Arsenal est maintenant configur√© !**

**üìã Configuration termin√©e en :**
‚è±Ô∏è Moins de 30 minutes
üéØ 5 √©tapes simples
üöÄ Configuration intelligente

**üéÆ Votre serveur dispose maintenant de :**
üõ°Ô∏è **Mod√©ration automatique** avec AutoMod V5
üí∞ **Syst√®me √©conomique** ArsenalCoin complet
üéµ **Hub vocal** avec salons temporaires
üìä **Logs d√©taill√©s** et analytics
üéÆ **Jeux et divertissement**
üîí **S√©curit√© avanc√©e**

**üöÄ Prochaines √©tapes :**
‚Ä¢ Testez les commandes `/help` pour d√©couvrir toutes les fonctionnalit√©s
‚Ä¢ Utilisez `/config` pour des ajustements fins
‚Ä¢ Invitez vos membres √† d√©couvrir Arsenal !

‚ö° **Progression :** 100% ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
""",
            color=0x00ff41,
            timestamp=datetime.now(timezone.utc)
        )
        embed.set_footer(text="üéâ Arsenal Config Revolution ‚Ä¢ Configuration Termin√©e !")
        
        view = FinalizedConfigView(self.bot, self.user_id, self.guild_id)
        await interaction.edit_original_response(embed=embed, view=view)

# Classes de support pour les vues avanc√©es
class AdvancedConfigView(discord.ui.View):
    """Vue pour la configuration avanc√©e"""
    pass

class ConfigStatusView(discord.ui.View):
    """Vue pour l'√©tat de la configuration"""
    pass

class ResetConfirmView(discord.ui.View):
    """Vue de confirmation de reset"""
    pass

class ModuleCustomizationView(discord.ui.View):
    """Vue pour personnaliser les modules"""
    pass

class FinalizedConfigView(discord.ui.View):
    """Vue finale apr√®s configuration termin√©e"""
    pass

# Commande principale
@app_commands.command(name="config", description="üîß Interface de configuration r√©volutionnaire Arsenal")
@app_commands.describe(action="Action √† effectuer (optionnel)")
async def config_revolution(interaction: discord.Interaction, action: str = None):
    """Commande principale de configuration r√©volutionnaire"""
    
    # V√©rification des permissions
    if not interaction.user.guild_permissions.administrator:
        embed = discord.Embed(
            title="‚ùå Permissions Insuffisantes",
            description="Seuls les **Administrateurs** peuvent utiliser la configuration Arsenal.",
            color=0xe74c3c
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
        return
    
    # Interface principale
    embed = discord.Embed(
        title="üîß Arsenal Config Revolution",
        description="""
**üöÄ Bienvenue dans le syst√®me de configuration Arsenal le plus avanc√© !**

**‚ö° Configuration Rapide (Recommand√©)**
Configurez votre serveur en 30 minutes maximum avec notre assistant intelligent guid√©.

**üéõÔ∏è Configuration Avanc√©e**
Acc√®s complet √† tous les param√®tres pour les utilisateurs exp√©riment√©s.

**üìä √âtat de la Configuration**
Visualisez l'√©tat actuel de votre configuration Arsenal.

**üîÑ R√©initialisation**
Remettez √† z√©ro toute la configuration (action irr√©versible).

‚ú® **Nouveau :** Interface r√©volutionnaire avec presets intelligents !
""",
        color=0x00ff41,
        timestamp=datetime.now(timezone.utc)
    )
    embed.set_footer(text="Arsenal Config Revolution ‚Ä¢ V2.0")
    embed.set_thumbnail(url=interaction.guild.icon.url if interaction.guild.icon else None)
    
    view = ConfigMainView(interaction.client, interaction.user.id, interaction.guild.id)
    await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

# =============================================================================
# M√âTHODES SYST√àME AVANC√âES - ANALYTICS ET MONITORING
# =============================================================================

    async def generate_analytics_report(self, guild: discord.Guild) -> Dict[str, Any]:
        """G√©n√®re un rapport analytics complet"""
        try:
            report = {
                "generated_at": datetime.now(timezone.utc).isoformat(),
                "guild_id": guild.id,
                "guild_name": guild.name,
                "general_stats": await self._get_general_analytics(guild),
                "member_analytics": await self._get_member_analytics(guild),
                "economy_analytics": await self._get_economy_analytics(guild),
                "activity_analytics": await self._get_activity_analytics(guild),
                "configuration_health": await self._get_config_health(guild)
            }
            return report
        except Exception as e:
            logger.error(f"Erreur g√©n√©ration rapport {guild.id}: {e}")
            return {"error": str(e)}
    
    async def _get_general_analytics(self, guild: discord.Guild) -> Dict[str, Any]:
        """Analytics g√©n√©rales du serveur"""
        return {
            "member_count": guild.member_count,
            "bot_count": len([m for m in guild.members if m.bot]),
            "human_count": len([m for m in guild.members if not m.bot]),
            "online_count": len([m for m in guild.members if m.status != discord.Status.offline]),
            "channel_count": len(guild.channels),
            "text_channel_count": len(guild.text_channels),
            "voice_channel_count": len(guild.voice_channels),
            "role_count": len(guild.roles),
            "premium_tier": guild.premium_tier,
            "boost_count": guild.premium_subscription_count,
            "creation_date": guild.created_at.isoformat(),
            "verification_level": str(guild.verification_level)
        }
    
    async def _get_member_analytics(self, guild: discord.Guild) -> Dict[str, Any]:
        """Analytics des membres"""
        member_data = {
            "status_distribution": {},
            "role_distribution": {},
            "join_distribution": {},
            "activity_metrics": {}
        }
        
        # Distribution des statuts
        for member in guild.members:
            status = str(member.status)
            member_data["status_distribution"][status] = member_data["status_distribution"].get(status, 0) + 1
        
        # Distribution des r√¥les (top 10)
        role_counts = {}
        for member in guild.members:
            for role in member.roles[1:]:  # Ignorer @everyone
                role_counts[role.name] = role_counts.get(role.name, 0) + 1
        
        member_data["role_distribution"] = dict(sorted(role_counts.items(), key=lambda x: x[1], reverse=True)[:10])
        
        # Distribution des joins (derniers 30 jours par semaine)
        now = datetime.now(timezone.utc)
        weeks = {}
        for member in guild.members:
            if member.joined_at:
                weeks_ago = (now - member.joined_at).days // 7
                if weeks_ago <= 4:  # Derni√®res 5 semaines
                    week_key = f"week_{weeks_ago}"
                    weeks[week_key] = weeks.get(week_key, 0) + 1
        
        member_data["join_distribution"] = weeks
        
        return member_data
    
    async def _get_economy_analytics(self, guild: discord.Guild) -> Dict[str, Any]:
        """Analytics √©conomiques (simulation pour demo)"""
        # En production, ces donn√©es viendraient de la vraie DB √©conomie
        return {
            "total_arsenalcoin": random.randint(50000, 200000),
            "daily_transactions": random.randint(20, 100),
            "active_economy_users": random.randint(int(guild.member_count * 0.3), int(guild.member_count * 0.7)),
            "shop_sales_today": random.randint(5, 25),
            "top_balance": random.randint(5000, 50000),
            "average_balance": random.randint(100, 1000),
            "casino_winnings": random.randint(1000, 10000),
            "hunt_royal_players": random.randint(10, 50)
        }
    
    async def _get_activity_analytics(self, guild: discord.Guild) -> Dict[str, Any]:
        """Analytics d'activit√©"""
        # Simulation des m√©triques d'activit√©
        return {
            "messages_today": random.randint(100, 1000),
            "voice_minutes_today": random.randint(500, 5000),
            "commands_used_today": random.randint(50, 300),
            "active_channels": random.randint(5, 15),
            "peak_online_today": random.randint(int(guild.member_count * 0.2), guild.member_count),
            "engagement_score": round(random.uniform(0.3, 0.9), 2)
        }
    
    async def _get_config_health(self, guild: discord.Guild) -> Dict[str, Any]:
        """Sant√© de la configuration"""
        config = await self.load_guild_config(guild.id)
        
        enabled_modules = []
        total_modules = 0
        
        module_list = [
            "moderation", "economy", "entertainment", "voice", "logs",
            "notifications", "security", "rules", "roles", "advanced"
        ]
        
        for module in module_list:
            total_modules += 1
            if config.get(module, {}).get("enabled", False):
                enabled_modules.append(module)
        
        health_score = len(enabled_modules) / total_modules if total_modules > 0 else 0
        
        return {
            "health_score": round(health_score * 100, 1),
            "enabled_modules": len(enabled_modules),
            "total_modules": total_modules,
            "setup_progress": config.get("setup_progress", 0),
            "last_modified": config.get("last_modified", "Never"),
            "configuration_errors": await self._check_config_errors(config),
            "optimization_suggestions": await self._get_optimization_suggestions(config, guild)
        }
    
    async def _check_config_errors(self, config: Dict[str, Any]) -> List[str]:
        """V√©rifie les erreurs de configuration"""
        errors = []
        
        # V√©rifications basiques
        if not config.get("setup_completed", False):
            errors.append("Configuration non finalis√©e")
        
        if config.get("setup_progress", 0) < 50:
            errors.append("Configuration incompl√®te (< 50%)")
        
        # V√©rifications de modules
        if config.get("moderation", {}).get("enabled", False):
            if not config.get("moderation", {}).get("configured", False):
                errors.append("Module mod√©ration activ√© mais non configur√©")
        
        if config.get("economy", {}).get("enabled", False):
            if not config.get("economy", {}).get("shop_configured", False):
                errors.append("√âconomie activ√©e mais boutique non configur√©e")
        
        return errors
    
    async def _get_optimization_suggestions(self, config: Dict[str, Any], guild: discord.Guild) -> List[str]:
        """Suggestions d'optimisation"""
        suggestions = []
        
        # Suggestions bas√©es sur la taille du serveur
        if guild.member_count > 100:
            if not config.get("moderation", {}).get("enabled", False):
                suggestions.append("Activez la mod√©ration pour les serveurs > 100 membres")
            
            if not config.get("voice", {}).get("hub_enabled", False):
                suggestions.append("Hub vocal recommand√© pour les gros serveurs")
        
        if guild.member_count > 500:
            if not config.get("logs", {}).get("enabled", False):
                suggestions.append("Logs essentiels pour les serveurs > 500 membres")
        
        # Suggestions fonctionnelles
        if config.get("economy", {}).get("enabled", False):
            if not config.get("entertainment", {}).get("enabled", False):
                suggestions.append("Activez les jeux pour compl√©ter l'√©conomie")
        
        return suggestions
    
    async def export_analytics_report(self, guild: discord.Guild, format_type: str = "json") -> str:
        """Exporte le rapport analytics"""
        report = await self.generate_analytics_report(guild)
        
        if format_type == "json":
            return json.dumps(report, indent=2, ensure_ascii=False)
        elif format_type == "csv":
            return await self._convert_to_csv(report)
        else:
            return str(report)
    
    async def _convert_to_csv(self, report: Dict[str, Any]) -> str:
        """Convertit le rapport en CSV basique"""
        csv_lines = ["M√©trique,Valeur"]
        
        def flatten_dict(d, prefix=""):
            for key, value in d.items():
                if isinstance(value, dict):
                    yield from flatten_dict(value, f"{prefix}{key}.")
                else:
                    yield f"{prefix}{key},{value}"
        
        csv_lines.extend(flatten_dict(report))
        return "\n".join(csv_lines)


# =============================================================================
# SYST√àME DE VALIDATION AVANC√âE
# =============================================================================

    async def advanced_config_validation(self, guild: discord.Guild, config: Dict[str, Any]) -> Dict[str, Any]:
        """Validation avanc√©e de la configuration"""
        validation_result = {
            "is_valid": True,
            "errors": [],
            "warnings": [],
            "suggestions": [],
            "health_score": 0
        }
        
        try:
            # Validation des permissions bot
            bot_member = guild.get_member(self.bot.user.id)
            if bot_member:
                perms = bot_member.guild_permissions
                required_perms = [
                    'manage_channels', 'manage_roles', 'manage_messages',
                    'kick_members', 'ban_members', 'view_audit_log'
                ]
                
                for perm in required_perms:
                    if not getattr(perms, perm, False):
                        validation_result["errors"].append(f"Permission manquante: {perm}")
                        validation_result["is_valid"] = False
            
            # Validation des modules
            await self._validate_modules_config(config, validation_result)
            
            # Validation de la coh√©rence
            await self._validate_config_consistency(config, validation_result, guild)
            
            # Calcul du score de sant√©
            total_checks = len(validation_result["errors"]) + len(validation_result["warnings"]) + len(validation_result["suggestions"])
            error_weight = len(validation_result["errors"]) * 3
            warning_weight = len(validation_result["warnings"]) * 2
            suggestion_weight = len(validation_result["suggestions"]) * 1
            
            total_weight = error_weight + warning_weight + suggestion_weight
            max_possible_weight = 30  # Estimation max
            
            validation_result["health_score"] = max(0, 100 - (total_weight / max_possible_weight * 100))
            
        except Exception as e:
            validation_result["errors"].append(f"Erreur validation: {str(e)}")
            validation_result["is_valid"] = False
        
        return validation_result
    
    async def _validate_modules_config(self, config: Dict[str, Any], result: Dict[str, Any]):
        """Valide la configuration des modules"""
        
        # Validation mod√©ration
        if config.get("moderation", {}).get("enabled", False):
            mod_config = config["moderation"]
            if not mod_config.get("automod_enabled", False):
                result["warnings"].append("Mod√©ration activ√©e mais AutoMod d√©sactiv√©")
            
            if mod_config.get("automod_strictness", 5) > 8:
                result["warnings"].append("Niveau AutoMod tr√®s strict, risque de faux positifs")
        
        # Validation √©conomie
        if config.get("economy", {}).get("enabled", False):
            eco_config = config["economy"]
            if eco_config.get("daily_reward", 0) > 1000:
                result["warnings"].append("R√©compense quotidienne √©lev√©e, risque d'inflation")
            
            if not eco_config.get("shop_items"):
                result["suggestions"].append("Configurez des articles boutique pour l'√©conomie")
        
        # Validation vocal
        if config.get("voice", {}).get("enabled", False):
            voice_config = config["voice"]
            if voice_config.get("temp_channel_limit", 0) > 50:
                result["warnings"].append("Limite salons vocaux √©lev√©e, impact performance")
    
    async def _validate_config_consistency(self, config: Dict[str, Any], result: Dict[str, Any], guild: discord.Guild):
        """Valide la coh√©rence de la configuration"""
        
        # Coh√©rence taille serveur vs config
        member_count = guild.member_count
        
        if member_count < 50:
            if config.get("logs", {}).get("detailed_logs", False):
                result["suggestions"].append("Logs d√©taill√©s peu utiles pour petits serveurs")
        
        elif member_count > 500:
            if not config.get("moderation", {}).get("enabled", False):
                result["warnings"].append("Mod√©ration recommand√©e pour serveurs > 500 membres")
            
            if not config.get("logs", {}).get("enabled", False):
                result["errors"].append("Logs essentiels pour gros serveurs")
        
        # Coh√©rence modules interd√©pendants
        if config.get("economy", {}).get("enabled", False):
            if not config.get("entertainment", {}).get("enabled", False):
                result["suggestions"].append("Jeux recommand√©s avec √©conomie")
        
        if config.get("voice", {}).get("hub_enabled", False):
            if not config.get("voice", {}).get("music_enabled", False):
                result["suggestions"].append("Musique recommand√©e avec hub vocal")


# =============================================================================
# SYST√àME DE BACKUP ET RESTORE AVANC√â
# =============================================================================

    async def create_advanced_backup(self, guild: discord.Guild, backup_name: str = None) -> Dict[str, Any]:
        """Cr√©e un backup avanc√© complet"""
        try:
            backup_name = backup_name or f"auto_backup_{datetime.now(timezone.utc).strftime('%Y%m%d_%H%M%S')}"
            
            config = await self.load_guild_config(guild.id)
            
            backup_data = {
                "backup_info": {
                    "name": backup_name,
                    "created_at": datetime.now(timezone.utc).isoformat(),
                    "guild_id": guild.id,
                    "guild_name": guild.name,
                    "arsenal_version": "Revolution 2.0",
                    "config_version": "2.0.0"
                },
                "full_configuration": config,
                "guild_structure": await self._backup_guild_structure(guild),
                "analytics_snapshot": await self.generate_analytics_report(guild),
                "validation_report": await self.advanced_config_validation(guild, config)
            }
            
            # Sauvegarde dans fichier
            backup_path = f"backups/guild_{guild.id}/"
            os.makedirs(backup_path, exist_ok=True)
            
            backup_file = f"{backup_path}{backup_name}.json"
            
            with open(backup_file, 'w', encoding='utf-8') as f:
                json.dump(backup_data, f, indent=2, ensure_ascii=False)
            
            # Nettoyage anciens backups (garde les 10 derniers)
            await self._cleanup_old_backups(backup_path)
            
            return {
                "success": True,
                "backup_name": backup_name,
                "backup_file": backup_file,
                "size": os.path.getsize(backup_file),
                "created_at": backup_data["backup_info"]["created_at"]
            }
            
        except Exception as e:
            logger.error(f"Erreur cr√©ation backup {guild.id}: {e}")
            return {"success": False, "error": str(e)}
    
    async def _backup_guild_structure(self, guild: discord.Guild) -> Dict[str, Any]:
        """Sauvegarde la structure du serveur"""
        return {
            "channels": [
                {
                    "id": channel.id,
                    "name": channel.name,
                    "type": str(channel.type),
                    "category": channel.category.name if channel.category else None,
                    "position": channel.position
                }
                for channel in guild.channels
            ],
            "roles": [
                {
                    "id": role.id,
                    "name": role.name,
                    "color": role.color.value,
                    "position": role.position,
                    "permissions": role.permissions.value,
                    "mentionable": role.mentionable,
                    "hoist": role.hoist
                }
                for role in guild.roles if role.name != "@everyone"
            ],
            "categories": [
                {
                    "id": category.id,
                    "name": category.name,
                    "position": category.position
                }
                for category in guild.categories
            ]
        }
    
    async def _cleanup_old_backups(self, backup_path: str, keep_count: int = 10):
        """Nettoie les anciens backups"""
        try:
            if not os.path.exists(backup_path):
                return
            
            backup_files = []
            for file in os.listdir(backup_path):
                if file.endswith('.json'):
                    file_path = os.path.join(backup_path, file)
                    backup_files.append((file_path, os.path.getmtime(file_path)))
            
            # Tri par date de modification (plus r√©cent en premier)
            backup_files.sort(key=lambda x: x[1], reverse=True)
            
            # Supprime les backups en exc√®s
            for file_path, _ in backup_files[keep_count:]:
                os.remove(file_path)
                
        except Exception as e:
            logger.error(f"Erreur nettoyage backups: {e}")
    
    async def restore_from_backup(self, guild: discord.Guild, backup_name: str) -> Dict[str, Any]:
        """Restaure depuis un backup"""
        try:
            backup_path = f"backups/guild_{guild.id}/{backup_name}.json"
            
            if not os.path.exists(backup_path):
                return {"success": False, "error": "Backup non trouv√©"}
            
            with open(backup_path, 'r', encoding='utf-8') as f:
                backup_data = json.load(f)
            
            # Validation du backup
            if backup_data.get("backup_info", {}).get("guild_id") != guild.id:
                return {"success": False, "error": "Backup non compatible avec ce serveur"}
            
            # Cr√©ation backup de s√©curit√© avant restore
            safety_backup = await self.create_advanced_backup(guild, f"before_restore_{backup_name}")
            
            # Restoration de la configuration
            restored_config = backup_data.get("full_configuration", {})
            await self.save_guild_config(guild.id, restored_config)
            
            return {
                "success": True,
                "restored_from": backup_name,
                "safety_backup": safety_backup.get("backup_name"),
                "restored_at": datetime.now(timezone.utc).isoformat()
            }
            
        except Exception as e:
            logger.error(f"Erreur restoration backup {guild.id}: {e}")
            return {"success": False, "error": str(e)}
    
    async def list_available_backups(self, guild: discord.Guild) -> List[Dict[str, Any]]:
        """Liste les backups disponibles"""
        try:
            backup_path = f"backups/guild_{guild.id}/"
            
            if not os.path.exists(backup_path):
                return []
            
            backups = []
            for file in os.listdir(backup_path):
                if file.endswith('.json'):
                    file_path = os.path.join(backup_path, file)
                    
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            backup_info = json.load(f).get("backup_info", {})
                        
                        backups.append({
                            "name": backup_info.get("name", file),
                            "created_at": backup_info.get("created_at"),
                            "file_size": os.path.getsize(file_path),
                            "file_name": file
                        })
                    except:
                        continue
            
            # Tri par date de cr√©ation
            backups.sort(key=lambda x: x.get("created_at", ""), reverse=True)
            return backups
            
        except Exception as e:
            logger.error(f"Erreur liste backups {guild.id}: {e}")
            return []


# =============================================================================
# SYST√àME DE MONITORING ET ALERTES
# =============================================================================

    async def monitor_configuration_health(self, guild: discord.Guild) -> Dict[str, Any]:
        """Surveille la sant√© de la configuration"""
        try:
            config = await self.load_guild_config(guild.id)
            validation = await self.advanced_config_validation(guild, config)
            analytics = await self.generate_analytics_report(guild)
            
            health_status = {
                "overall_health": validation["health_score"],
                "status": "healthy" if validation["health_score"] > 80 else "warning" if validation["health_score"] > 60 else "critical",
                "critical_issues": len(validation["errors"]),
                "warnings": len(validation["warnings"]),
                "suggestions": len(validation["suggestions"]),
                "last_check": datetime.now(timezone.utc).isoformat(),
                "trends": {
                    "member_growth": await self._calculate_member_trend(guild),
                    "activity_trend": await self._calculate_activity_trend(analytics),
                    "economy_health": await self._calculate_economy_health(analytics)
                }
            }
            
            # Alertes automatiques
            await self._check_automatic_alerts(guild, health_status)
            
            return health_status
            
        except Exception as e:
            logger.error(f"Erreur monitoring {guild.id}: {e}")
            return {"error": str(e)}
    
    async def _calculate_member_trend(self, guild: discord.Guild) -> str:
        """Calcule la tendance des membres"""
        # En production, comparer avec donn√©es historiques
        current_count = guild.member_count
        
        # Simulation bas√©e sur l'√¢ge du serveur
        age_days = (datetime.now(timezone.utc) - guild.created_at).days
        
        if age_days < 30:
            return "growing"
        elif current_count < 100:
            return "stable"
        else:
            return "growing"
    
    async def _calculate_activity_trend(self, analytics: Dict[str, Any]) -> str:
        """Calcule la tendance d'activit√©"""
        activity_data = analytics.get("activity_analytics", {})
        engagement = activity_data.get("engagement_score", 0.5)
        
        if engagement > 0.7:
            return "high"
        elif engagement > 0.4:
            return "moderate"
        else:
            return "low"
    
    async def _calculate_economy_health(self, analytics: Dict[str, Any]) -> str:
        """Calcule la sant√© √©conomique"""
        economy_data = analytics.get("economy_analytics", {})
        daily_transactions = economy_data.get("daily_transactions", 0)
        
        if daily_transactions > 50:
            return "thriving"
        elif daily_transactions > 20:
            return "healthy"
        else:
            return "slow"
    
    async def _check_automatic_alerts(self, guild: discord.Guild, health_status: Dict[str, Any]):
        """V√©rifie et envoie les alertes automatiques"""
        try:
            # Configuration des alertes
            config = await self.load_guild_config(guild.id)
            alerts_config = config.get("alerts", {})
            
            if not alerts_config.get("enabled", False):
                return
            
            alert_channel_id = alerts_config.get("channel_id")
            if not alert_channel_id:
                return
            
            alert_channel = guild.get_channel(alert_channel_id)
            if not alert_channel:
                return
            
            # V√©rification des seuils d'alerte
            if health_status["overall_health"] < 60 and health_status["critical_issues"] > 0:
                embed = discord.Embed(
                    title="üö® Alerte Configuration Critique",
                    description=f"La sant√© de la configuration est critique (**{health_status['overall_health']:.1f}%**)",
                    color=0xFF0000
                )
                embed.add_field(
                    name="üìä Probl√®mes D√©tect√©s",
                    value=f"‚Ä¢ **{health_status['critical_issues']}** erreurs critiques\n"
                          f"‚Ä¢ **{health_status['warnings']}** avertissements\n"
                          f"‚Ä¢ **{health_status['suggestions']}** suggestions",
                    inline=False
                )
                embed.add_field(
                    name="üîß Action Recommand√©e",
                    value="Utilisez `/config` pour corriger les probl√®mes d√©tect√©s.",
                    inline=False
                )
                embed.set_footer(text="Arsenal Config Monitor ‚Ä¢ Alerte Automatique")
                
                await alert_channel.send(embed=embed)
                
        except Exception as e:
            logger.error(f"Erreur alertes automatiques {guild.id}: {e}")


# =============================================================================
# FINALISATION ET SETUP
# =============================================================================

async def setup(bot):
    """Setup function pour charger le cog Arsenal Config Revolution"""
    cog = ArsenalConfigRevolution(bot)
    await bot.add_cog(cog)
    
    logger.info("üöÄ Arsenal Config Revolution V2.0 - Syst√®me Complet Charg√©!")
    logger.info("üìä Fonctionnalit√©s: Configuration Intelligente, Analytics Avanc√©es, Monitoring")
    logger.info("üéØ Objectif: Configuration serveur compl√®te en 15-30 minutes")
    
    # Initialisation des r√©pertoires
    os.makedirs("backups", exist_ok=True)
    os.makedirs("analytics", exist_ok=True)
    os.makedirs("logs", exist_ok=True)
    
    print("‚úÖ Arsenal Config Revolution - Syst√®me r√©volutionnaire pr√™t!")
    print("üéÆ 29 modules configurables | üöÄ Setup ultra-rapide | üìä Analytics temps r√©el")
    print("üíé Interface moderne Discord UI | üõ°Ô∏è Validation avanc√©e | üíæ Backups automatiques")

